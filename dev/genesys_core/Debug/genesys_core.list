
genesys_core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e00  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  080120a0  080120a0  000220a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801244c  0801244c  00030474  2**0
                  CONTENTS
  4 .ARM          00000008  0801244c  0801244c  0002244c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012454  08012454  00030474  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012454  08012454  00022454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012458  08012458  00022458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000474  24000000  0801245c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d60  24000474  080128d0  00030474  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240011d4  080128d0  000311d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030474  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bea0  00000000  00000000  000304a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005014  00000000  00000000  0005c342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f40  00000000  00000000  00061358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d30  00000000  00000000  00063298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ed9e  00000000  00000000  00064fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030a09  00000000  00000000  000a3d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018582e  00000000  00000000  000d476f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00259f9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008934  00000000  00000000  00259ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000474 	.word	0x24000474
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012088 	.word	0x08012088

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000478 	.word	0x24000478
 80002dc:	08012088 	.word	0x08012088

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]
 80006aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80006ac:	4b27      	ldr	r3, [pc, #156]	; (800074c <MX_ADC3_Init+0xb8>)
 80006ae:	4a28      	ldr	r2, [pc, #160]	; (8000750 <MX_ADC3_Init+0xbc>)
 80006b0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_14B;
 80006b2:	4b26      	ldr	r3, [pc, #152]	; (800074c <MX_ADC3_Init+0xb8>)
 80006b4:	2204      	movs	r2, #4
 80006b6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <MX_ADC3_Init+0xb8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <MX_ADC3_Init+0xb8>)
 80006c0:	2204      	movs	r2, #4
 80006c2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_ADC3_Init+0xb8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <MX_ADC3_Init+0xb8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80006d0:	4b1e      	ldr	r3, [pc, #120]	; (800074c <MX_ADC3_Init+0xb8>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80006d6:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_ADC3_Init+0xb8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80006dc:	4b1b      	ldr	r3, [pc, #108]	; (800074c <MX_ADC3_Init+0xb8>)
 80006de:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 80006e2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_ADC3_Init+0xb8>)
 80006e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_ADC3_Init+0xb8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_ADC3_Init+0xb8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_ADC3_Init+0xb8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_ADC3_Init+0xb8>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000706:	4811      	ldr	r0, [pc, #68]	; (800074c <MX_ADC3_Init+0xb8>)
 8000708:	f003 f89c 	bl	8003844 <HAL_ADC_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 8000712:	f001 f83b 	bl	800178c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000716:	2301      	movs	r3, #1
 8000718:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800071a:	2306      	movs	r3, #6
 800071c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000722:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000726:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000728:	2304      	movs	r3, #4
 800072a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_ADC3_Init+0xb8>)
 8000736:	f003 fdc3 	bl	80042c0 <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000740:	f001 f824 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	24000490 	.word	0x24000490
 8000750:	58026000 	.word	0x58026000

08000754 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a1c      	ldr	r2, [pc, #112]	; (80007d4 <HAL_ADC_MspInit+0x80>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d131      	bne.n	80007ca <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <HAL_ADC_MspInit+0x84>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076c:	4a1a      	ldr	r2, [pc, #104]	; (80007d8 <HAL_ADC_MspInit+0x84>)
 800076e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <HAL_ADC_MspInit+0x84>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <HAL_ADC_MspInit+0x84>)
 8000786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078a:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <HAL_ADC_MspInit+0x84>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <HAL_ADC_MspInit+0x84>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    PC3_C     ------> ADC3_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80007a2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80007a6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80007aa:	f002 fe19 	bl	80033e0 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80007ae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80007b2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80007b6:	f002 fe13 	bl	80033e0 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	207f      	movs	r0, #127	; 0x7f
 80007c0:	f004 fc65 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80007c4:	207f      	movs	r0, #127	; 0x7f
 80007c6:	f004 fc7c 	bl	80050c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	58026000 	.word	0x58026000
 80007d8:	58024400 	.word	0x58024400

080007dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_DMA_Init+0x4c>)
 80007e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007e8:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <MX_DMA_Init+0x4c>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_DMA_Init+0x4c>)
 80007f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	200b      	movs	r0, #11
 8000806:	f004 fc42 	bl	800508e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800080a:	200b      	movs	r0, #11
 800080c:	f004 fc59 	bl	80050c2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	200c      	movs	r0, #12
 8000816:	f004 fc3a 	bl	800508e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800081a:	200c      	movs	r0, #12
 800081c:	f004 fc51 	bl	80050c2 <HAL_NVIC_EnableIRQ>

}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	58024400 	.word	0x58024400

0800082c <MX_GPIO_Init>:
     PA15 (JTDI)   ------> DEBUG_JTDI
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
     PB4 (NJTRST)   ------> DEBUG_JTRST
*/
void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08e      	sub	sp, #56	; 0x38
 8000830:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000842:	4b75      	ldr	r3, [pc, #468]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000848:	4a73      	ldr	r2, [pc, #460]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 800084a:	f043 0310 	orr.w	r3, r3, #16
 800084e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000852:	4b71      	ldr	r3, [pc, #452]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000858:	f003 0310 	and.w	r3, r3, #16
 800085c:	623b      	str	r3, [r7, #32]
 800085e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000860:	4b6d      	ldr	r3, [pc, #436]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 8000862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000866:	4a6c      	ldr	r2, [pc, #432]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 8000868:	f043 0320 	orr.w	r3, r3, #32
 800086c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000870:	4b69      	ldr	r3, [pc, #420]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 8000872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000876:	f003 0320 	and.w	r3, r3, #32
 800087a:	61fb      	str	r3, [r7, #28]
 800087c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	4b66      	ldr	r3, [pc, #408]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000884:	4a64      	ldr	r2, [pc, #400]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 8000886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800088e:	4b62      	ldr	r3, [pc, #392]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 8000890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089c:	4b5e      	ldr	r3, [pc, #376]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	4a5d      	ldr	r2, [pc, #372]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ac:	4b5a      	ldr	r3, [pc, #360]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b57      	ldr	r3, [pc, #348]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 80008bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c0:	4a55      	ldr	r2, [pc, #340]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ca:	4b53      	ldr	r3, [pc, #332]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 80008cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	613b      	str	r3, [r7, #16]
 80008d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d8:	4b4f      	ldr	r3, [pc, #316]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 80008da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008de:	4a4e      	ldr	r2, [pc, #312]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e8:	4b4b      	ldr	r3, [pc, #300]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 80008ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008f6:	4b48      	ldr	r3, [pc, #288]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	4a46      	ldr	r2, [pc, #280]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 80008fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000906:	4b44      	ldr	r3, [pc, #272]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000914:	4b40      	ldr	r3, [pc, #256]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091a:	4a3f      	ldr	r2, [pc, #252]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000924:	4b3c      	ldr	r3, [pc, #240]	; (8000a18 <MX_GPIO_Init+0x1ec>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, user_LED_right_Pin|user_LED_left_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2103      	movs	r1, #3
 8000936:	4839      	ldr	r0, [pc, #228]	; (8000a1c <MX_GPIO_Init+0x1f0>)
 8000938:	f007 fbd6 	bl	80080e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2104      	movs	r1, #4
 8000940:	4837      	ldr	r0, [pc, #220]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 8000942:	f007 fbd1 	bl	80080e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP17_GPIO_Port, TP17_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2101      	movs	r1, #1
 800094a:	4836      	ldr	r0, [pc, #216]	; (8000a24 <MX_GPIO_Init+0x1f8>)
 800094c:	f007 fbcc 	bl	80080e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_SPI_reg_UPD_GPIO_Port, LED_SPI_reg_UPD_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000956:	4834      	ldr	r0, [pc, #208]	; (8000a28 <MX_GPIO_Init+0x1fc>)
 8000958:	f007 fbc6 	bl	80080e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MUX_sel_A_Pin|MUX_sel_B_Pin|MUX_sel_C_Pin|audio_codec_reset_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 5162 	mov.w	r1, #14464	; 0x3880
 8000962:	4832      	ldr	r0, [pc, #200]	; (8000a2c <MX_GPIO_Init+0x200>)
 8000964:	f007 fbc0 	bl	80080e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = user_LED_right_Pin|user_LED_left_Pin;
 8000968:	2303      	movs	r3, #3
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	4827      	ldr	r0, [pc, #156]	; (8000a1c <MX_GPIO_Init+0x1f0>)
 8000980:	f007 fa02 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 8000984:	2304      	movs	r3, #4
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000998:	4619      	mov	r1, r3
 800099a:	4821      	ldr	r0, [pc, #132]	; (8000a20 <MX_GPIO_Init+0x1f4>)
 800099c:	f007 f9f4 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = pb_array_Pin;
 80009a0:	2310      	movs	r3, #16
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(pb_array_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4619      	mov	r1, r3
 80009b2:	481f      	ldr	r0, [pc, #124]	; (8000a30 <MX_GPIO_Init+0x204>)
 80009b4:	f007 f9e8 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP17_Pin;
 80009b8:	2301      	movs	r3, #1
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TP17_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	4619      	mov	r1, r3
 80009ce:	4815      	ldr	r0, [pc, #84]	; (8000a24 <MX_GPIO_Init+0x1f8>)
 80009d0:	f007 f9da 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_SPI_reg_UPD_Pin;
 80009d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_SPI_reg_UPD_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	4619      	mov	r1, r3
 80009ec:	480e      	ldr	r0, [pc, #56]	; (8000a28 <MX_GPIO_Init+0x1fc>)
 80009ee:	f007 f9cb 	bl	8007d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MUX_sel_A_Pin|MUX_sel_B_Pin|MUX_sel_C_Pin|audio_codec_reset_Pin;
 80009f2:	f44f 5362 	mov.w	r3, #14464	; 0x3880
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f8:	2301      	movs	r3, #1
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a00:	2300      	movs	r3, #0
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4808      	ldr	r0, [pc, #32]	; (8000a2c <MX_GPIO_Init+0x200>)
 8000a0c:	f007 f9bc 	bl	8007d88 <HAL_GPIO_Init>

}
 8000a10:	bf00      	nop
 8000a12:	3738      	adds	r7, #56	; 0x38
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	58024400 	.word	0x58024400
 8000a1c:	58021400 	.word	0x58021400
 8000a20:	58020000 	.word	0x58020000
 8000a24:	58021800 	.word	0x58021800
 8000a28:	58021000 	.word	0x58021000
 8000a2c:	58020c00 	.word	0x58020c00
 8000a30:	58020800 	.word	0x58020800

08000a34 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b09a      	sub	sp, #104	; 0x68
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a3e:	2234      	movs	r2, #52	; 0x34
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f010 feaa 	bl	801179c <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000a48:	463b      	mov	r3, r7
 8000a4a:	2234      	movs	r2, #52	; 0x34
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f010 fea4 	bl	801179c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a54:	4b4e      	ldr	r3, [pc, #312]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000a56:	4a4f      	ldr	r2, [pc, #316]	; (8000b94 <MX_LTDC_Init+0x160>)
 8000a58:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a5a:	4b4d      	ldr	r3, [pc, #308]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a60:	4b4b      	ldr	r3, [pc, #300]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a66:	4b4a      	ldr	r3, [pc, #296]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a6c:	4b48      	ldr	r3, [pc, #288]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000a72:	4b47      	ldr	r3, [pc, #284]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000a74:	2207      	movs	r2, #7
 8000a76:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000a78:	4b45      	ldr	r3, [pc, #276]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000a7e:	4b44      	ldr	r3, [pc, #272]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000a80:	220e      	movs	r2, #14
 8000a82:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000a84:	4b42      	ldr	r3, [pc, #264]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000a86:	2205      	movs	r2, #5
 8000a88:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000a8a:	4b41      	ldr	r3, [pc, #260]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000a8c:	f240 228e 	movw	r2, #654	; 0x28e
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000a92:	4b3f      	ldr	r3, [pc, #252]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000a94:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000a9a:	4b3d      	ldr	r3, [pc, #244]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000a9c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000aa4:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000aa8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000aaa:	4b39      	ldr	r3, [pc, #228]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000ab2:	4b37      	ldr	r3, [pc, #220]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000aba:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ac2:	4833      	ldr	r0, [pc, #204]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000ac4:	f007 fba6 	bl	8008214 <HAL_LTDC_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000ace:	f000 fe5d 	bl	800178c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000af2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000af4:	2305      	movs	r3, #5
 8000af6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481c      	ldr	r0, [pc, #112]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000b20:	f007 fc48 	bl	80083b4 <HAL_LTDC_ConfigLayer>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000b2a:	f000 fe2f 	bl	800178c <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000b50:	2305      	movs	r3, #5
 8000b52:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000b72:	463b      	mov	r3, r7
 8000b74:	2201      	movs	r2, #1
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_LTDC_Init+0x15c>)
 8000b7a:	f007 fc1b 	bl	80083b4 <HAL_LTDC_ConfigLayer>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000b84:	f000 fe02 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b88:	bf00      	nop
 8000b8a:	3768      	adds	r7, #104	; 0x68
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	240004f4 	.word	0x240004f4
 8000b94:	50001000 	.word	0x50001000

08000b98 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b090      	sub	sp, #64	; 0x40
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a8b      	ldr	r2, [pc, #556]	; (8000de4 <HAL_LTDC_MspInit+0x24c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	f040 810f 	bne.w	8000dda <HAL_LTDC_MspInit+0x242>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000bbc:	4b8a      	ldr	r3, [pc, #552]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000bbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000bc2:	4a89      	ldr	r2, [pc, #548]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000bcc:	4b86      	ldr	r3, [pc, #536]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000bce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bda:	4b83      	ldr	r3, [pc, #524]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	4a81      	ldr	r2, [pc, #516]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000be2:	f043 0320 	orr.w	r3, r3, #32
 8000be6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bea:	4b7f      	ldr	r3, [pc, #508]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf0:	f003 0320 	and.w	r3, r3, #32
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf8:	4b7b      	ldr	r3, [pc, #492]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	4a7a      	ldr	r2, [pc, #488]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c08:	4b77      	ldr	r3, [pc, #476]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0e:	f003 0304 	and.w	r3, r3, #4
 8000c12:	623b      	str	r3, [r7, #32]
 8000c14:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b74      	ldr	r3, [pc, #464]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	4a72      	ldr	r2, [pc, #456]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c26:	4b70      	ldr	r3, [pc, #448]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	61fb      	str	r3, [r7, #28]
 8000c32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c34:	4b6c      	ldr	r3, [pc, #432]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	4a6b      	ldr	r2, [pc, #428]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c44:	4b68      	ldr	r3, [pc, #416]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
 8000c50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c52:	4b65      	ldr	r3, [pc, #404]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	4a63      	ldr	r2, [pc, #396]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c62:	4b61      	ldr	r3, [pc, #388]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c68:	f003 0310 	and.w	r3, r3, #16
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c70:	4b5d      	ldr	r3, [pc, #372]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	4a5c      	ldr	r2, [pc, #368]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c80:	4b59      	ldr	r3, [pc, #356]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c86:	f003 0308 	and.w	r3, r3, #8
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8e:	4b56      	ldr	r3, [pc, #344]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a54      	ldr	r2, [pc, #336]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b52      	ldr	r3, [pc, #328]	; (8000de8 <HAL_LTDC_MspInit+0x250>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]
    PA10     ------> LTDC_B4
    PC10     ------> LTDC_R2
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cbe:	230e      	movs	r3, #14
 8000cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4848      	ldr	r0, [pc, #288]	; (8000dec <HAL_LTDC_MspInit+0x254>)
 8000cca:	f007 f85d 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8000cce:	f240 63c1 	movw	r3, #1729	; 0x6c1
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ce0:	230e      	movs	r3, #14
 8000ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4841      	ldr	r0, [pc, #260]	; (8000df0 <HAL_LTDC_MspInit+0x258>)
 8000cec:	f007 f84c 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000cf0:	2378      	movs	r3, #120	; 0x78
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d00:	230e      	movs	r3, #14
 8000d02:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d08:	4619      	mov	r1, r3
 8000d0a:	483a      	ldr	r0, [pc, #232]	; (8000df4 <HAL_LTDC_MspInit+0x25c>)
 8000d0c:	f007 f83c 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d10:	2303      	movs	r3, #3
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000d20:	2309      	movs	r3, #9
 8000d22:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4833      	ldr	r0, [pc, #204]	; (8000df8 <HAL_LTDC_MspInit+0x260>)
 8000d2c:	f007 f82c 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
 8000d30:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d42:	230e      	movs	r3, #14
 8000d44:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	482b      	ldr	r0, [pc, #172]	; (8000dfc <HAL_LTDC_MspInit+0x264>)
 8000d4e:	f007 f81b 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000d52:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d64:	230e      	movs	r3, #14
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4822      	ldr	r0, [pc, #136]	; (8000df8 <HAL_LTDC_MspInit+0x260>)
 8000d70:	f007 f80a 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d86:	230e      	movs	r3, #14
 8000d88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d8e:	4619      	mov	r1, r3
 8000d90:	481b      	ldr	r0, [pc, #108]	; (8000e00 <HAL_LTDC_MspInit+0x268>)
 8000d92:	f006 fff9 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000da8:	230e      	movs	r3, #14
 8000daa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db0:	4619      	mov	r1, r3
 8000db2:	4814      	ldr	r0, [pc, #80]	; (8000e04 <HAL_LTDC_MspInit+0x26c>)
 8000db4:	f006 ffe8 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF12_LTDC;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4807      	ldr	r0, [pc, #28]	; (8000df4 <HAL_LTDC_MspInit+0x25c>)
 8000dd6:	f006 ffd7 	bl	8007d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000dda:	bf00      	nop
 8000ddc:	3740      	adds	r7, #64	; 0x40
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	50001000 	.word	0x50001000
 8000de8:	58024400 	.word	0x58024400
 8000dec:	58021400 	.word	0x58021400
 8000df0:	58020800 	.word	0x58020800
 8000df4:	58020000 	.word	0x58020000
 8000df8:	58020400 	.word	0x58020400
 8000dfc:	58021000 	.word	0x58021000
 8000e00:	58020c00 	.word	0x58020c00
 8000e04:	58021800 	.word	0x58021800

08000e08 <HAL_SAI_TxHalfCpltCallback>:
// ----------------------------------------------------------------------------

// Tx Transfer Half completed callback
// First half of the buffer has been sent.
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  SAI_transmit_done = 1;
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_SAI_TxHalfCpltCallback+0x20>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	701a      	strb	r2, [r3, #0]
  available_buff    = 0;
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_SAI_TxHalfCpltCallback+0x24>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	240005b6 	.word	0x240005b6
 8000e2c:	240005b7 	.word	0x240005b7

08000e30 <HAL_SAI_TxCpltCallback>:

// Tx Transfer completed callback
// Second half of the buffer has been sent.
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{  
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  // First, start the new transfer
  HAL_SAI_Transmit_DMA(&hsai_BlockA1, samples_buff_TX, SAMPLES_BUFF_SIZE_WORDS);
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	4907      	ldr	r1, [pc, #28]	; (8000e58 <HAL_SAI_TxCpltCallback+0x28>)
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <HAL_SAI_TxCpltCallback+0x2c>)
 8000e3e:	f00b f9ad 	bl	800c19c <HAL_SAI_Transmit_DMA>

  // Second, update the flags
  SAI_transmit_done = 1;
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <HAL_SAI_TxCpltCallback+0x30>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	701a      	strb	r2, [r3, #0]
  available_buff    = 1;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_SAI_TxCpltCallback+0x34>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	240005b8 	.word	0x240005b8
 8000e5c:	24000a18 	.word	0x24000a18
 8000e60:	240005b6 	.word	0x240005b6
 8000e64:	240005b7 	.word	0x240005b7

08000e68 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  __NOP();
 8000e70:	bf00      	nop
}
 8000e72:	bf00      	nop
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <HAL_SAI_RxHalfCpltCallback>:

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  __NOP();
 8000e86:	bf00      	nop
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <main>:
// main()
// @brief  The application entry point.
// @retval int
// ----------------------------------------------------------------------------
int main(void)
{
 8000e94:	b590      	push	{r4, r7, lr}
 8000e96:	b0f9      	sub	sp, #484	; 0x1e4
 8000e98:	af00      	add	r7, sp, #0
  // move me in a driver plz
  uint8_t pcm3168a_enable = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
  uint8_t DAC_send_enable = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 31de 	strb.w	r3, [r7, #478]	; 0x1de
  int8_t atten_dB = -20;
 8000ea6:	23ec      	movs	r3, #236	; 0xec
 8000ea8:	f887 31c5 	strb.w	r3, [r7, #453]	; 0x1c5
  uint8_t atten_reg = (uint8_t)((atten_dB << 1) + 255U);
 8000eac:	f897 31c5 	ldrb.w	r3, [r7, #453]	; 0x1c5
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	f887 31dd 	strb.w	r3, [r7, #477]	; 0x1dd

  float f_0 = 110.0f;
 8000eba:	4bc2      	ldr	r3, [pc, #776]	; (80011c4 <main+0x330>)
 8000ebc:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
  float f_1 = 440.5f;
 8000ec0:	4bc1      	ldr	r3, [pc, #772]	; (80011c8 <main+0x334>)
 8000ec2:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  float r_m = 0.1f;
 8000ec6:	4bc1      	ldr	r3, [pc, #772]	; (80011cc <main+0x338>)
 8000ec8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  float a = 1.0f;
 8000ecc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ed0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  midi_note_event note;
  
  // MCU Configuration---------------------------------------------------------

  // Reset of all peripherals, Initializes the Flash interface and the Systick.
  HAL_Init();
 8000ed4:	f002 f9c2 	bl	800325c <HAL_Init>

  // Configure the system clock
  SystemClock_Config();
 8000ed8:	f000 fb88 	bl	80015ec <SystemClock_Config>

  // Configure the peripherals common clocks
  PeriphCommonClock_Config();
 8000edc:	f000 fc0a 	bl	80016f4 <PeriphCommonClock_Config>

  // Initialize all configured peripherals
  MX_DMA_Init();    // <----- MX_DMA_Init() MUST be done first. Otherwise DMA function is jeopardized
 8000ee0:	f7ff fc7c 	bl	80007dc <MX_DMA_Init>
  MX_GPIO_Init();
 8000ee4:	f7ff fca2 	bl	800082c <MX_GPIO_Init>
  MX_ADC3_Init();
 8000ee8:	f7ff fbd4 	bl	8000694 <MX_ADC3_Init>
  MX_LTDC_Init();
 8000eec:	f7ff fda2 	bl	8000a34 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000ef0:	f001 fa3a 	bl	8002368 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000ef4:	f001 fb18 	bl	8002528 <MX_SAI1_Init>
  MX_SPI1_Init();
 8000ef8:	f001 fca0 	bl	800283c <MX_SPI1_Init>
  MX_SPI4_Init();
 8000efc:	f001 fcf4 	bl	80028e8 <MX_SPI4_Init>
  MX_UART4_Init();
 8000f00:	f001 ffc8 	bl	8002e94 <MX_UART4_Init>
  MX_UART5_Init();
 8000f04:	f002 f814 	bl	8002f30 <MX_UART5_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000f08:	f002 f910 	bl	800312c <MX_USB_OTG_FS_HCD_Init>
  MX_TIM2_Init();
 8000f0c:	f001 ff28 	bl	8002d60 <MX_TIM2_Init>
  
  // Start ADC
  if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK)
 8000f10:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000f14:	2100      	movs	r1, #0
 8000f16:	48ae      	ldr	r0, [pc, #696]	; (80011d0 <main+0x33c>)
 8000f18:	f003 ff48 	bl	8004dac <HAL_ADCEx_Calibration_Start>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <main+0x96>
  {
    console("ADC calibration failed\r\n");
 8000f22:	48ac      	ldr	r0, [pc, #688]	; (80011d4 <main+0x340>)
 8000f24:	f000 fc6a 	bl	80017fc <console>
 8000f28:	e002      	b.n	8000f30 <main+0x9c>
  }
  else
  {
    console("ADC calibration OK\r\n");
 8000f2a:	48ab      	ldr	r0, [pc, #684]	; (80011d8 <main+0x344>)
 8000f2c:	f000 fc66 	bl	80017fc <console>
  }

  HAL_ADC_Start_IT(&hadc3);
 8000f30:	48a7      	ldr	r0, [pc, #668]	; (80011d0 <main+0x33c>)
 8000f32:	f002 fe29 	bl	8003b88 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000f36:	2100      	movs	r1, #0
 8000f38:	48a8      	ldr	r0, [pc, #672]	; (80011dc <main+0x348>)
 8000f3a:	f00c fd2f 	bl	800d99c <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart4, UART_rx_buff, 1);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	49a7      	ldr	r1, [pc, #668]	; (80011e0 <main+0x34c>)
 8000f42:	48a8      	ldr	r0, [pc, #672]	; (80011e4 <main+0x350>)
 8000f44:	f00d ff52 	bl	800edec <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, MIDI_rx_buff, 1);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	49a7      	ldr	r1, [pc, #668]	; (80011e8 <main+0x354>)
 8000f4c:	48a7      	ldr	r0, [pc, #668]	; (80011ec <main+0x358>)
 8000f4e:	f00d ff4d 	bl	800edec <HAL_UART_Receive_IT>
  console("Init done!\r\n");
 8000f52:	48a7      	ldr	r0, [pc, #668]	; (80011f0 <main+0x35c>)
 8000f54:	f000 fc52 	bl	80017fc <console>
  console("Ready.\r\n"); 
 8000f58:	48a6      	ldr	r0, [pc, #664]	; (80011f4 <main+0x360>)
 8000f5a:	f000 fc4f 	bl	80017fc <console>

  // Initialise oscillators
  osc_0.p_LUT_osc   = wave_LUT;
 8000f5e:	4ba6      	ldr	r3, [pc, #664]	; (80011f8 <main+0x364>)
 8000f60:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  osc_0.LUT_size    = WAVE_LUT_SIZE;
 8000f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f68:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  osc_0.phase_accu  = 0.0f;
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  osc_0.phase_inc   = WAVE_LUT_SIZE*f_0/SAMPLE_RATE;
 8000f74:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8000f78:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 80011fc <main+0x368>
 8000f7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f80:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8001200 <main+0x36c>
 8000f84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f88:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
  osc_0.output      = osc_0.p_LUT_osc[0];
 8000f8c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

  osc_1.p_LUT_osc   = wave_LUT;
 8000f96:	4b98      	ldr	r3, [pc, #608]	; (80011f8 <main+0x364>)
 8000f98:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  osc_1.LUT_size    = WAVE_LUT_SIZE;
 8000f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  osc_1.phase_accu  = 0.0f;
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  osc_1.phase_inc   = WAVE_LUT_SIZE*f_0/SAMPLE_RATE;
 8000fac:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8000fb0:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80011fc <main+0x368>
 8000fb4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fb8:	eddf 6a91 	vldr	s13, [pc, #580]	; 8001200 <main+0x36c>
 8000fbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc0:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
  osc_1.output      = osc_1.p_LUT_osc[0];
 8000fc4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

  osc_2.p_LUT_osc   = wave_LUT;
 8000fce:	4b8a      	ldr	r3, [pc, #552]	; (80011f8 <main+0x364>)
 8000fd0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  osc_2.LUT_size    = WAVE_LUT_SIZE;
 8000fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  osc_2.phase_accu  = 0.0f;
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  osc_2.phase_inc   = WAVE_LUT_SIZE*f_0/SAMPLE_RATE;
 8000fe4:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8000fe8:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80011fc <main+0x368>
 8000fec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ff0:	eddf 6a83 	vldr	s13, [pc, #524]	; 8001200 <main+0x36c>
 8000ff4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff8:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
  osc_2.output      = osc_2.p_LUT_osc[0];
 8000ffc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

  osc_3.p_LUT_osc   = wave_LUT;
 8001006:	4b7c      	ldr	r3, [pc, #496]	; (80011f8 <main+0x364>)
 8001008:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  osc_3.LUT_size    = WAVE_LUT_SIZE;
 800100c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001010:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  osc_3.phase_accu  = 0.0f;
 8001014:	f04f 0300 	mov.w	r3, #0
 8001018:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  osc_3.phase_inc   = WAVE_LUT_SIZE*f_0/SAMPLE_RATE;
 800101c:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8001020:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80011fc <main+0x368>
 8001024:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001028:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001200 <main+0x36c>
 800102c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001030:	edc7 7a5f 	vstr	s15, [r7, #380]	; 0x17c
  osc_3.output      = osc_3.p_LUT_osc[0];
 8001034:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

  adsr_init(&adsr_vca);
 800103e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001042:	4618      	mov	r0, r3
 8001044:	f000 fea9 	bl	8001d9a <adsr_init>
  adsr_init(&adsr_fm);
 8001048:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fea4 	bl	8001d9a <adsr_init>
  midi_init(&midi_obj);
 8001052:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001056:	4618      	mov	r0, r3
 8001058:	f000 fc1a 	bl	8001890 <midi_init>

  while(1)
  {
    
    // ADC handling
    if (ADC_msg_unread == 1U)
 800105c:	4b69      	ldr	r3, [pc, #420]	; (8001204 <main+0x370>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d127      	bne.n	80010b4 <main+0x220>
    {
      char msg[64];
      ADC_msg_unread = 0U;
 8001064:	4b67      	ldr	r3, [pc, #412]	; (8001204 <main+0x370>)
 8001066:	2200      	movs	r2, #0
 8001068:	701a      	strb	r2, [r3, #0]

      sprintf(msg, "Channel #%d: 0x%08X\r\n", ADC_channel,adc_val);
 800106a:	4b67      	ldr	r3, [pc, #412]	; (8001208 <main+0x374>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	4b67      	ldr	r3, [pc, #412]	; (800120c <main+0x378>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4638      	mov	r0, r7
 8001074:	4966      	ldr	r1, [pc, #408]	; (8001210 <main+0x37c>)
 8001076:	f010 fb99 	bl	80117ac <siprintf>
      HAL_UART_Transmit(&huart4, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800107a:	463b      	mov	r3, r7
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f92f 	bl	80002e0 <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	b29a      	uxth	r2, r3
 8001086:	4639      	mov	r1, r7
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	4855      	ldr	r0, [pc, #340]	; (80011e4 <main+0x350>)
 800108e:	f00d fe17 	bl	800ecc0 <HAL_UART_Transmit>

      ADC_channel = (ADC_channel+1) & 0x7;
 8001092:	4b5d      	ldr	r3, [pc, #372]	; (8001208 <main+0x374>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	4a5a      	ldr	r2, [pc, #360]	; (8001208 <main+0x374>)
 800109e:	6013      	str	r3, [r2, #0]
      GPIOD->ODR = (GPIOD->IDR & 0xFFFFC7FF) | (ADC_channel << 11U);
 80010a0:	4b5c      	ldr	r3, [pc, #368]	; (8001214 <main+0x380>)
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010a8:	4b57      	ldr	r3, [pc, #348]	; (8001208 <main+0x374>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	02db      	lsls	r3, r3, #11
 80010ae:	4959      	ldr	r1, [pc, #356]	; (8001214 <main+0x380>)
 80010b0:	4313      	orrs	r3, r2
 80010b2:	614b      	str	r3, [r1, #20]
    }

    // MIDI FSM
    if (MIDI_unread == 1U) {
 80010b4:	4b58      	ldr	r3, [pc, #352]	; (8001218 <main+0x384>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d10a      	bne.n	80010d4 <main+0x240>
      MIDI_unread = 0U;
 80010be:	4b56      	ldr	r3, [pc, #344]	; (8001218 <main+0x384>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
      midi_update(MIDI_rx_buff[0], &midi_obj);
 80010c4:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <main+0x354>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fc1a 	bl	8001908 <midi_update>
    }

    if (midi_obj.note_event_count > 0) {
 80010d4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80010d8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80010dc:	7a9b      	ldrb	r3, [r3, #10]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d032      	beq.n	8001148 <main+0x2b4>
      note = midi_note_pop(&midi_obj);
 80010e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fd3a 	bl	8001b60 <midi_note_pop>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80010f2:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80010f6:	4611      	mov	r1, r2
 80010f8:	7019      	strb	r1, [r3, #0]
 80010fa:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80010fe:	7059      	strb	r1, [r3, #1]
 8001100:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001104:	709a      	strb	r2, [r3, #2]
      if (note.event == MIDI_EVENT_NOTE_ON) {
 8001106:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800110a:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800110e:	785b      	ldrb	r3, [r3, #1]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d119      	bne.n	8001148 <main+0x2b4>
        a = 1.0f;
 8001114:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001118:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
        r_m = 7.0f;
 800111c:	4b3f      	ldr	r3, [pc, #252]	; (800121c <main+0x388>)
 800111e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
        f_0 = midi_note_freq[note.index];
 8001122:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001126:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4a3c      	ldr	r2, [pc, #240]	; (8001220 <main+0x38c>)
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
        f_1 = 3.02f*f_0;
 8001138:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 800113c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001224 <main+0x390>
 8001140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001144:	edc7 7a75 	vstr	s15, [r7, #468]	; 0x1d4
      }
    }

    // UART interaction FSM
    if (UART_unread == 1)
 8001148:	4b37      	ldr	r3, [pc, #220]	; (8001228 <main+0x394>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b01      	cmp	r3, #1
 8001150:	f040 8157 	bne.w	8001402 <main+0x56e>
    {
      UART_unread = 0;
 8001154:	4b34      	ldr	r3, [pc, #208]	; (8001228 <main+0x394>)
 8001156:	2200      	movs	r2, #0
 8001158:	701a      	strb	r2, [r3, #0]

      // ----------------------------------------------------------------------
      // Turn on the ADC/DAC
      // ----------------------------------------------------------------------
      if (UART_rx_buff[0] == 'o')
 800115a:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <main+0x34c>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b6f      	cmp	r3, #111	; 0x6f
 8001160:	d124      	bne.n	80011ac <main+0x318>
      {
        if (pcm3168a_enable == 0)
 8001162:	f897 31df 	ldrb.w	r3, [r7, #479]	; 0x1df
 8001166:	2b00      	cmp	r3, #0
 8001168:	d110      	bne.n	800118c <main+0x2f8>
        {
          HAL_GPIO_WritePin(user_LED_left_GPIO_Port, user_LED_left_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	2102      	movs	r1, #2
 800116e:	482f      	ldr	r0, [pc, #188]	; (800122c <main+0x398>)
 8001170:	f006 ffba 	bl	80080e8 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(audio_codec_reset_GPIO_Port, audio_codec_reset_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2180      	movs	r1, #128	; 0x80
 8001178:	4826      	ldr	r0, [pc, #152]	; (8001214 <main+0x380>)
 800117a:	f006 ffb5 	bl	80080e8 <HAL_GPIO_WritePin>
          pcm3168a_enable = 1;
 800117e:	2301      	movs	r3, #1
 8001180:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df

          console("PCM3168A is turned ON.\r\n");
 8001184:	482a      	ldr	r0, [pc, #168]	; (8001230 <main+0x39c>)
 8001186:	f000 fb39 	bl	80017fc <console>
 800118a:	e00f      	b.n	80011ac <main+0x318>
        }
        else
        {
          HAL_GPIO_WritePin(user_LED_left_GPIO_Port, user_LED_left_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	2102      	movs	r1, #2
 8001190:	4826      	ldr	r0, [pc, #152]	; (800122c <main+0x398>)
 8001192:	f006 ffa9 	bl	80080e8 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(audio_codec_reset_GPIO_Port, audio_codec_reset_Pin, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	481e      	ldr	r0, [pc, #120]	; (8001214 <main+0x380>)
 800119c:	f006 ffa4 	bl	80080e8 <HAL_GPIO_WritePin>
          pcm3168a_enable = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df

          console("PCM3168A is turned OFF.\r\n");
 80011a6:	4823      	ldr	r0, [pc, #140]	; (8001234 <main+0x3a0>)
 80011a8:	f000 fb28 	bl	80017fc <console>
      }

      // ----------------------------------------------------------------------
      // Send SPI read all command
      // ----------------------------------------------------------------------
      if (UART_rx_buff[0] == 'r')
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <main+0x34c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b72      	cmp	r3, #114	; 0x72
 80011b2:	d168      	bne.n	8001286 <main+0x3f2>
      {
        uint8_t addr;
        char msg[64];

        console("ADC/DAC current regmap:\r\n");
 80011b4:	4820      	ldr	r0, [pc, #128]	; (8001238 <main+0x3a4>)
 80011b6:	f000 fb21 	bl	80017fc <console>
        for(addr = 0x40; addr <= 0x5E; addr++)
 80011ba:	2340      	movs	r3, #64	; 0x40
 80011bc:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
 80011c0:	e05a      	b.n	8001278 <main+0x3e4>
 80011c2:	bf00      	nop
 80011c4:	42dc0000 	.word	0x42dc0000
 80011c8:	43dc4000 	.word	0x43dc4000
 80011cc:	3dcccccd 	.word	0x3dcccccd
 80011d0:	24000490 	.word	0x24000490
 80011d4:	080120a0 	.word	0x080120a0
 80011d8:	080120bc 	.word	0x080120bc
 80011dc:	24000d50 	.word	0x24000d50
 80011e0:	240005a0 	.word	0x240005a0
 80011e4:	24000d9c 	.word	0x24000d9c
 80011e8:	240005ac 	.word	0x240005ac
 80011ec:	24000e2c 	.word	0x24000e2c
 80011f0:	080120d4 	.word	0x080120d4
 80011f4:	080120e4 	.word	0x080120e4
 80011f8:	24000000 	.word	0x24000000
 80011fc:	43800000 	.word	0x43800000
 8001200:	473b8000 	.word	0x473b8000
 8001204:	240009bc 	.word	0x240009bc
 8001208:	240009c0 	.word	0x240009c0
 800120c:	240009b8 	.word	0x240009b8
 8001210:	080120f0 	.word	0x080120f0
 8001214:	58020c00 	.word	0x58020c00
 8001218:	240005aa 	.word	0x240005aa
 800121c:	40e00000 	.word	0x40e00000
 8001220:	080121d8 	.word	0x080121d8
 8001224:	404147ae 	.word	0x404147ae
 8001228:	2400059c 	.word	0x2400059c
 800122c:	58021400 	.word	0x58021400
 8001230:	08012108 	.word	0x08012108
 8001234:	08012124 	.word	0x08012124
 8001238:	08012140 	.word	0x08012140
        { 
          sprintf(msg, "0x%02X: 0x%02X\r\n", addr, pcm3168a_read_reg(addr));
 800123c:	f897 41cb 	ldrb.w	r4, [r7, #459]	; 0x1cb
 8001240:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fce3 	bl	8001c10 <pcm3168a_read_reg>
 800124a:	4603      	mov	r3, r0
 800124c:	4638      	mov	r0, r7
 800124e:	4622      	mov	r2, r4
 8001250:	4993      	ldr	r1, [pc, #588]	; (80014a0 <main+0x60c>)
 8001252:	f010 faab 	bl	80117ac <siprintf>
          HAL_UART_Transmit(&huart4, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001256:	463b      	mov	r3, r7
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f841 	bl	80002e0 <strlen>
 800125e:	4603      	mov	r3, r0
 8001260:	b29a      	uxth	r2, r3
 8001262:	4639      	mov	r1, r7
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	488e      	ldr	r0, [pc, #568]	; (80014a4 <main+0x610>)
 800126a:	f00d fd29 	bl	800ecc0 <HAL_UART_Transmit>
        for(addr = 0x40; addr <= 0x5E; addr++)
 800126e:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 8001272:	3301      	adds	r3, #1
 8001274:	f887 31cb 	strb.w	r3, [r7, #459]	; 0x1cb
 8001278:	f897 31cb 	ldrb.w	r3, [r7, #459]	; 0x1cb
 800127c:	2b5e      	cmp	r3, #94	; 0x5e
 800127e:	d9dd      	bls.n	800123c <main+0x3a8>
        }
        console("Done.\r\n");
 8001280:	4889      	ldr	r0, [pc, #548]	; (80014a8 <main+0x614>)
 8001282:	f000 fabb 	bl	80017fc <console>
      }

      // ----------------------------------------------------------------------
      // Send SPI write command
      // ----------------------------------------------------------------------
      if (UART_rx_buff[0] == 'w')
 8001286:	4b89      	ldr	r3, [pc, #548]	; (80014ac <main+0x618>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b77      	cmp	r3, #119	; 0x77
 800128c:	d136      	bne.n	80012fc <main+0x468>
      {
        uint8_t channel;

        pcm3168a_write_reg(REG_ADDR_DAC_CONTROL_1, 0x87);
 800128e:	2187      	movs	r1, #135	; 0x87
 8001290:	2041      	movs	r0, #65	; 0x41
 8001292:	f000 fcd9 	bl	8001c48 <pcm3168a_write_reg>
        pcm3168a_write_reg(REG_ADDR_ADC_CONTROL_1, 0x07);
 8001296:	2107      	movs	r1, #7
 8001298:	2051      	movs	r0, #81	; 0x51
 800129a:	f000 fcd5 	bl	8001c48 <pcm3168a_write_reg>

        for(channel = 0; channel < 9; channel++) pcm3168a_write_reg(REG_ADDR_DAC_ATTENUATION + channel, atten_reg);
 800129e:	2300      	movs	r3, #0
 80012a0:	f887 31ca 	strb.w	r3, [r7, #458]	; 0x1ca
 80012a4:	e00e      	b.n	80012c4 <main+0x430>
 80012a6:	f897 31ca 	ldrb.w	r3, [r7, #458]	; 0x1ca
 80012aa:	3347      	adds	r3, #71	; 0x47
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f897 21dd 	ldrb.w	r2, [r7, #477]	; 0x1dd
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 fcc7 	bl	8001c48 <pcm3168a_write_reg>
 80012ba:	f897 31ca 	ldrb.w	r3, [r7, #458]	; 0x1ca
 80012be:	3301      	adds	r3, #1
 80012c0:	f887 31ca 	strb.w	r3, [r7, #458]	; 0x1ca
 80012c4:	f897 31ca 	ldrb.w	r3, [r7, #458]	; 0x1ca
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d9ec      	bls.n	80012a6 <main+0x412>
        for(channel = 0; channel < 7; channel++) pcm3168a_write_reg(REG_ADDR_ADC_ATTENUATION + channel, 0xC3);
 80012cc:	2300      	movs	r3, #0
 80012ce:	f887 31ca 	strb.w	r3, [r7, #458]	; 0x1ca
 80012d2:	e00c      	b.n	80012ee <main+0x45a>
 80012d4:	f897 31ca 	ldrb.w	r3, [r7, #458]	; 0x1ca
 80012d8:	3358      	adds	r3, #88	; 0x58
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	21c3      	movs	r1, #195	; 0xc3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fcb2 	bl	8001c48 <pcm3168a_write_reg>
 80012e4:	f897 31ca 	ldrb.w	r3, [r7, #458]	; 0x1ca
 80012e8:	3301      	adds	r3, #1
 80012ea:	f887 31ca 	strb.w	r3, [r7, #458]	; 0x1ca
 80012ee:	f897 31ca 	ldrb.w	r3, [r7, #458]	; 0x1ca
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d9ee      	bls.n	80012d4 <main+0x440>
        console("Done.\r\n");
 80012f6:	486c      	ldr	r0, [pc, #432]	; (80014a8 <main+0x614>)
 80012f8:	f000 fa80 	bl	80017fc <console>
      }

      // ----------------------------------------------------------------------
      // Send a chunk of data
      // ----------------------------------------------------------------------
      if (UART_rx_buff[0] == 's')
 80012fc:	4b6b      	ldr	r3, [pc, #428]	; (80014ac <main+0x618>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b73      	cmp	r3, #115	; 0x73
 8001302:	d115      	bne.n	8001330 <main+0x49c>
      {
        if (DAC_send_enable == 0)
 8001304:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8001308:	2b00      	cmp	r3, #0
 800130a:	d10b      	bne.n	8001324 <main+0x490>
        {
          DAC_send_enable = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	f887 31de 	strb.w	r3, [r7, #478]	; 0x1de
          console("DMA data stream is ON.\r\n");
 8001312:	4867      	ldr	r0, [pc, #412]	; (80014b0 <main+0x61c>)
 8001314:	f000 fa72 	bl	80017fc <console>
          HAL_SAI_Transmit_DMA(&hsai_BlockA1, samples_buff_TX, SAMPLES_BUFF_SIZE_WORDS);
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	4966      	ldr	r1, [pc, #408]	; (80014b4 <main+0x620>)
 800131c:	4866      	ldr	r0, [pc, #408]	; (80014b8 <main+0x624>)
 800131e:	f00a ff3d 	bl	800c19c <HAL_SAI_Transmit_DMA>
 8001322:	e005      	b.n	8001330 <main+0x49c>
        }
        else
        {
          DAC_send_enable = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	f887 31de 	strb.w	r3, [r7, #478]	; 0x1de
          console("DMA data stream is OFF.\r\n");
 800132a:	4864      	ldr	r0, [pc, #400]	; (80014bc <main+0x628>)
 800132c:	f000 fa66 	bl	80017fc <console>
        }
      }

      if (UART_rx_buff[0] == 'a')
 8001330:	4b5e      	ldr	r3, [pc, #376]	; (80014ac <main+0x618>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b61      	cmp	r3, #97	; 0x61
 8001336:	d107      	bne.n	8001348 <main+0x4b4>
      {
        HAL_SAI_Receive_DMA(&hsai_BlockB1, samples_buff_RX, SAMPLES_BUFF_SIZE_WORDS);
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	4961      	ldr	r1, [pc, #388]	; (80014c0 <main+0x62c>)
 800133c:	4861      	ldr	r0, [pc, #388]	; (80014c4 <main+0x630>)
 800133e:	f00a ffe3 	bl	800c308 <HAL_SAI_Receive_DMA>
        console("Got that babe.\r\n");
 8001342:	4861      	ldr	r0, [pc, #388]	; (80014c8 <main+0x634>)
 8001344:	f000 fa5a 	bl	80017fc <console>
      }

      // ----------------------------------------------------------------------
      // Adjust frequency
      // ----------------------------------------------------------------------
      if (UART_rx_buff[0] == '+') f_0 += 10.0f;
 8001348:	4b58      	ldr	r3, [pc, #352]	; (80014ac <main+0x618>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b2b      	cmp	r3, #43	; 0x2b
 800134e:	d107      	bne.n	8001360 <main+0x4cc>
 8001350:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8001354:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001358:	ee77 7a87 	vadd.f32	s15, s15, s14
 800135c:	edc7 7a76 	vstr	s15, [r7, #472]	; 0x1d8
      if (UART_rx_buff[0] == '-') f_0 -= 10.0f;
 8001360:	4b52      	ldr	r3, [pc, #328]	; (80014ac <main+0x618>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b2d      	cmp	r3, #45	; 0x2d
 8001366:	d107      	bne.n	8001378 <main+0x4e4>
 8001368:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 800136c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001370:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001374:	edc7 7a76 	vstr	s15, [r7, #472]	; 0x1d8
      
      // Note trig
      if (UART_rx_buff[0] == 't')
 8001378:	4b4c      	ldr	r3, [pc, #304]	; (80014ac <main+0x618>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b74      	cmp	r3, #116	; 0x74
 800137e:	d107      	bne.n	8001390 <main+0x4fc>
      {
        a = 1.0f;
 8001380:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001384:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
        r_m = 8.0f;
 8001388:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800138c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
      }

      // ----------------------------------------------------------------------
      // Adjust volume
      // ----------------------------------------------------------------------
      if ((UART_rx_buff[0] == 'p') || (UART_rx_buff[0] == 'm'))
 8001390:	4b46      	ldr	r3, [pc, #280]	; (80014ac <main+0x618>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b70      	cmp	r3, #112	; 0x70
 8001396:	d003      	beq.n	80013a0 <main+0x50c>
 8001398:	4b44      	ldr	r3, [pc, #272]	; (80014ac <main+0x618>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b6d      	cmp	r3, #109	; 0x6d
 800139e:	d130      	bne.n	8001402 <main+0x56e>
        uint8_t channel;
        uint8_t real_att;
        char tmp[64];

        // Handle bounds
        if ((UART_rx_buff[0] == 'p') && (atten_reg < 255))
 80013a0:	4b42      	ldr	r3, [pc, #264]	; (80014ac <main+0x618>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b70      	cmp	r3, #112	; 0x70
 80013a6:	d108      	bne.n	80013ba <main+0x526>
 80013a8:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80013ac:	2bff      	cmp	r3, #255	; 0xff
 80013ae:	d004      	beq.n	80013ba <main+0x526>
          atten_reg++;
 80013b0:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80013b4:	3301      	adds	r3, #1
 80013b6:	f887 31dd 	strb.w	r3, [r7, #477]	; 0x1dd

        if ((UART_rx_buff[0] == 'm') && (atten_reg > 0))
 80013ba:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <main+0x618>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b6d      	cmp	r3, #109	; 0x6d
 80013c0:	d108      	bne.n	80013d4 <main+0x540>
 80013c2:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <main+0x540>
          atten_reg--;
 80013ca:	f897 31dd 	ldrb.w	r3, [r7, #477]	; 0x1dd
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f887 31dd 	strb.w	r3, [r7, #477]	; 0x1dd
        //   sprintf(tmp, "Output attenuation = -%u.0 dB\r\n", real_att);
        // }

        //HAL_UART_Transmit(&huart4, (uint8_t *)tmp, strlen(tmp), HAL_MAX_DELAY);
        
        for(channel = 0; channel < 9; channel++) pcm3168a_write_reg(REG_ADDR_DAC_ATTENUATION + channel, atten_reg);
 80013d4:	2300      	movs	r3, #0
 80013d6:	f887 31c9 	strb.w	r3, [r7, #457]	; 0x1c9
 80013da:	e00e      	b.n	80013fa <main+0x566>
 80013dc:	f897 31c9 	ldrb.w	r3, [r7, #457]	; 0x1c9
 80013e0:	3347      	adds	r3, #71	; 0x47
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	f897 21dd 	ldrb.w	r2, [r7, #477]	; 0x1dd
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 fc2c 	bl	8001c48 <pcm3168a_write_reg>
 80013f0:	f897 31c9 	ldrb.w	r3, [r7, #457]	; 0x1c9
 80013f4:	3301      	adds	r3, #1
 80013f6:	f887 31c9 	strb.w	r3, [r7, #457]	; 0x1c9
 80013fa:	f897 31c9 	ldrb.w	r3, [r7, #457]	; 0x1c9
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d9ec      	bls.n	80013dc <main+0x548>
    }

    // ------------------------------------------------------------------------
    // Audio stream management
    // ------------------------------------------------------------------------
    if ((DAC_send_enable == 1) && (SAI_transmit_done == 1))
 8001402:	f897 31de 	ldrb.w	r3, [r7, #478]	; 0x1de
 8001406:	2b01      	cmp	r3, #1
 8001408:	f47f ae28 	bne.w	800105c <main+0x1c8>
 800140c:	4b2f      	ldr	r3, [pc, #188]	; (80014cc <main+0x638>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b01      	cmp	r3, #1
 8001414:	f47f ae22 	bne.w	800105c <main+0x1c8>
    {
      uint16_t k = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	f8a7 31c6 	strh.w	r3, [r7, #454]	; 0x1c6
      int32_t output;
      
      SAI_transmit_done = 0;
 800141e:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <main+0x638>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
      
      // Visual feedback: start buffering
      //HAL_GPIO_WritePin(user_LED_right_GPIO_Port, user_LED_right_Pin, GPIO_PIN_SET);
      
      // Fill in the next buffer
      for(k = 0; k < (SAMPLES_BUFF_SIZE_BYTES/2); k += 8)
 8001424:	2300      	movs	r3, #0
 8001426:	f8a7 31c6 	strh.w	r3, [r7, #454]	; 0x1c6
 800142a:	e0d0      	b.n	80015ce <main+0x73a>
      {
        output = (int32_t)(a*(0.2f*osc_0.output + 0.2f*osc_2.output + 0.2f*osc_3.output)*(8388607.0f));
 800142c:	edd7 7a6f 	vldr	s15, [r7, #444]	; 0x1bc
 8001430:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80014d0 <main+0x63c>
 8001434:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001438:	edd7 7a65 	vldr	s15, [r7, #404]	; 0x194
 800143c:	eddf 6a24 	vldr	s13, [pc, #144]	; 80014d0 <main+0x63c>
 8001440:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001444:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001448:	edd7 7a60 	vldr	s15, [r7, #384]	; 0x180
 800144c:	eddf 6a20 	vldr	s13, [pc, #128]	; 80014d0 <main+0x63c>
 8001450:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001458:	edd7 7a73 	vldr	s15, [r7, #460]	; 0x1cc
 800145c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001460:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80014d4 <main+0x640>
 8001464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146c:	ee17 3a90 	vmov	r3, s15
 8001470:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

        // Fill buffer
        if (available_buff == 0)
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <main+0x644>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d12e      	bne.n	80014dc <main+0x648>
        {
          *((int32_t*)(samples_buff_TX + k + 0)) = output; // left channel
 800147e:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	; 0x1c6
 8001482:	4a0c      	ldr	r2, [pc, #48]	; (80014b4 <main+0x620>)
 8001484:	4413      	add	r3, r2
 8001486:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800148a:	601a      	str	r2, [r3, #0]
          *((int32_t*)(samples_buff_TX + k + 4)) = output; // right channel
 800148c:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	; 0x1c6
 8001490:	3304      	adds	r3, #4
 8001492:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <main+0x620>)
 8001494:	4413      	add	r3, r2
 8001496:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e030      	b.n	8001500 <main+0x66c>
 800149e:	bf00      	nop
 80014a0:	0801215c 	.word	0x0801215c
 80014a4:	24000d9c 	.word	0x24000d9c
 80014a8:	08012170 	.word	0x08012170
 80014ac:	240005a0 	.word	0x240005a0
 80014b0:	08012178 	.word	0x08012178
 80014b4:	240005b8 	.word	0x240005b8
 80014b8:	24000a18 	.word	0x24000a18
 80014bc:	08012194 	.word	0x08012194
 80014c0:	240007b8 	.word	0x240007b8
 80014c4:	24000ab0 	.word	0x24000ab0
 80014c8:	080121b0 	.word	0x080121b0
 80014cc:	240005b6 	.word	0x240005b6
 80014d0:	3e4ccccd 	.word	0x3e4ccccd
 80014d4:	4afffffe 	.word	0x4afffffe
 80014d8:	240005b7 	.word	0x240005b7
        }
        else
        {
          *((int32_t*)(samples_buff_TX + k + 0 + (SAMPLES_BUFF_SIZE_BYTES/2))) = output;
 80014dc:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	; 0x1c6
 80014e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80014e4:	4a3d      	ldr	r2, [pc, #244]	; (80015dc <main+0x748>)
 80014e6:	4413      	add	r3, r2
 80014e8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80014ec:	601a      	str	r2, [r3, #0]
          *((int32_t*)(samples_buff_TX + k + 4 + (SAMPLES_BUFF_SIZE_BYTES/2))) = output;
 80014ee:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	; 0x1c6
 80014f2:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80014f6:	4a39      	ldr	r2, [pc, #228]	; (80015dc <main+0x748>)
 80014f8:	4413      	add	r3, r2
 80014fa:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80014fe:	601a      	str	r2, [r3, #0]
        // % Update  
        // osc_0.step(LUT_size*m(k)/f_s);
        // osc_1.step(LUT_size*f_m/f_s);

        // OSC1 => OSC0
        osc_1.phase_inc = f_1*(0.0053333333333f);
 8001500:	edd7 7a75 	vldr	s15, [r7, #468]	; 0x1d4
 8001504:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80015e0 <main+0x74c>
 8001508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150c:	edc7 7a69 	vstr	s15, [r7, #420]	; 0x1a4
        osc_0.phase_inc = f_0*(1.0f + (r_m*osc_1.output))*(0.0053333333333f);
 8001510:	ed97 7a6a 	vldr	s14, [r7, #424]	; 0x1a8
 8001514:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001520:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001524:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8001528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800152c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80015e0 <main+0x74c>
 8001530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001534:	edc7 7a6e 	vstr	s15, [r7, #440]	; 0x1b8
        
        osc_2.phase_inc = 0.5f*f_0*(0.0053333333333f);
 8001538:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 800153c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001544:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80015e0 <main+0x74c>
 8001548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154c:	edc7 7a64 	vstr	s15, [r7, #400]	; 0x190
        osc_3.phase_inc = 2.02f*f_0*(0.0053333333333f);
 8001550:	edd7 7a76 	vldr	s15, [r7, #472]	; 0x1d8
 8001554:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80015e4 <main+0x750>
 8001558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80015e0 <main+0x74c>
 8001560:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001564:	edc7 7a5f 	vstr	s15, [r7, #380]	; 0x17c

        osc_step(&osc_0);
 8001568:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800156c:	4618      	mov	r0, r3
 800156e:	f000 fb85 	bl	8001c7c <osc_step>
        osc_step(&osc_1);
 8001572:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fb80 	bl	8001c7c <osc_step>
        osc_step(&osc_2);
 800157c:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8001580:	4618      	mov	r0, r3
 8001582:	f000 fb7b 	bl	8001c7c <osc_step>
        osc_step(&osc_3);
 8001586:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fb76 	bl	8001c7c <osc_step>

        adsr_step(&adsr_vca);
 8001590:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001594:	4618      	mov	r0, r3
 8001596:	f000 fc21 	bl	8001ddc <adsr_step>
        adsr_step(&adsr_fm);
 800159a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fc1c 	bl	8001ddc <adsr_step>
        r_m *= 0.9999f;
 80015a4:	edd7 7a74 	vldr	s15, [r7, #464]	; 0x1d0
 80015a8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80015e8 <main+0x754>
 80015ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b0:	edc7 7a74 	vstr	s15, [r7, #464]	; 0x1d0
        a *= 0.9999f;
 80015b4:	edd7 7a73 	vldr	s15, [r7, #460]	; 0x1cc
 80015b8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80015e8 <main+0x754>
 80015bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015c0:	edc7 7a73 	vstr	s15, [r7, #460]	; 0x1cc
      for(k = 0; k < (SAMPLES_BUFF_SIZE_BYTES/2); k += 8)
 80015c4:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	; 0x1c6
 80015c8:	3308      	adds	r3, #8
 80015ca:	f8a7 31c6 	strh.w	r3, [r7, #454]	; 0x1c6
 80015ce:	f8b7 31c6 	ldrh.w	r3, [r7, #454]	; 0x1c6
 80015d2:	2bff      	cmp	r3, #255	; 0xff
 80015d4:	f67f af2a 	bls.w	800142c <main+0x598>
    if (ADC_msg_unread == 1U)
 80015d8:	e540      	b.n	800105c <main+0x1c8>
 80015da:	bf00      	nop
 80015dc:	240005b8 	.word	0x240005b8
 80015e0:	3baec33e 	.word	0x3baec33e
 80015e4:	400147ae 	.word	0x400147ae
 80015e8:	3f7ff972 	.word	0x3f7ff972

080015ec <SystemClock_Config>:
// ----------------------------------------------------------------------------
// @brief System Clock Configuration
// @retval None
// ----------------------------------------------------------------------------
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b09c      	sub	sp, #112	; 0x70
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	224c      	movs	r2, #76	; 0x4c
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f010 f8ce 	bl	801179c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	2220      	movs	r2, #32
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f010 f8c8 	bl	801179c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800160c:	2002      	movs	r0, #2
 800160e:	f007 f8a9 	bl	8008764 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <SystemClock_Config+0xfc>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	4a33      	ldr	r2, [pc, #204]	; (80016e8 <SystemClock_Config+0xfc>)
 800161c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001620:	6193      	str	r3, [r2, #24]
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <SystemClock_Config+0xfc>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <SystemClock_Config+0x100>)
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	4a2e      	ldr	r2, [pc, #184]	; (80016ec <SystemClock_Config+0x100>)
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001638:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <SystemClock_Config+0x100>)
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	f003 0301 	and.w	r3, r3, #1
 8001640:	603b      	str	r3, [r7, #0]
 8001642:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001644:	bf00      	nop
 8001646:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <SystemClock_Config+0xfc>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800164e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001652:	d1f8      	bne.n	8001646 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001654:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <SystemClock_Config+0x104>)
 8001656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001658:	f023 0303 	bic.w	r3, r3, #3
 800165c:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <SystemClock_Config+0x104>)
 800165e:	f043 0302 	orr.w	r3, r3, #2
 8001662:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType  = RCC_OSCILLATORTYPE_HSE;
 8001664:	2301      	movs	r3, #1
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState        = RCC_HSE_ON;
 8001668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState    = RCC_PLL_ON;
 800166e:	2302      	movs	r3, #2
 8001670:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource   = RCC_PLLSOURCE_HSE;
 8001672:	2302      	movs	r3, #2
 8001674:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM        = 5;
 8001676:	2305      	movs	r3, #5
 8001678:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN        = 192;
 800167a:	23c0      	movs	r3, #192	; 0xc0
 800167c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP        = 2;
 800167e:	2302      	movs	r3, #2
 8001680:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ        = 2;
 8001682:	2302      	movs	r3, #2
 8001684:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR        = 2;
 8001686:	2302      	movs	r3, #2
 8001688:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE      = RCC_PLL1VCIRANGE_2;
 800168a:	2308      	movs	r3, #8
 800168c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL   = RCC_PLL1VCOWIDE;
 800168e:	2300      	movs	r3, #0
 8001690:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN    = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169a:	4618      	mov	r0, r3
 800169c:	f007 f966 	bl	800896c <HAL_RCC_OscConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80016a6:	f000 f871 	bl	800178c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016aa:	233f      	movs	r3, #63	; 0x3f
 80016ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource    = RCC_SYSCLKSOURCE_PLLCLK;
 80016ae:	2303      	movs	r3, #3
 80016b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider   = RCC_SYSCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider   = RCC_HCLK_DIV2;
 80016b6:	2308      	movs	r3, #8
 80016b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider  = RCC_APB3_DIV2;
 80016ba:	2340      	movs	r3, #64	; 0x40
 80016bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider  = RCC_APB1_DIV2;
 80016be:	2340      	movs	r3, #64	; 0x40
 80016c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider  = RCC_APB2_DIV2;
 80016c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider  = RCC_APB4_DIV2;
 80016c8:	2340      	movs	r3, #64	; 0x40
 80016ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2104      	movs	r1, #4
 80016d0:	4618      	mov	r0, r3
 80016d2:	f007 fd79 	bl	80091c8 <HAL_RCC_ClockConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80016dc:	f000 f856 	bl	800178c <Error_Handler>
  }
}
 80016e0:	bf00      	nop
 80016e2:	3770      	adds	r7, #112	; 0x70
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	58024800 	.word	0x58024800
 80016ec:	58000400 	.word	0x58000400
 80016f0:	58024400 	.word	0x58024400

080016f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b0b0      	sub	sp, #192	; 0xc0
 80016f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	22bc      	movs	r2, #188	; 0xbc
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f010 f84b 	bl	801179c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <PeriphCommonClock_Config+0x94>)
 8001708:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SPI4|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_LTDC;
  PeriphClkInitStruct.PLL2.PLL2M = 12;
 800170a:	230c      	movs	r3, #12
 800170c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 118;
 800170e:	2376      	movs	r3, #118	; 0x76
 8001710:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001712:	2302      	movs	r3, #2
 8001714:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 128;
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 128;
 800171a:	2380      	movs	r3, #128	; 0x80
 800171c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800171e:	2340      	movs	r3, #64	; 0x40
 8001720:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 25;
 800172a:	2319      	movs	r3, #25
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 192;
 800172e:	23c0      	movs	r3, #192	; 0xc0
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 4;
 8001732:	2304      	movs	r3, #4
 8001734:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001736:	2304      	movs	r3, #4
 8001738:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 4;
 800173a:	2304      	movs	r3, #4
 800173c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800173e:	2300      	movs	r3, #0
 8001740:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001742:	2300      	movs	r3, #0
 8001744:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800174a:	2301      	movs	r3, #1
 800174c:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800174e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001752:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL3;
 8001754:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001758:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL3;
 800175a:	2302      	movs	r3, #2
 800175c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800175e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001762:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8001766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800176a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	4618      	mov	r0, r3
 8001772:	f008 f8b5 	bl	80098e0 <HAL_RCCEx_PeriphCLKConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <PeriphCommonClock_Config+0x8c>
  {
    Error_Handler();
 800177c:	f000 f806 	bl	800178c <Error_Handler>
  }
}
 8001780:	bf00      	nop
 8001782:	37c0      	adds	r7, #192	; 0xc0
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200c3102 	.word	0x200c3102

0800178c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001790:	b672      	cpsid	i
}
 8001792:	bf00      	nop
  // USER CODE BEGIN Error_Handler_Debug
  // User can add his own implementation to report the HAL error return state.
  __disable_irq();
  while (1)
  {
    console("Shit happened.\r\n");
 8001794:	4801      	ldr	r0, [pc, #4]	; (800179c <Error_Handler+0x10>)
 8001796:	f000 f831 	bl	80017fc <console>
 800179a:	e7fb      	b.n	8001794 <Error_Handler+0x8>
 800179c:	080121c4 	.word	0x080121c4

080017a0 <HAL_UART_RxCpltCallback>:
// Function HAL_UART_RxCpltCallback()
// @brief  TODO
// @retval None.
// ----------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if (huart == &huart4)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_UART_RxCpltCallback+0x44>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d108      	bne.n	80017c2 <HAL_UART_RxCpltCallback+0x22>
  {
    UART_unread = 1U;
 80017b0:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <HAL_UART_RxCpltCallback+0x48>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart4, UART_rx_buff, 1);  // dont ask me why it has to be done here.
 80017b6:	2201      	movs	r2, #1
 80017b8:	490c      	ldr	r1, [pc, #48]	; (80017ec <HAL_UART_RxCpltCallback+0x4c>)
 80017ba:	480a      	ldr	r0, [pc, #40]	; (80017e4 <HAL_UART_RxCpltCallback+0x44>)
 80017bc:	f00d fb16 	bl	800edec <HAL_UART_Receive_IT>
  {
    MIDI_unread = 1U;
    HAL_UART_Receive_IT(&huart5, MIDI_rx_buff, 1);
  }

}
 80017c0:	e00b      	b.n	80017da <HAL_UART_RxCpltCallback+0x3a>
  else if (huart == &huart5)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <HAL_UART_RxCpltCallback+0x50>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d107      	bne.n	80017da <HAL_UART_RxCpltCallback+0x3a>
    MIDI_unread = 1U;
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_UART_RxCpltCallback+0x54>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart5, MIDI_rx_buff, 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	4909      	ldr	r1, [pc, #36]	; (80017f8 <HAL_UART_RxCpltCallback+0x58>)
 80017d4:	4806      	ldr	r0, [pc, #24]	; (80017f0 <HAL_UART_RxCpltCallback+0x50>)
 80017d6:	f00d fb09 	bl	800edec <HAL_UART_Receive_IT>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	24000d9c 	.word	0x24000d9c
 80017e8:	2400059c 	.word	0x2400059c
 80017ec:	240005a0 	.word	0x240005a0
 80017f0:	24000e2c 	.word	0x24000e2c
 80017f4:	240005aa 	.word	0x240005aa
 80017f8:	240005ac 	.word	0x240005ac

080017fc <console>:
// Function console()
// @brief  TODO
// @retval None.
// ----------------------------------------------------------------------------
void console(const char *msg)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b092      	sub	sp, #72	; 0x48
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  char tmp[64];
  sprintf(tmp, msg);
 8001804:	f107 0308 	add.w	r3, r7, #8
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4618      	mov	r0, r3
 800180c:	f00f ffce 	bl	80117ac <siprintf>
  HAL_UART_Transmit(&huart4, (uint8_t *)tmp, strlen(tmp), HAL_MAX_DELAY);
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fd63 	bl	80002e0 <strlen>
 800181a:	4603      	mov	r3, r0
 800181c:	b29a      	uxth	r2, r3
 800181e:	f107 0108 	add.w	r1, r7, #8
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	4803      	ldr	r0, [pc, #12]	; (8001834 <console+0x38>)
 8001828:	f00d fa4a 	bl	800ecc0 <HAL_UART_Transmit>
}
 800182c:	bf00      	nop
 800182e:	3748      	adds	r7, #72	; 0x48
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	24000d9c 	.word	0x24000d9c

08001838 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if (htim == &htim2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d103      	bne.n	8001850 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
    HAL_GPIO_TogglePin(user_LED_right_GPIO_Port, user_LED_right_Pin);
 8001848:	2101      	movs	r1, #1
 800184a:	4804      	ldr	r0, [pc, #16]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800184c:	f006 fc65 	bl	800811a <HAL_GPIO_TogglePin>
  }
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	24000d50 	.word	0x24000d50
 800185c:	58021400 	.word	0x58021400

08001860 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 8001868:	4806      	ldr	r0, [pc, #24]	; (8001884 <HAL_ADC_ConvCpltCallback+0x24>)
 800186a:	f002 facd 	bl	8003e08 <HAL_ADC_GetValue>
 800186e:	4603      	mov	r3, r0
 8001870:	4a05      	ldr	r2, [pc, #20]	; (8001888 <HAL_ADC_ConvCpltCallback+0x28>)
 8001872:	6013      	str	r3, [r2, #0]
  ADC_msg_unread = 1U;
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_ADC_ConvCpltCallback+0x2c>)
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	24000490 	.word	0x24000490
 8001888:	240009b8 	.word	0x240009b8
 800188c:	240009bc 	.word	0x240009bc

08001890 <midi_init>:
// ----------------------------------------------------------------------------
// midi_init() function
// ----------------------------------------------------------------------------
// Initialise the MIDI object with default values.
void midi_init(midi* midi_obj)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint8_t i;
  
  for(i = 0; i < MIDI_MAX_POLY; i++) midi_obj->notes_on[i] = MIDI_CODE_NOTE_OFF;
 8001898:	2300      	movs	r3, #0
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e006      	b.n	80018ac <midi_init+0x1c>
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	2180      	movs	r1, #128	; 0x80
 80018a4:	54d1      	strb	r1, [r2, r3]
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	3301      	adds	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	2b09      	cmp	r3, #9
 80018b0:	d9f5      	bls.n	800189e <midi_init+0xe>
  midi_obj->note_event_count = 0U;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	729a      	strb	r2, [r3, #10]
  midi_obj->interface_status = MIDI_BUFFER_OK;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	72da      	strb	r2, [r3, #11]
  for(i = 0; i < 128; i++) midi_obj->ctrl_values[i] = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	e007      	b.n	80018d4 <midi_init+0x44>
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	2200      	movs	r2, #0
 80018cc:	731a      	strb	r2, [r3, #12]
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	3301      	adds	r3, #1
 80018d2:	73fb      	strb	r3, [r7, #15]
 80018d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	daf3      	bge.n	80018c4 <midi_init+0x34>
  midi_obj->pitch_bend = MIDI_PITCH_BEND_DEFAULT;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	227f      	movs	r2, #127	; 0x7f
 80018e0:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
  
  midi_obj->midi_state = MIDI_STATE_IDLE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  midi_obj->note_event_ptr_r = 0U;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
  midi_obj->note_event_ptr_w = 0U;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
}
 80018fc:	bf00      	nop
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <midi_update>:
// Analyses the incoming MIDI messages and update the internal state variables
// accordingly:
// - store the note events in a FIFO
// - store the controllers values
void midi_update(uint8_t message, midi* midi_obj)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  static uint8_t data_count;
  static midi_note_event tmp_event;
  uint8_t ctrl_index;

  switch(midi_obj->midi_state)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800191a:	2b06      	cmp	r3, #6
 800191c:	f200 80d9 	bhi.w	8001ad2 <midi_update+0x1ca>
 8001920:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <midi_update+0x20>)
 8001922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001926:	bf00      	nop
 8001928:	08001945 	.word	0x08001945
 800192c:	08001a05 	.word	0x08001a05
 8001930:	080019c3 	.word	0x080019c3
 8001934:	08001a47 	.word	0x08001a47
 8001938:	08001a75 	.word	0x08001a75
 800193c:	08001a7f 	.word	0x08001a7f
 8001940:	08001ac9 	.word	0x08001ac9
    // ------------------------------------------------------------------------
    // MIDI idle state 
    // ------------------------------------------------------------------------
    case MIDI_STATE_IDLE :
      // Init
      data_count = 0;
 8001944:	4b65      	ldr	r3, [pc, #404]	; (8001adc <midi_update+0x1d4>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
      tmp_event = MIDI_NOTE_EVENT_EMPTY;
 800194a:	4b65      	ldr	r3, [pc, #404]	; (8001ae0 <midi_update+0x1d8>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	4b63      	ldr	r3, [pc, #396]	; (8001ae0 <midi_update+0x1d8>)
 8001952:	22ff      	movs	r2, #255	; 0xff
 8001954:	705a      	strb	r2, [r3, #1]
 8001956:	4b62      	ldr	r3, [pc, #392]	; (8001ae0 <midi_update+0x1d8>)
 8001958:	2200      	movs	r2, #0
 800195a:	709a      	strb	r2, [r3, #2]
      
      switch(message & 0xF0)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001962:	2be0      	cmp	r3, #224	; 0xe0
 8001964:	d022      	beq.n	80019ac <midi_update+0xa4>
 8001966:	2be0      	cmp	r3, #224	; 0xe0
 8001968:	dc25      	bgt.n	80019b6 <midi_update+0xae>
 800196a:	2bc0      	cmp	r3, #192	; 0xc0
 800196c:	d019      	beq.n	80019a2 <midi_update+0x9a>
 800196e:	2bc0      	cmp	r3, #192	; 0xc0
 8001970:	dc21      	bgt.n	80019b6 <midi_update+0xae>
 8001972:	2bb0      	cmp	r3, #176	; 0xb0
 8001974:	d010      	beq.n	8001998 <midi_update+0x90>
 8001976:	2bb0      	cmp	r3, #176	; 0xb0
 8001978:	dc1d      	bgt.n	80019b6 <midi_update+0xae>
 800197a:	2b80      	cmp	r3, #128	; 0x80
 800197c:	d002      	beq.n	8001984 <midi_update+0x7c>
 800197e:	2b90      	cmp	r3, #144	; 0x90
 8001980:	d005      	beq.n	800198e <midi_update+0x86>
 8001982:	e018      	b.n	80019b6 <midi_update+0xae>
      {
        // Switch depending on the command
        case MIDI_CODE_NOTE_OFF :
          midi_obj->midi_state = MIDI_STATE_NOTE_OFF;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
          break;
 800198c:	e018      	b.n	80019c0 <midi_update+0xb8>

        case MIDI_CODE_NOTE_ON :
          midi_obj->midi_state = MIDI_STATE_NOTE_ON;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
          break;
 8001996:	e013      	b.n	80019c0 <midi_update+0xb8>
      
        case MIDI_CODE_CONTROL_CHANGE :
          midi_obj->midi_state = MIDI_STATE_CONTROL_CHANGE;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2203      	movs	r2, #3
 800199c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
          break;
 80019a0:	e00e      	b.n	80019c0 <midi_update+0xb8>

        case MIDI_CODE_PROGRAM_CHANGE :
          // No handled yet!
          midi_obj->midi_state = MIDI_STATE_IDLE;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
          break;
 80019aa:	e009      	b.n	80019c0 <midi_update+0xb8>
      
        case MIDI_CODE_PITCH_BEND :
          midi_obj->midi_state = MIDI_STATE_PITCH_BEND;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2205      	movs	r2, #5
 80019b0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
          break;
 80019b4:	e004      	b.n	80019c0 <midi_update+0xb8>

        default : 
          // Other commands are not supported
          midi_obj->midi_state = MIDI_STATE_IDLE;   
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      }
      break;
 80019be:	e088      	b.n	8001ad2 <midi_update+0x1ca>
 80019c0:	e087      	b.n	8001ad2 <midi_update+0x1ca>

    // ------------------------------------------------------------------------
    // MIDI note OFF state 
    // ------------------------------------------------------------------------
    case MIDI_STATE_NOTE_OFF :
      if (data_count == 0U)
 80019c2:	4b46      	ldr	r3, [pc, #280]	; (8001adc <midi_update+0x1d4>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10c      	bne.n	80019e4 <midi_update+0xdc>
      {
        tmp_event.event = MIDI_EVENT_NOTE_OFF;
 80019ca:	4b45      	ldr	r3, [pc, #276]	; (8001ae0 <midi_update+0x1d8>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	705a      	strb	r2, [r3, #1]
        tmp_event.index = message;
 80019d0:	4a43      	ldr	r2, [pc, #268]	; (8001ae0 <midi_update+0x1d8>)
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	7013      	strb	r3, [r2, #0]
        data_count++;
 80019d6:	4b41      	ldr	r3, [pc, #260]	; (8001adc <midi_update+0x1d4>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	b2da      	uxtb	r2, r3
 80019de:	4b3f      	ldr	r3, [pc, #252]	; (8001adc <midi_update+0x1d4>)
 80019e0:	701a      	strb	r2, [r3, #0]
        tmp_event.velocity = message;
        midi_note_push(tmp_event, midi_obj);
        data_count = 0U;
        midi_obj->midi_state = MIDI_STATE_IDLE;
      }
      break;
 80019e2:	e076      	b.n	8001ad2 <midi_update+0x1ca>
        tmp_event.velocity = message;
 80019e4:	4a3e      	ldr	r2, [pc, #248]	; (8001ae0 <midi_update+0x1d8>)
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	7093      	strb	r3, [r2, #2]
        midi_note_push(tmp_event, midi_obj);
 80019ea:	4b3d      	ldr	r3, [pc, #244]	; (8001ae0 <midi_update+0x1d8>)
 80019ec:	6839      	ldr	r1, [r7, #0]
 80019ee:	6818      	ldr	r0, [r3, #0]
 80019f0:	f000 f878 	bl	8001ae4 <midi_note_push>
        data_count = 0U;
 80019f4:	4b39      	ldr	r3, [pc, #228]	; (8001adc <midi_update+0x1d4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
        midi_obj->midi_state = MIDI_STATE_IDLE;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      break;
 8001a02:	e066      	b.n	8001ad2 <midi_update+0x1ca>

    // ------------------------------------------------------------------------
    // MIDI note ON state 
    // ------------------------------------------------------------------------
    case MIDI_STATE_NOTE_ON :
      if (data_count == 0U)
 8001a04:	4b35      	ldr	r3, [pc, #212]	; (8001adc <midi_update+0x1d4>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10c      	bne.n	8001a26 <midi_update+0x11e>
      {
        tmp_event.event = MIDI_EVENT_NOTE_ON;
 8001a0c:	4b34      	ldr	r3, [pc, #208]	; (8001ae0 <midi_update+0x1d8>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	705a      	strb	r2, [r3, #1]
        tmp_event.index = message;
 8001a12:	4a33      	ldr	r2, [pc, #204]	; (8001ae0 <midi_update+0x1d8>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	7013      	strb	r3, [r2, #0]
        data_count++;
 8001a18:	4b30      	ldr	r3, [pc, #192]	; (8001adc <midi_update+0x1d4>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <midi_update+0x1d4>)
 8001a22:	701a      	strb	r2, [r3, #0]
        tmp_event.velocity = message;
        midi_note_push(tmp_event, midi_obj);
        data_count = 0U;
        midi_obj->midi_state = MIDI_STATE_IDLE;
      }
      break;
 8001a24:	e055      	b.n	8001ad2 <midi_update+0x1ca>
        tmp_event.velocity = message;
 8001a26:	4a2e      	ldr	r2, [pc, #184]	; (8001ae0 <midi_update+0x1d8>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	7093      	strb	r3, [r2, #2]
        midi_note_push(tmp_event, midi_obj);
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <midi_update+0x1d8>)
 8001a2e:	6839      	ldr	r1, [r7, #0]
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	f000 f857 	bl	8001ae4 <midi_note_push>
        data_count = 0U;
 8001a36:	4b29      	ldr	r3, [pc, #164]	; (8001adc <midi_update+0x1d4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
        midi_obj->midi_state = MIDI_STATE_IDLE;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      break;
 8001a44:	e045      	b.n	8001ad2 <midi_update+0x1ca>

    // ------------------------------------------------------------------------
    // MIDI control change state 
    // ------------------------------------------------------------------------
    case MIDI_STATE_CONTROL_CHANGE :
      if (data_count == 0U)
 8001a46:	4b25      	ldr	r3, [pc, #148]	; (8001adc <midi_update+0x1d4>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d108      	bne.n	8001a60 <midi_update+0x158>
      {
        ctrl_index = message;
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	73fb      	strb	r3, [r7, #15]
        data_count++;
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <midi_update+0x1d4>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	3301      	adds	r3, #1
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4b20      	ldr	r3, [pc, #128]	; (8001adc <midi_update+0x1d4>)
 8001a5c:	701a      	strb	r2, [r3, #0]
      else
      {
        midi_obj->ctrl_values[ctrl_index] = message;
        midi_obj->midi_state = MIDI_STATE_IDLE;
      }
      break;
 8001a5e:	e038      	b.n	8001ad2 <midi_update+0x1ca>
        midi_obj->ctrl_values[ctrl_index] = message;
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	4413      	add	r3, r2
 8001a66:	79fa      	ldrb	r2, [r7, #7]
 8001a68:	731a      	strb	r2, [r3, #12]
        midi_obj->midi_state = MIDI_STATE_IDLE;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      break;
 8001a72:	e02e      	b.n	8001ad2 <midi_update+0x1ca>
    // ------------------------------------------------------------------------
    // MIDI program change state 
    // ------------------------------------------------------------------------
    case MIDI_STATE_PROGRAM_CHANGE :
      // No handled yet!
      midi_obj->midi_state = MIDI_STATE_IDLE;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      break;
 8001a7c:	e029      	b.n	8001ad2 <midi_update+0x1ca>

    // ------------------------------------------------------------------------
    // MIDI pitch bend state 
    // ------------------------------------------------------------------------
    case MIDI_STATE_PITCH_BEND :
      if (data_count == 0U)
 8001a7e:	4b17      	ldr	r3, [pc, #92]	; (8001adc <midi_update+0x1d4>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d111      	bne.n	8001aaa <midi_update+0x1a2>
      {
        midi_obj->pitch_bend = 0;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
        midi_obj->pitch_bend = message << 8;
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
        data_count++;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <midi_update+0x1d4>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <midi_update+0x1d4>)
 8001aa6:	701a      	strb	r2, [r3, #0]
      else
      {
        midi_obj->pitch_bend |= message;
        midi_obj->midi_state = MIDI_STATE_IDLE;
      }
      break;
 8001aa8:	e013      	b.n	8001ad2 <midi_update+0x1ca>
        midi_obj->pitch_bend |= message;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f8b3 208c 	ldrh.w	r2, [r3, #140]	; 0x8c
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
        midi_obj->midi_state = MIDI_STATE_IDLE;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      break;
 8001ac6:	e004      	b.n	8001ad2 <midi_update+0x1ca>
    // ------------------------------------------------------------------------
    // Unsupported MIDI command
    // ------------------------------------------------------------------------
    case MIDI_STATE_UNSUPPORTED :
      // No handled yet!
      midi_obj->midi_state = MIDI_STATE_IDLE;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
      break;
 8001ad0:	bf00      	nop
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	240009c4 	.word	0x240009c4
 8001ae0:	240009c8 	.word	0x240009c8

08001ae4 <midi_note_push>:

// ----------------------------------------------------------------------------
// midi_push() function
// ----------------------------------------------------------------------------
void midi_note_push(midi_note_event note, midi* midi_obj)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  // Write pointer is not reaching the end of the FIFO
  if ((midi_obj->note_event_count) < MIDI_EVENT_FIFO_SIZE)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	7a9b      	ldrb	r3, [r3, #10]
 8001af2:	2b13      	cmp	r3, #19
 8001af4:	d82b      	bhi.n	8001b4e <midi_note_push+0x6a>
  {
    midi_obj->note_event_fifo[midi_obj->note_event_ptr_w] = note;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001afc:	4619      	mov	r1, r3
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	460b      	mov	r3, r1
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	440b      	add	r3, r1
 8001b06:	4413      	add	r3, r2
 8001b08:	3390      	adds	r3, #144	; 0x90
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	8819      	ldrh	r1, [r3, #0]
 8001b10:	789b      	ldrb	r3, [r3, #2]
 8001b12:	8011      	strh	r1, [r2, #0]
 8001b14:	7093      	strb	r3, [r2, #2]
    midi_obj->note_event_count++;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	7a9b      	ldrb	r3, [r3, #10]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	729a      	strb	r2, [r3, #10]

    // Wrap pointer if reaching the FIFO end
    if ((midi_obj->note_event_ptr_w) == (MIDI_EVENT_FIFO_SIZE-1))
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001b28:	2b13      	cmp	r3, #19
 8001b2a:	d104      	bne.n	8001b36 <midi_note_push+0x52>
    {
      midi_obj->note_event_ptr_w = 0U;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
 8001b34:	e007      	b.n	8001b46 <midi_note_push+0x62>
    }
    else
    {
      midi_obj->note_event_ptr_w++;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    }
    midi_obj->interface_status = MIDI_BUFFER_OK;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	72da      	strb	r2, [r3, #11]
  }
  else
  {
    midi_obj->interface_status = MIDI_BUFFER_OVERFLOW;
  }
}
 8001b4c:	e002      	b.n	8001b54 <midi_note_push+0x70>
    midi_obj->interface_status = MIDI_BUFFER_OVERFLOW;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2201      	movs	r2, #1
 8001b52:	72da      	strb	r2, [r3, #11]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <midi_note_pop>:

// ----------------------------------------------------------------------------
// midi_pop() function
// ----------------------------------------------------------------------------
midi_note_event midi_note_pop(midi* midi_obj)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((midi_obj->note_event_count) > 0)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7a9b      	ldrb	r3, [r3, #10]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d036      	beq.n	8001bde <midi_note_pop+0x7e>
  {
    midi_note_event note_event;
    note_event = midi_obj->note_event_fifo[midi_obj->note_event_ptr_r];
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8001b76:	4619      	mov	r1, r3
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	440b      	add	r3, r1
 8001b80:	4413      	add	r3, r2
 8001b82:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	8811      	ldrh	r1, [r2, #0]
 8001b8c:	7892      	ldrb	r2, [r2, #2]
 8001b8e:	8019      	strh	r1, [r3, #0]
 8001b90:	709a      	strb	r2, [r3, #2]
    midi_obj->note_event_count--;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	7a9b      	ldrb	r3, [r3, #10]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	729a      	strb	r2, [r3, #10]
    
    // Wrap pointer if reaching the FIFO end
    if ((midi_obj->note_event_ptr_r) == (MIDI_EVENT_FIFO_SIZE-1))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8001ba4:	2b13      	cmp	r3, #19
 8001ba6:	d104      	bne.n	8001bb2 <midi_note_pop+0x52>
    {
      midi_obj->note_event_ptr_r = 0U;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
 8001bb0:	e007      	b.n	8001bc2 <midi_note_pop+0x62>
    }
    else
    {
      midi_obj->note_event_ptr_r++;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8001bb8:	3301      	adds	r3, #1
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    }
    midi_obj->interface_status = MIDI_BUFFER_OK;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	72da      	strb	r2, [r3, #11]
    return (note_event);
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	f107 0208 	add.w	r2, r7, #8
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	8019      	strh	r1, [r3, #0]
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	0c12      	lsrs	r2, r2, #16
 8001bda:	701a      	strb	r2, [r3, #0]
 8001bdc:	e008      	b.n	8001bf0 <midi_note_pop+0x90>
  }
  else
  {
    midi_obj->interface_status = MIDI_BUFFER_EMPTY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2202      	movs	r2, #2
 8001be2:	72da      	strb	r2, [r3, #11]
    return MIDI_NOTE_EVENT_EMPTY;
 8001be4:	2300      	movs	r3, #0
 8001be6:	733b      	strb	r3, [r7, #12]
 8001be8:	23ff      	movs	r3, #255	; 0xff
 8001bea:	737b      	strb	r3, [r7, #13]
 8001bec:	2300      	movs	r3, #0
 8001bee:	73bb      	strb	r3, [r7, #14]
  }
}
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	7b3a      	ldrb	r2, [r7, #12]
 8001bf4:	f362 0307 	bfi	r3, r2, #0, #8
 8001bf8:	7b7a      	ldrb	r2, [r7, #13]
 8001bfa:	f362 230f 	bfi	r3, r2, #8, #8
 8001bfe:	7bba      	ldrb	r2, [r7, #14]
 8001c00:	f362 4317 	bfi	r3, r2, #16, #8
 8001c04:	4618      	mov	r0, r3
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <pcm3168a_read_reg>:

// ----------------------------------------------------------------------------
// PCM3168A read register
// ----------------------------------------------------------------------------
uint8_t pcm3168a_read_reg(uint8_t addr)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  uint8_t buff[2];
  buff[0] = addr | READ_MASK;
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	733b      	strb	r3, [r7, #12]
  buff[1] = 0x00; // dummy data
 8001c24:	2300      	movs	r3, #0
 8001c26:	737b      	strb	r3, [r7, #13]
  HAL_SPI_Receive(&hspi1, buff, 2, HAL_MAX_DELAY);
 8001c28:	f107 010c 	add.w	r1, r7, #12
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c30:	2202      	movs	r2, #2
 8001c32:	4804      	ldr	r0, [pc, #16]	; (8001c44 <pcm3168a_read_reg+0x34>)
 8001c34:	f00b f94c 	bl	800ced0 <HAL_SPI_Receive>

  return buff[1];
 8001c38:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	24000c3c 	.word	0x24000c3c

08001c48 <pcm3168a_write_reg>:

// ----------------------------------------------------------------------------
// PCM3168A write register
// ----------------------------------------------------------------------------
void pcm3168a_write_reg(uint8_t addr, uint8_t data)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
  uint8_t buff[2];
  buff[1] = data;
 8001c58:	79bb      	ldrb	r3, [r7, #6]
 8001c5a:	737b      	strb	r3, [r7, #13]
  buff[0] = addr;
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	733b      	strb	r3, [r7, #12]
  HAL_SPI_Transmit(&hspi1, buff, 2, HAL_MAX_DELAY);
 8001c60:	f107 010c 	add.w	r1, r7, #12
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
 8001c68:	2202      	movs	r2, #2
 8001c6a:	4803      	ldr	r0, [pc, #12]	; (8001c78 <pcm3168a_write_reg+0x30>)
 8001c6c:	f00a ff3e 	bl	800caec <HAL_SPI_Transmit>
}
 8001c70:	bf00      	nop
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	24000c3c 	.word	0x24000c3c

08001c7c <osc_step>:

// ----------------------------------------------------------------------------
// Oscillator library
// ----------------------------------------------------------------------------
void osc_step(oscillator* p_osc)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t a, b;
  float r;
  
  // Increment phase
  p_osc->phase_accu += p_osc->phase_inc;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	edc3 7a02 	vstr	s15, [r3, #8]

  // Handle wrap-around
  while((p_osc->phase_accu) >= p_osc->LUT_size)
 8001c9a:	e00d      	b.n	8001cb8 <osc_step+0x3c>
  {
    p_osc->phase_accu -= p_osc->LUT_size;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	ee07 3a90 	vmov	s15, r3
 8001caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	edc3 7a02 	vstr	s15, [r3, #8]
  while((p_osc->phase_accu) >= p_osc->LUT_size)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	ee07 3a90 	vmov	s15, r3
 8001cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd2:	dae3      	bge.n	8001c9c <osc_step+0x20>
  }

  while((p_osc->phase_accu) < 0.0f)
 8001cd4:	e00d      	b.n	8001cf2 <osc_step+0x76>
  {
    p_osc->phase_accu += p_osc->LUT_size;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	ee07 3a90 	vmov	s15, r3
 8001ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	edc3 7a02 	vstr	s15, [r3, #8]
  while((p_osc->phase_accu) < 0.0f)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d00:	d4e9      	bmi.n	8001cd6 <osc_step+0x5a>
  }

  // Interpolate to reduce spurious dramatically
  a = ((uint32_t)(p_osc->phase_accu)) % (p_osc->LUT_size);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d0c:	ee17 1a90 	vmov	r1, s15
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	fbb1 f2f3 	udiv	r2, r1, r3
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	1acb      	subs	r3, r1, r3
 8001d1e:	617b      	str	r3, [r7, #20]
  b = (a + 1) % (p_osc->LUT_size);
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6852      	ldr	r2, [r2, #4]
 8001d28:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d2c:	fb01 f202 	mul.w	r2, r1, r2
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
  r = p_osc->phase_accu - ((uint32_t)p_osc->phase_accu);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4c:	edc7 7a03 	vstr	s15, [r7, #12]
  
  // Interpolate
  p_osc->output = (1.0f - r)*(*(p_osc->p_LUT_osc + a)) + r*(*(p_osc->p_LUT_osc + b));
 8001d50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	edd3 6a00 	vldr	s13, [r3]
 8001d7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8001d8e:	bf00      	nop
 8001d90:	371c      	adds	r7, #28
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <adsr_init>:

// ----------------------------------------------------------------------------
// ADSR library
// ----------------------------------------------------------------------------
void adsr_init(adsr* adsr_obj)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  adsr_obj -> state       = ADSR_STATE_IDLE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	771a      	strb	r2, [r3, #28]
  adsr_obj -> ratio       = 0.0f;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  adsr_obj -> busy        = ADSR_DONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	775a      	strb	r2, [r3, #29]
  adsr_obj -> output      = 0.0f;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	621a      	str	r2, [r3, #32]
  adsr_obj -> note_status = KEY_RELEASED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	751a      	strb	r2, [r3, #20]
  adsr_obj -> note_event  = 0;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	755a      	strb	r2, [r3, #21]
  adsr_obj -> prescaler   = 1;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <adsr_step>:

void adsr_step(adsr* adsr_obj)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  switch(adsr_obj -> state)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7f1b      	ldrb	r3, [r3, #28]
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	f200 822a 	bhi.w	8002242 <adsr_step+0x466>
 8001dee:	a201      	add	r2, pc, #4	; (adr r2, 8001df4 <adsr_step+0x18>)
 8001df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df4:	08001e09 	.word	0x08001e09
 8001df8:	08001f05 	.word	0x08001f05
 8001dfc:	0800202b 	.word	0x0800202b
 8001e00:	08002139 	.word	0x08002139
 8001e04:	080021c9 	.word	0x080021c9
    // ADSR idle state 
    // ------------------------------------------------------------------------
    case ADSR_STATE_IDLE :
    
      // Key pressed
      if (((adsr_obj -> note_event) == 1) && ((adsr_obj -> note_status) == KEY_PRESSED))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	7d5b      	ldrb	r3, [r3, #21]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	f040 8215 	bne.w	800223c <adsr_step+0x460>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7d1b      	ldrb	r3, [r3, #20]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	f040 8210 	bne.w	800223c <adsr_step+0x460>
      {
        // Reset the event to indicate that it has been taken into account
        adsr_obj -> note_event = 0;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	755a      	strb	r2, [r3, #21]
        
        // Skip the attack phase if the attack time is too short
        if ((adsr_obj -> attack_time) < ADSR_MIN_ATTACK_TIME)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e28:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80020f0 <adsr_step+0x314>
 8001e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	d540      	bpl.n	8001eb8 <adsr_step+0xdc>
        {
          // Skip the decay phase if the decay time is too short
          if ((adsr_obj -> decay_time) < ADSR_MIN_DECAY_TIME)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e3c:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80020f0 <adsr_step+0x314>
 8001e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	d51f      	bpl.n	8001e8a <adsr_step+0xae>
          {
            // Skip the sustain + release if sustain is too low
            if ((adsr_obj -> sustain_level) < ADSR_MIN_SUSTAIN_LEVEL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e50:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80020f0 <adsr_step+0x314>
 8001e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	d50a      	bpl.n	8001e74 <adsr_step+0x98>
            {
              adsr_obj -> output  = 0.0f;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	621a      	str	r2, [r3, #32]
              adsr_obj -> busy    = ADSR_DONE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	775a      	strb	r2, [r3, #29]
              adsr_obj -> state   = ADSR_STATE_IDLE;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	771a      	strb	r2, [r3, #28]
      else
      {
        // Nothing to do.
      }

      break;
 8001e72:	e1e3      	b.n	800223c <adsr_step+0x460>
              adsr_obj -> output  = adsr_obj -> sustain_level;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	621a      	str	r2, [r3, #32]
              adsr_obj -> busy    = ADSR_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	775a      	strb	r2, [r3, #29]
              adsr_obj -> state   = ADSR_STATE_SUSTAIN;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2203      	movs	r2, #3
 8001e86:	771a      	strb	r2, [r3, #28]
      break;
 8001e88:	e1d8      	b.n	800223c <adsr_step+0x460>
            adsr_obj -> ratio   = adsr_time_to_ratio(adsr_obj -> decay_time);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001e90:	eeb0 0a67 	vmov.f32	s0, s15
 8001e94:	f000 f9da 	bl	800224c <adsr_time_to_ratio>
 8001e98:	eef0 7a40 	vmov.f32	s15, s0
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	edc3 7a06 	vstr	s15, [r3, #24]
            adsr_obj -> output  = 1.0f;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ea8:	621a      	str	r2, [r3, #32]
            adsr_obj -> busy    = ADSR_BUSY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	775a      	strb	r2, [r3, #29]
            adsr_obj -> state   = ADSR_STATE_DECAY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	771a      	strb	r2, [r3, #28]
      break;
 8001eb6:	e1c1      	b.n	800223c <adsr_step+0x460>
          adsr_obj -> ratio   = adsr_time_to_ratio(adsr_obj -> attack_time);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ebe:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec2:	f000 f9c3 	bl	800224c <adsr_time_to_ratio>
 8001ec6:	eef0 7a40 	vmov.f32	s15, s0
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	edc3 7a06 	vstr	s15, [r3, #24]
          adsr_obj -> output  = (adsr_obj -> ratio) * (adsr_obj -> output - 1.0f) + 1.0f;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	ed93 7a06 	vldr	s14, [r3, #24]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001edc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ee0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001eec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	edc3 7a08 	vstr	s15, [r3, #32]
          adsr_obj -> busy    = ADSR_BUSY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	775a      	strb	r2, [r3, #29]
          adsr_obj -> state   = ADSR_STATE_ATTACK;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	771a      	strb	r2, [r3, #28]
      break;
 8001f02:	e19b      	b.n	800223c <adsr_step+0x460>
    // ADSR attack state 
    // ------------------------------------------------------------------------
    case ADSR_STATE_ATTACK :
    
      // Key released
      if (((adsr_obj -> note_event) == 1) && ((adsr_obj -> note_status) == KEY_RELEASED))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	7d5b      	ldrb	r3, [r3, #21]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d136      	bne.n	8001f7a <adsr_step+0x19e>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	7d1b      	ldrb	r3, [r3, #20]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d132      	bne.n	8001f7a <adsr_step+0x19e>
      {
        // Reset the event
        adsr_obj -> note_event = 0;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	755a      	strb	r2, [r3, #21]
      
        // Release time too short
        if ((adsr_obj -> release_time) < ADSR_MIN_RELEASE_TIME)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f20:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80020f0 <adsr_step+0x314>
 8001f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f2c:	d50a      	bpl.n	8001f44 <adsr_step+0x168>
        {
          adsr_obj -> output  = 0.0f;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	621a      	str	r2, [r3, #32]
          adsr_obj -> busy    = ADSR_DONE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	775a      	strb	r2, [r3, #29]
          adsr_obj -> state   = ADSR_STATE_IDLE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	771a      	strb	r2, [r3, #28]
        if ((adsr_obj -> release_time) < ADSR_MIN_RELEASE_TIME)
 8001f42:	e071      	b.n	8002028 <adsr_step+0x24c>
        }
        // Nominal release
        else
        {
          adsr_obj -> ratio   = adsr_time_to_ratio(adsr_obj -> release_time);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	edd3 7a04 	vldr	s15, [r3, #16]
 8001f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f4e:	f000 f97d 	bl	800224c <adsr_time_to_ratio>
 8001f52:	eef0 7a40 	vmov.f32	s15, s0
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	edc3 7a06 	vstr	s15, [r3, #24]
          adsr_obj -> output  = (adsr_obj -> ratio) * (adsr_obj -> output);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	edc3 7a08 	vstr	s15, [r3, #32]
          adsr_obj -> state   = ADSR_STATE_RELEASE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2204      	movs	r2, #4
 8001f76:	771a      	strb	r2, [r3, #28]
        if ((adsr_obj -> release_time) < ADSR_MIN_RELEASE_TIME)
 8001f78:	e056      	b.n	8002028 <adsr_step+0x24c>
        }
      }

      // Key pressed (impossible?)
      else if (((adsr_obj -> note_event) == 1) && ((adsr_obj -> note_status) == KEY_PRESSED))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7d5b      	ldrb	r3, [r3, #21]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d107      	bne.n	8001f92 <adsr_step+0x1b6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7d1b      	ldrb	r3, [r3, #20]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d103      	bne.n	8001f92 <adsr_step+0x1b6>
      {
        // Reset the event
        adsr_obj -> note_event = 0;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	755a      	strb	r2, [r3, #21]
 8001f90:	e04a      	b.n	8002028 <adsr_step+0x24c>
      
      // No key event
      else
      {
        // Detect the end of the attack curve
        if ((adsr_obj -> output) >= ADSR_RISE_DONE_THRESH)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f98:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80020ec <adsr_step+0x310>
 8001f9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fa4:	db29      	blt.n	8001ffa <adsr_step+0x21e>
        {
          adsr_obj -> ratio         = adsr_time_to_ratio(adsr_obj -> decay_time);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fac:	eeb0 0a67 	vmov.f32	s0, s15
 8001fb0:	f000 f94c 	bl	800224c <adsr_time_to_ratio>
 8001fb4:	eef0 7a40 	vmov.f32	s15, s0
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	edc3 7a06 	vstr	s15, [r3, #24]
          adsr_obj -> output        = (adsr_obj -> ratio) * (adsr_obj -> output);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	ed93 7a06 	vldr	s14, [r3, #24]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	edc3 7a08 	vstr	s15, [r3, #32]
          adsr_obj -> skip_sustain  = (adsr_obj -> sustain_level < ADSR_MIN_SUSTAIN_LEVEL) ? 1U : 0U;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001fda:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80020f0 <adsr_step+0x314>
 8001fde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe6:	d501      	bpl.n	8001fec <adsr_step+0x210>
 8001fe8:	2201      	movs	r2, #1
 8001fea:	e000      	b.n	8001fee <adsr_step+0x212>
 8001fec:	2200      	movs	r2, #0
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	759a      	strb	r2, [r3, #22]
          adsr_obj -> state         = ADSR_STATE_DECAY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	771a      	strb	r2, [r3, #28]
          adsr_obj -> output  = (adsr_obj -> ratio) * (adsr_obj -> output - 1.0f) + 1.0f;
          adsr_obj -> state   = ADSR_STATE_ATTACK;
        }
      }
      
      break;
 8001ff8:	e123      	b.n	8002242 <adsr_step+0x466>
          adsr_obj -> output  = (adsr_obj -> ratio) * (adsr_obj -> output - 1.0f) + 1.0f;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	ed93 7a06 	vldr	s14, [r3, #24]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	edd3 7a08 	vldr	s15, [r3, #32]
 8002006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800200a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800200e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002016:	ee77 7a87 	vadd.f32	s15, s15, s14
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	edc3 7a08 	vstr	s15, [r3, #32]
          adsr_obj -> state   = ADSR_STATE_ATTACK;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	771a      	strb	r2, [r3, #28]
      break;
 8002026:	e10c      	b.n	8002242 <adsr_step+0x466>
 8002028:	e10b      	b.n	8002242 <adsr_step+0x466>
    // ADSR decay state 
    // ------------------------------------------------------------------------
    case ADSR_STATE_DECAY :
      
      // Key released
      if (((adsr_obj -> note_event) == 1) && ((adsr_obj -> note_status) == KEY_RELEASED))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7d5b      	ldrb	r3, [r3, #21]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d136      	bne.n	80020a0 <adsr_step+0x2c4>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	7d1b      	ldrb	r3, [r3, #20]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d132      	bne.n	80020a0 <adsr_step+0x2c4>
      {
        // Reset the event
        adsr_obj -> note_event = 0;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	755a      	strb	r2, [r3, #21]

        // Release time too short
        if ((adsr_obj -> release_time) < ADSR_MIN_RELEASE_TIME)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	edd3 7a04 	vldr	s15, [r3, #16]
 8002046:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80020f0 <adsr_step+0x314>
 800204a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800204e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002052:	d50a      	bpl.n	800206a <adsr_step+0x28e>
        {
          adsr_obj -> output  = 0.0f;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
          adsr_obj -> busy    = ADSR_DONE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	775a      	strb	r2, [r3, #29]
          adsr_obj -> state   = ADSR_STATE_IDLE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	771a      	strb	r2, [r3, #28]
        if ((adsr_obj -> release_time) < ADSR_MIN_RELEASE_TIME)
 8002068:	e065      	b.n	8002136 <adsr_step+0x35a>
        }
        // Nominal release
        else
        {
          adsr_obj -> ratio   = adsr_time_to_ratio(adsr_obj -> release_time);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002070:	eeb0 0a67 	vmov.f32	s0, s15
 8002074:	f000 f8ea 	bl	800224c <adsr_time_to_ratio>
 8002078:	eef0 7a40 	vmov.f32	s15, s0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	edc3 7a06 	vstr	s15, [r3, #24]
          adsr_obj -> output  = (adsr_obj -> ratio) * (adsr_obj -> output);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	ed93 7a06 	vldr	s14, [r3, #24]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	edd3 7a08 	vldr	s15, [r3, #32]
 800208e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	edc3 7a08 	vstr	s15, [r3, #32]
          adsr_obj -> state   = ADSR_STATE_RELEASE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2204      	movs	r2, #4
 800209c:	771a      	strb	r2, [r3, #28]
        if ((adsr_obj -> release_time) < ADSR_MIN_RELEASE_TIME)
 800209e:	e04a      	b.n	8002136 <adsr_step+0x35a>
        }
      }
      
      // Key pressed (impossible?)
      else if (((adsr_obj -> note_event) == 1) && ((adsr_obj -> note_status) == KEY_PRESSED))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7d5b      	ldrb	r3, [r3, #21]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d107      	bne.n	80020b8 <adsr_step+0x2dc>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	7d1b      	ldrb	r3, [r3, #20]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d103      	bne.n	80020b8 <adsr_step+0x2dc>
      {
        // Reset the event
        adsr_obj -> note_event = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	755a      	strb	r2, [r3, #21]
 80020b6:	e03e      	b.n	8002136 <adsr_step+0x35a>
      
      // No key event: nominal decay until sustain
      else
      {
        // Sustain level is too low. Don't wait to reach it
        if (((adsr_obj -> skip_sustain) == 1U) && ((adsr_obj -> output) <= ADSR_MIN_SUSTAIN_LEVEL))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7d9b      	ldrb	r3, [r3, #22]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d11b      	bne.n	80020f8 <adsr_step+0x31c>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80020c6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80020f0 <adsr_step+0x314>
 80020ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d2:	d811      	bhi.n	80020f8 <adsr_step+0x31c>
        {
          adsr_obj -> output  = 0.0f;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	621a      	str	r2, [r3, #32]
          adsr_obj -> busy    = ADSR_DONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	775a      	strb	r2, [r3, #29]
          adsr_obj -> state   = ADSR_STATE_IDLE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	771a      	strb	r2, [r3, #28]
 80020e8:	e025      	b.n	8002136 <adsr_step+0x35a>
 80020ea:	bf00      	nop
 80020ec:	3f7d70a4 	.word	0x3f7d70a4
 80020f0:	3ba3d70a 	.word	0x3ba3d70a
 80020f4:	3a83126f 	.word	0x3a83126f
        }
        // Sustain level is hit
        else if ((adsr_obj -> output) < (adsr_obj -> sustain_level))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	edd3 7a03 	vldr	s15, [r3, #12]
 8002104:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210c:	d507      	bpl.n	800211e <adsr_step+0x342>
        {
          adsr_obj -> output  = adsr_obj -> sustain_level;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	621a      	str	r2, [r3, #32]
          adsr_obj -> state   = ADSR_STATE_SUSTAIN;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2203      	movs	r2, #3
 800211a:	771a      	strb	r2, [r3, #28]
        {
          adsr_obj -> output = (adsr_obj -> ratio) * (adsr_obj -> output);
        }
      }

      break;
 800211c:	e091      	b.n	8002242 <adsr_step+0x466>
          adsr_obj -> output = (adsr_obj -> ratio) * (adsr_obj -> output);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	ed93 7a06 	vldr	s14, [r3, #24]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	edd3 7a08 	vldr	s15, [r3, #32]
 800212a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8002134:	e085      	b.n	8002242 <adsr_step+0x466>
 8002136:	e084      	b.n	8002242 <adsr_step+0x466>
    // ADSR sustain state 
    // ------------------------------------------------------------------------
    case ADSR_STATE_SUSTAIN :
      
      // Key released
      if (((adsr_obj -> note_event) == 1) && ((adsr_obj -> note_status) == KEY_RELEASED))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7d5b      	ldrb	r3, [r3, #21]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d136      	bne.n	80021ae <adsr_step+0x3d2>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7d1b      	ldrb	r3, [r3, #20]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d132      	bne.n	80021ae <adsr_step+0x3d2>
      {
        // Reset the event
        adsr_obj -> note_event = 0;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	755a      	strb	r2, [r3, #21]

        // Release time too short
        if ((adsr_obj -> release_time) < ADSR_MIN_RELEASE_TIME)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	edd3 7a04 	vldr	s15, [r3, #16]
 8002154:	ed1f 7a1a 	vldr	s14, [pc, #-104]	; 80020f0 <adsr_step+0x314>
 8002158:	eef4 7ac7 	vcmpe.f32	s15, s14
 800215c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002160:	d50a      	bpl.n	8002178 <adsr_step+0x39c>
        {
          adsr_obj -> output  = 0.0f;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	621a      	str	r2, [r3, #32]
          adsr_obj -> busy    = ADSR_DONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	775a      	strb	r2, [r3, #29]
          adsr_obj -> state   = ADSR_STATE_IDLE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	771a      	strb	r2, [r3, #28]
        if ((adsr_obj -> release_time) < ADSR_MIN_RELEASE_TIME)
 8002176:	e026      	b.n	80021c6 <adsr_step+0x3ea>
        }
        // Nominal release
        else
        {
          adsr_obj -> ratio   = adsr_time_to_ratio(adsr_obj -> release_time);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	edd3 7a04 	vldr	s15, [r3, #16]
 800217e:	eeb0 0a67 	vmov.f32	s0, s15
 8002182:	f000 f863 	bl	800224c <adsr_time_to_ratio>
 8002186:	eef0 7a40 	vmov.f32	s15, s0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	edc3 7a06 	vstr	s15, [r3, #24]
          adsr_obj -> output  = (adsr_obj -> ratio) * (adsr_obj -> output);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	ed93 7a06 	vldr	s14, [r3, #24]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	edd3 7a08 	vldr	s15, [r3, #32]
 800219c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	edc3 7a08 	vstr	s15, [r3, #32]
          adsr_obj -> state   = ADSR_STATE_RELEASE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2204      	movs	r2, #4
 80021aa:	771a      	strb	r2, [r3, #28]
        if ((adsr_obj -> release_time) < ADSR_MIN_RELEASE_TIME)
 80021ac:	e00b      	b.n	80021c6 <adsr_step+0x3ea>
        }
      }
      
      // Key pressed (impossible?)
      else if (((adsr_obj -> note_event) == 1) && ((adsr_obj -> note_status) == KEY_PRESSED))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7d5b      	ldrb	r3, [r3, #21]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d144      	bne.n	8002240 <adsr_step+0x464>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7d1b      	ldrb	r3, [r3, #20]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d140      	bne.n	8002240 <adsr_step+0x464>
      {
        // Reset the event
        adsr_obj -> note_event = 0;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	755a      	strb	r2, [r3, #21]
      else
      {
        // Nothing to do.
      }

      break;
 80021c4:	e03c      	b.n	8002240 <adsr_step+0x464>
 80021c6:	e03b      	b.n	8002240 <adsr_step+0x464>
    // ADSR release state 
    // ------------------------------------------------------------------------
    case ADSR_STATE_RELEASE :
      
      // Key released
      if (((adsr_obj -> note_event) == 1) && ((adsr_obj -> note_status) == KEY_RELEASED))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7d5b      	ldrb	r3, [r3, #21]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d107      	bne.n	80021e0 <adsr_step+0x404>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	7d1b      	ldrb	r3, [r3, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d103      	bne.n	80021e0 <adsr_step+0x404>
      {
        // Reset the event
        adsr_obj -> note_event = 0;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	755a      	strb	r2, [r3, #21]
 80021de:	e02c      	b.n	800223a <adsr_step+0x45e>
        // Nothing to do.
        // FSM is in release state because the key has been released already.
      }
      
      // Key pressed
      else if (((adsr_obj -> note_event) == 1) && ((adsr_obj -> note_status) == KEY_PRESSED))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7d5b      	ldrb	r3, [r3, #21]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d107      	bne.n	80021f8 <adsr_step+0x41c>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7d1b      	ldrb	r3, [r3, #20]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d103      	bne.n	80021f8 <adsr_step+0x41c>
      {
        // Reset the event
        adsr_obj -> note_event = 0;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	755a      	strb	r2, [r3, #21]
 80021f6:	e020      	b.n	800223a <adsr_step+0x45e>
      }
      
      // No key event
      else
      {
        if (adsr_obj -> output < ADSR_RELEASE_DONE_THRESH)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80021fe:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80020f4 <adsr_step+0x318>
 8002202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220a:	d50a      	bpl.n	8002222 <adsr_step+0x446>
        {
          adsr_obj -> output  = 0.0f;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	621a      	str	r2, [r3, #32]
          adsr_obj -> busy    = ADSR_DONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	775a      	strb	r2, [r3, #29]
          adsr_obj -> state   = ADSR_STATE_IDLE;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	771a      	strb	r2, [r3, #28]
        {
          adsr_obj -> output = (adsr_obj -> ratio) * (adsr_obj -> output);
        }
      }

      break;
 8002220:	e00f      	b.n	8002242 <adsr_step+0x466>
          adsr_obj -> output = (adsr_obj -> ratio) * (adsr_obj -> output);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	ed93 7a06 	vldr	s14, [r3, #24]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	edd3 7a08 	vldr	s15, [r3, #32]
 800222e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	edc3 7a08 	vstr	s15, [r3, #32]
      break;
 8002238:	e003      	b.n	8002242 <adsr_step+0x466>
 800223a:	e002      	b.n	8002242 <adsr_step+0x466>
      break;
 800223c:	bf00      	nop
 800223e:	e000      	b.n	8002242 <adsr_step+0x466>
      break;
 8002240:	bf00      	nop
  }
}
 8002242:	bf00      	nop
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop

0800224c <adsr_time_to_ratio>:

// t = normalized time in 0...1
// When t = 1.0, actual time is about XXX
float adsr_time_to_ratio(float t)
{
 800224c:	b480      	push	{r7}
 800224e:	b08b      	sub	sp, #44	; 0x2c
 8002250:	af00      	add	r7, sp, #0
 8002252:	ed87 0a01 	vstr	s0, [r7, #4]
  // Designed in Geogebra, then tweaked in matlab script
  const float a_0 = 7.533093301515650f;
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <adsr_time_to_ratio+0xf8>)
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
  const float a_1 = -6.666185180470015f;
 800225a:	4b3b      	ldr	r3, [pc, #236]	; (8002348 <adsr_time_to_ratio+0xfc>)
 800225c:	623b      	str	r3, [r7, #32]
  const float a_2 = -0.648421215312096f;
 800225e:	4b3b      	ldr	r3, [pc, #236]	; (800234c <adsr_time_to_ratio+0x100>)
 8002260:	61fb      	str	r3, [r7, #28]
  const float a_3 = -0.152300302702238f;
 8002262:	4b3b      	ldr	r3, [pc, #236]	; (8002350 <adsr_time_to_ratio+0x104>)
 8002264:	61bb      	str	r3, [r7, #24]
  
  const float p_1 = 0.05f;
 8002266:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <adsr_time_to_ratio+0x108>)
 8002268:	617b      	str	r3, [r7, #20]
  const float p_2 = 0.141979205962700f;
 800226a:	4b3b      	ldr	r3, [pc, #236]	; (8002358 <adsr_time_to_ratio+0x10c>)
 800226c:	613b      	str	r3, [r7, #16]
  const float p_3 = 0.270386037823100f;
 800226e:	4b3b      	ldr	r3, [pc, #236]	; (800235c <adsr_time_to_ratio+0x110>)
 8002270:	60fb      	str	r3, [r7, #12]
  
  const float C   = 0.466551463709798f;
 8002272:	4b3b      	ldr	r3, [pc, #236]	; (8002360 <adsr_time_to_ratio+0x114>)
 8002274:	60bb      	str	r3, [r7, #8]

  if (t >= 0.0f)
 8002276:	edd7 7a01 	vldr	s15, [r7, #4]
 800227a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800227e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002282:	db4a      	blt.n	800231a <adsr_time_to_ratio+0xce>
  {
    return (a_0*fabs(t) + a_1*fabs(t-p_1) + a_2*fabs(t-p_2) + a_3*fabs(t-p_3) + C);
 8002284:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002288:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800228c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002290:	eef0 7ae7 	vabs.f32	s15, s15
 8002294:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002298:	ee26 6b07 	vmul.f64	d6, d6, d7
 800229c:	edd7 7a08 	vldr	s15, [r7, #32]
 80022a0:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80022a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80022a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80022ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b0:	eef0 7ae7 	vabs.f32	s15, s15
 80022b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022b8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80022bc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80022c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80022c4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80022c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80022cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80022d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022d4:	eef0 7ae7 	vabs.f32	s15, s15
 80022d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80022e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80022e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80022e8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80022ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80022f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80022f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f8:	eef0 7ae7 	vabs.f32	s15, s15
 80022fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002300:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002304:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002308:	edd7 7a02 	vldr	s15, [r7, #8]
 800230c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002310:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002314:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002318:	e00d      	b.n	8002336 <adsr_time_to_ratio+0xea>
  }
  else if (t >= 1.0f)
 800231a:	edd7 7a01 	vldr	s15, [r7, #4]
 800231e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002322:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800232a:	db02      	blt.n	8002332 <adsr_time_to_ratio+0xe6>
  {
    return 1.0f;
 800232c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002330:	e001      	b.n	8002336 <adsr_time_to_ratio+0xea>
  }
  else
  {
    return 0.0f;
 8002332:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8002364 <adsr_time_to_ratio+0x118>
  }
}
 8002336:	eeb0 0a67 	vmov.f32	s0, s15
 800233a:	372c      	adds	r7, #44	; 0x2c
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	40f10f1a 	.word	0x40f10f1a
 8002348:	c0d55164 	.word	0xc0d55164
 800234c:	bf25feef 	.word	0xbf25feef
 8002350:	be1bf49c 	.word	0xbe1bf49c
 8002354:	3d4ccccd 	.word	0x3d4ccccd
 8002358:	3e1162ff 	.word	0x3e1162ff
 800235c:	3e8a700a 	.word	0x3e8a700a
 8002360:	3eeedfd5 	.word	0x3eeedfd5
 8002364:	00000000 	.word	0x00000000

08002368 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 800236c:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <MX_QUADSPI_Init+0x50>)
 800236e:	4a13      	ldr	r2, [pc, #76]	; (80023bc <MX_QUADSPI_Init+0x54>)
 8002370:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8002372:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <MX_QUADSPI_Init+0x50>)
 8002374:	22ff      	movs	r2, #255	; 0xff
 8002376:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8002378:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <MX_QUADSPI_Init+0x50>)
 800237a:	2201      	movs	r2, #1
 800237c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_QUADSPI_Init+0x50>)
 8002380:	2200      	movs	r2, #0
 8002382:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <MX_QUADSPI_Init+0x50>)
 8002386:	2201      	movs	r2, #1
 8002388:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <MX_QUADSPI_Init+0x50>)
 800238c:	2200      	movs	r2, #0
 800238e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_QUADSPI_Init+0x50>)
 8002392:	2200      	movs	r2, #0
 8002394:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_2;
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <MX_QUADSPI_Init+0x50>)
 8002398:	2280      	movs	r2, #128	; 0x80
 800239a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_QUADSPI_Init+0x50>)
 800239e:	2200      	movs	r2, #0
 80023a0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80023a2:	4805      	ldr	r0, [pc, #20]	; (80023b8 <MX_QUADSPI_Init+0x50>)
 80023a4:	f006 fa28 	bl	80087f8 <HAL_QSPI_Init>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 80023ae:	f7ff f9ed 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	240009cc 	.word	0x240009cc
 80023bc:	52005000 	.word	0x52005000

080023c0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b0ba      	sub	sp, #232	; 0xe8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023d8:	f107 0318 	add.w	r3, r7, #24
 80023dc:	22bc      	movs	r2, #188	; 0xbc
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f00f f9db 	bl	801179c <memset>
  if(qspiHandle->Instance==QUADSPI)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a4a      	ldr	r2, [pc, #296]	; (8002514 <HAL_QSPI_MspInit+0x154>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	f040 808c 	bne.w	800250a <HAL_QSPI_MspInit+0x14a>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80023f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023fc:	f107 0318 	add.w	r3, r7, #24
 8002400:	4618      	mov	r0, r3
 8002402:	f007 fa6d 	bl	80098e0 <HAL_RCCEx_PeriphCLKConfig>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 800240c:	f7ff f9be 	bl	800178c <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002410:	4b41      	ldr	r3, [pc, #260]	; (8002518 <HAL_QSPI_MspInit+0x158>)
 8002412:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002416:	4a40      	ldr	r2, [pc, #256]	; (8002518 <HAL_QSPI_MspInit+0x158>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241c:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002420:	4b3d      	ldr	r3, [pc, #244]	; (8002518 <HAL_QSPI_MspInit+0x158>)
 8002422:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242e:	4b3a      	ldr	r3, [pc, #232]	; (8002518 <HAL_QSPI_MspInit+0x158>)
 8002430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002434:	4a38      	ldr	r2, [pc, #224]	; (8002518 <HAL_QSPI_MspInit+0x158>)
 8002436:	f043 0302 	orr.w	r3, r3, #2
 800243a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800243e:	4b36      	ldr	r3, [pc, #216]	; (8002518 <HAL_QSPI_MspInit+0x158>)
 8002440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800244c:	4b32      	ldr	r3, [pc, #200]	; (8002518 <HAL_QSPI_MspInit+0x158>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002452:	4a31      	ldr	r2, [pc, #196]	; (8002518 <HAL_QSPI_MspInit+0x158>)
 8002454:	f043 0310 	orr.w	r3, r3, #16
 8002458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245c:	4b2e      	ldr	r3, [pc, #184]	; (8002518 <HAL_QSPI_MspInit+0x158>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800246a:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <HAL_QSPI_MspInit+0x158>)
 800246c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002470:	4a29      	ldr	r2, [pc, #164]	; (8002518 <HAL_QSPI_MspInit+0x158>)
 8002472:	f043 0304 	orr.w	r3, r3, #4
 8002476:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800247a:	4b27      	ldr	r3, [pc, #156]	; (8002518 <HAL_QSPI_MspInit+0x158>)
 800247c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]
    PE8     ------> QUADSPI_BK2_IO1
    PE9     ------> QUADSPI_BK2_IO2
    PE10     ------> QUADSPI_BK2_IO3
    PC11     ------> QUADSPI_BK2_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002488:	2304      	movs	r3, #4
 800248a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80024a0:	2309      	movs	r3, #9
 80024a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024aa:	4619      	mov	r1, r3
 80024ac:	481b      	ldr	r0, [pc, #108]	; (800251c <HAL_QSPI_MspInit+0x15c>)
 80024ae:	f005 fc6b 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80024b2:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80024b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ba:	2302      	movs	r3, #2
 80024bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80024cc:	230a      	movs	r3, #10
 80024ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024d2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024d6:	4619      	mov	r1, r3
 80024d8:	4811      	ldr	r0, [pc, #68]	; (8002520 <HAL_QSPI_MspInit+0x160>)
 80024da:	f005 fc55 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80024de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e6:	2302      	movs	r3, #2
 80024e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80024f8:	2309      	movs	r3, #9
 80024fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fe:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002502:	4619      	mov	r1, r3
 8002504:	4807      	ldr	r0, [pc, #28]	; (8002524 <HAL_QSPI_MspInit+0x164>)
 8002506:	f005 fc3f 	bl	8007d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800250a:	bf00      	nop
 800250c:	37e8      	adds	r7, #232	; 0xe8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	52005000 	.word	0x52005000
 8002518:	58024400 	.word	0x58024400
 800251c:	58020400 	.word	0x58020400
 8002520:	58021000 	.word	0x58021000
 8002524:	58020800 	.word	0x58020800

08002528 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  hsai_BlockA1.Instance             = SAI1_Block_A;
 800252c:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <MX_SAI1_Init+0xc8>)
 800252e:	4a31      	ldr	r2, [pc, #196]	; (80025f4 <MX_SAI1_Init+0xcc>)
 8002530:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode       = SAI_MODEMASTER_TX;
 8002532:	4b2f      	ldr	r3, [pc, #188]	; (80025f0 <MX_SAI1_Init+0xc8>)
 8002534:	2200      	movs	r2, #0
 8002536:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro         = SAI_ASYNCHRONOUS;
 8002538:	4b2d      	ldr	r3, [pc, #180]	; (80025f0 <MX_SAI1_Init+0xc8>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive     = SAI_OUTPUTDRIVE_DISABLE;
 800253e:	4b2c      	ldr	r3, [pc, #176]	; (80025f0 <MX_SAI1_Init+0xc8>)
 8002540:	2200      	movs	r2, #0
 8002542:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider       = SAI_MASTERDIVIDER_ENABLE;
 8002544:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <MX_SAI1_Init+0xc8>)
 8002546:	2200      	movs	r2, #0
 8002548:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold   = SAI_FIFOTHRESHOLD_EMPTY;
 800254a:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <MX_SAI1_Init+0xc8>)
 800254c:	2200      	movs	r2, #0
 800254e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency  = SAI_AUDIO_FREQUENCY_48K;
 8002550:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <MX_SAI1_Init+0xc8>)
 8002552:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002556:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt      = SAI_SYNCEXT_DISABLE;
 8002558:	4b25      	ldr	r3, [pc, #148]	; (80025f0 <MX_SAI1_Init+0xc8>)
 800255a:	2200      	movs	r2, #0
 800255c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode  = SAI_STEREOMODE;
 800255e:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <MX_SAI1_Init+0xc8>)
 8002560:	2200      	movs	r2, #0
 8002562:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode  = SAI_NOCOMPANDING;
 8002564:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <MX_SAI1_Init+0xc8>)
 8002566:	2200      	movs	r2, #0
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState        = SAI_OUTPUT_NOTRELEASED;
 800256a:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <MX_SAI1_Init+0xc8>)
 800256c:	2200      	movs	r2, #0
 800256e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.SlotInit.SlotActive  = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 8002570:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <MX_SAI1_Init+0xc8>)
 8002572:	2203      	movs	r2, #3
 8002574:	675a      	str	r2, [r3, #116]	; 0x74
  
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 8002576:	2308      	movs	r3, #8
 8002578:	2202      	movs	r2, #2
 800257a:	2101      	movs	r1, #1
 800257c:	481c      	ldr	r0, [pc, #112]	; (80025f0 <MX_SAI1_Init+0xc8>)
 800257e:	f009 fb3b 	bl	800bbf8 <HAL_SAI_InitProtocol>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_SAI1_Init+0x64>
  {
    Error_Handler();
 8002588:	f7ff f900 	bl	800178c <Error_Handler>
  }

  hsai_BlockB1.Instance             = SAI1_Block_B;
 800258c:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <MX_SAI1_Init+0xd0>)
 800258e:	4a1b      	ldr	r2, [pc, #108]	; (80025fc <MX_SAI1_Init+0xd4>)
 8002590:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode       = SAI_MODEMASTER_RX;
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <MX_SAI1_Init+0xd0>)
 8002594:	2201      	movs	r2, #1
 8002596:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro         = SAI_ASYNCHRONOUS;
 8002598:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <MX_SAI1_Init+0xd0>)
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive     = SAI_OUTPUTDRIVE_DISABLE;
 800259e:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <MX_SAI1_Init+0xd0>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider       = SAI_MASTERDIVIDER_ENABLE;
 80025a4:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <MX_SAI1_Init+0xd0>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold   = SAI_FIFOTHRESHOLD_EMPTY;
 80025aa:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <MX_SAI1_Init+0xd0>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency  = SAI_AUDIO_FREQUENCY_48K;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <MX_SAI1_Init+0xd0>)
 80025b2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80025b6:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt      = SAI_SYNCEXT_DISABLE;
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <MX_SAI1_Init+0xd0>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode  = SAI_STEREOMODE;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <MX_SAI1_Init+0xd0>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode  = SAI_NOCOMPANDING;
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <MX_SAI1_Init+0xd0>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState        = SAI_OUTPUT_NOTRELEASED;
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <MX_SAI1_Init+0xc8>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.SlotInit.SlotActive  = SAI_SLOTACTIVE_0 | SAI_SLOTACTIVE_1;
 80025d0:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <MX_SAI1_Init+0xc8>)
 80025d2:	2203      	movs	r2, #3
 80025d4:	675a      	str	r2, [r3, #116]	; 0x74
  
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_MSBJUSTIFIED, SAI_PROTOCOL_DATASIZE_24BIT, 8) != HAL_OK)
 80025d6:	2308      	movs	r3, #8
 80025d8:	2202      	movs	r2, #2
 80025da:	2101      	movs	r1, #1
 80025dc:	4806      	ldr	r0, [pc, #24]	; (80025f8 <MX_SAI1_Init+0xd0>)
 80025de:	f009 fb0b 	bl	800bbf8 <HAL_SAI_InitProtocol>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_SAI1_Init+0xc4>
  {
    Error_Handler();
 80025e8:	f7ff f8d0 	bl	800178c <Error_Handler>
  }
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	24000a18 	.word	0x24000a18
 80025f4:	40015804 	.word	0x40015804
 80025f8:	24000ab0 	.word	0x24000ab0
 80025fc:	40015824 	.word	0x40015824

08002600 <HAL_SAI_MspInit>:

static uint32_t SAI1_client = 0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	; 0x28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;

  /* SAI1 */
  if (saiHandle->Instance == SAI1_Block_A)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a80      	ldr	r2, [pc, #512]	; (8002810 <HAL_SAI_MspInit+0x210>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d179      	bne.n	8002706 <HAL_SAI_MspInit+0x106>
  {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8002612:	4b80      	ldr	r3, [pc, #512]	; (8002814 <HAL_SAI_MspInit+0x214>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10e      	bne.n	8002638 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800261a:	4b7f      	ldr	r3, [pc, #508]	; (8002818 <HAL_SAI_MspInit+0x218>)
 800261c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002620:	4a7d      	ldr	r2, [pc, #500]	; (8002818 <HAL_SAI_MspInit+0x218>)
 8002622:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002626:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800262a:	4b7b      	ldr	r3, [pc, #492]	; (8002818 <HAL_SAI_MspInit+0x218>)
 800262c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002638:	4b76      	ldr	r3, [pc, #472]	; (8002814 <HAL_SAI_MspInit+0x214>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3301      	adds	r3, #1
 800263e:	4a75      	ldr	r2, [pc, #468]	; (8002814 <HAL_SAI_MspInit+0x214>)
 8002640:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PC1     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8002642:	2334      	movs	r3, #52	; 0x34
 8002644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002652:	2306      	movs	r3, #6
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002656:	f107 0314 	add.w	r3, r7, #20
 800265a:	4619      	mov	r1, r3
 800265c:	486f      	ldr	r0, [pc, #444]	; (800281c <HAL_SAI_MspInit+0x21c>)
 800265e:	f005 fb93 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002662:	2302      	movs	r3, #2
 8002664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002672:	2306      	movs	r3, #6
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002676:	f107 0314 	add.w	r3, r7, #20
 800267a:	4619      	mov	r1, r3
 800267c:	4868      	ldr	r0, [pc, #416]	; (8002820 <HAL_SAI_MspInit+0x220>)
 800267e:	f005 fb83 	bl	8007d88 <HAL_GPIO_Init>
  
    /* Peripheral DMA init*/
    hdma_sai1_a.Instance                  = DMA1_Stream0;
 8002682:	4b68      	ldr	r3, [pc, #416]	; (8002824 <HAL_SAI_MspInit+0x224>)
 8002684:	4a68      	ldr	r2, [pc, #416]	; (8002828 <HAL_SAI_MspInit+0x228>)
 8002686:	601a      	str	r2, [r3, #0]
    hdma_sai1_a.Init.Request              = DMA_REQUEST_SAI1_A;
 8002688:	4b66      	ldr	r3, [pc, #408]	; (8002824 <HAL_SAI_MspInit+0x224>)
 800268a:	2257      	movs	r2, #87	; 0x57
 800268c:	605a      	str	r2, [r3, #4]
    hdma_sai1_a.Init.Direction            = DMA_MEMORY_TO_PERIPH;
 800268e:	4b65      	ldr	r3, [pc, #404]	; (8002824 <HAL_SAI_MspInit+0x224>)
 8002690:	2240      	movs	r2, #64	; 0x40
 8002692:	609a      	str	r2, [r3, #8]
    hdma_sai1_a.Init.PeriphInc            = DMA_PINC_DISABLE;
 8002694:	4b63      	ldr	r3, [pc, #396]	; (8002824 <HAL_SAI_MspInit+0x224>)
 8002696:	2200      	movs	r2, #0
 8002698:	60da      	str	r2, [r3, #12]
    hdma_sai1_a.Init.MemInc               = DMA_MINC_ENABLE;
 800269a:	4b62      	ldr	r3, [pc, #392]	; (8002824 <HAL_SAI_MspInit+0x224>)
 800269c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026a0:	611a      	str	r2, [r3, #16]
    hdma_sai1_a.Init.PeriphDataAlignment  = DMA_PDATAALIGN_WORD;
 80026a2:	4b60      	ldr	r3, [pc, #384]	; (8002824 <HAL_SAI_MspInit+0x224>)
 80026a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026a8:	615a      	str	r2, [r3, #20]
    hdma_sai1_a.Init.MemDataAlignment     = DMA_MDATAALIGN_WORD;
 80026aa:	4b5e      	ldr	r3, [pc, #376]	; (8002824 <HAL_SAI_MspInit+0x224>)
 80026ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026b0:	619a      	str	r2, [r3, #24]
    hdma_sai1_a.Init.Mode                 = DMA_CIRCULAR;
 80026b2:	4b5c      	ldr	r3, [pc, #368]	; (8002824 <HAL_SAI_MspInit+0x224>)
 80026b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b8:	61da      	str	r2, [r3, #28]
    hdma_sai1_a.Init.Priority             = DMA_PRIORITY_VERY_HIGH;
 80026ba:	4b5a      	ldr	r3, [pc, #360]	; (8002824 <HAL_SAI_MspInit+0x224>)
 80026bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80026c0:	621a      	str	r2, [r3, #32]
    hdma_sai1_a.Init.FIFOMode             = DMA_FIFOMODE_ENABLE;
 80026c2:	4b58      	ldr	r3, [pc, #352]	; (8002824 <HAL_SAI_MspInit+0x224>)
 80026c4:	2204      	movs	r2, #4
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold        = DMA_FIFO_THRESHOLD_FULL;
 80026c8:	4b56      	ldr	r3, [pc, #344]	; (8002824 <HAL_SAI_MspInit+0x224>)
 80026ca:	2203      	movs	r2, #3
 80026cc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst             = DMA_MBURST_SINGLE;
 80026ce:	4b55      	ldr	r3, [pc, #340]	; (8002824 <HAL_SAI_MspInit+0x224>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst          = DMA_PBURST_SINGLE;
 80026d4:	4b53      	ldr	r3, [pc, #332]	; (8002824 <HAL_SAI_MspInit+0x224>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80026da:	4852      	ldr	r0, [pc, #328]	; (8002824 <HAL_SAI_MspInit+0x224>)
 80026dc:	f002 fd0c 	bl	80050f8 <HAL_DMA_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_SAI_MspInit+0xea>
    {
      Error_Handler();
 80026e6:	f7ff f851 	bl	800178c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a4d      	ldr	r2, [pc, #308]	; (8002824 <HAL_SAI_MspInit+0x224>)
 80026ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80026f2:	4a4c      	ldr	r2, [pc, #304]	; (8002824 <HAL_SAI_MspInit+0x224>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a4a      	ldr	r2, [pc, #296]	; (8002824 <HAL_SAI_MspInit+0x224>)
 80026fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002700:	4a48      	ldr	r2, [pc, #288]	; (8002824 <HAL_SAI_MspInit+0x224>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6393      	str	r3, [r2, #56]	; 0x38
  }

  if (saiHandle->Instance == SAI1_Block_B)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a48      	ldr	r2, [pc, #288]	; (800282c <HAL_SAI_MspInit+0x22c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d17a      	bne.n	8002806 <HAL_SAI_MspInit+0x206>
  {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8002710:	4b40      	ldr	r3, [pc, #256]	; (8002814 <HAL_SAI_MspInit+0x214>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10e      	bne.n	8002736 <HAL_SAI_MspInit+0x136>
    {
     __HAL_RCC_SAI1_CLK_ENABLE();
 8002718:	4b3f      	ldr	r3, [pc, #252]	; (8002818 <HAL_SAI_MspInit+0x218>)
 800271a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800271e:	4a3e      	ldr	r2, [pc, #248]	; (8002818 <HAL_SAI_MspInit+0x218>)
 8002720:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002724:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002728:	4b3b      	ldr	r3, [pc, #236]	; (8002818 <HAL_SAI_MspInit+0x218>)
 800272a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800272e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8002736:	4b37      	ldr	r3, [pc, #220]	; (8002814 <HAL_SAI_MspInit+0x214>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3301      	adds	r3, #1
 800273c:	4a35      	ldr	r2, [pc, #212]	; (8002814 <HAL_SAI_MspInit+0x214>)
 800273e:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin       = GPIO_PIN_3;
 8002740:	2308      	movs	r3, #8
 8002742:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002750:	2306      	movs	r3, #6
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	4619      	mov	r1, r3
 800275a:	4830      	ldr	r0, [pc, #192]	; (800281c <HAL_SAI_MspInit+0x21c>)
 800275c:	f005 fb14 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin       = GPIO_PIN_8|GPIO_PIN_9;
 8002760:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002772:	2306      	movs	r3, #6
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	4619      	mov	r1, r3
 800277c:	482c      	ldr	r0, [pc, #176]	; (8002830 <HAL_SAI_MspInit+0x230>)
 800277e:	f005 fb03 	bl	8007d88 <HAL_GPIO_Init>

    // Peripheral DMA init
    hdma_sai1_b.Instance                  = DMA1_Stream1;
 8002782:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <HAL_SAI_MspInit+0x234>)
 8002784:	4a2c      	ldr	r2, [pc, #176]	; (8002838 <HAL_SAI_MspInit+0x238>)
 8002786:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Request              = DMA_REQUEST_SAI1_B;
 8002788:	4b2a      	ldr	r3, [pc, #168]	; (8002834 <HAL_SAI_MspInit+0x234>)
 800278a:	2258      	movs	r2, #88	; 0x58
 800278c:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction            = DMA_PERIPH_TO_MEMORY;
 800278e:	4b29      	ldr	r3, [pc, #164]	; (8002834 <HAL_SAI_MspInit+0x234>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc            = DMA_PINC_DISABLE;
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <HAL_SAI_MspInit+0x234>)
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc               = DMA_MINC_ENABLE;
 800279a:	4b26      	ldr	r3, [pc, #152]	; (8002834 <HAL_SAI_MspInit+0x234>)
 800279c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027a0:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment  = DMA_PDATAALIGN_WORD;
 80027a2:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_SAI_MspInit+0x234>)
 80027a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027a8:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment     = DMA_MDATAALIGN_WORD;
 80027aa:	4b22      	ldr	r3, [pc, #136]	; (8002834 <HAL_SAI_MspInit+0x234>)
 80027ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027b0:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode                 = DMA_CIRCULAR;
 80027b2:	4b20      	ldr	r3, [pc, #128]	; (8002834 <HAL_SAI_MspInit+0x234>)
 80027b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027b8:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority             = DMA_PRIORITY_MEDIUM;
 80027ba:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <HAL_SAI_MspInit+0x234>)
 80027bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80027c0:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode             = DMA_FIFOMODE_ENABLE;
 80027c2:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <HAL_SAI_MspInit+0x234>)
 80027c4:	2204      	movs	r2, #4
 80027c6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold        = DMA_FIFO_THRESHOLD_FULL;
 80027c8:	4b1a      	ldr	r3, [pc, #104]	; (8002834 <HAL_SAI_MspInit+0x234>)
 80027ca:	2203      	movs	r2, #3
 80027cc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst             = DMA_MBURST_SINGLE;
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_SAI_MspInit+0x234>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst          = DMA_PBURST_SINGLE;
 80027d4:	4b17      	ldr	r3, [pc, #92]	; (8002834 <HAL_SAI_MspInit+0x234>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80027da:	4816      	ldr	r0, [pc, #88]	; (8002834 <HAL_SAI_MspInit+0x234>)
 80027dc:	f002 fc8c 	bl	80050f8 <HAL_DMA_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_SAI_MspInit+0x1ea>
    {
      Error_Handler();
 80027e6:	f7fe ffd1 	bl	800178c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle, hdmarx, hdma_sai1_b);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a11      	ldr	r2, [pc, #68]	; (8002834 <HAL_SAI_MspInit+0x234>)
 80027ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80027f2:	4a10      	ldr	r2, [pc, #64]	; (8002834 <HAL_SAI_MspInit+0x234>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle, hdmatx, hdma_sai1_b);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <HAL_SAI_MspInit+0x234>)
 80027fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002800:	4a0c      	ldr	r2, [pc, #48]	; (8002834 <HAL_SAI_MspInit+0x234>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6393      	str	r3, [r2, #56]	; 0x38
  }
}
 8002806:	bf00      	nop
 8002808:	3728      	adds	r7, #40	; 0x28
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40015804 	.word	0x40015804
 8002814:	24000c38 	.word	0x24000c38
 8002818:	58024400 	.word	0x58024400
 800281c:	58021000 	.word	0x58021000
 8002820:	58020800 	.word	0x58020800
 8002824:	24000b48 	.word	0x24000b48
 8002828:	40020010 	.word	0x40020010
 800282c:	40015824 	.word	0x40015824
 8002830:	58021400 	.word	0x58021400
 8002834:	24000bc0 	.word	0x24000bc0
 8002838:	40020028 	.word	0x40020028

0800283c <MX_SPI1_Init>:

// ----------------------------------------------------------------------------
// SPI1 init function (ADC/DAC SPI)
// ----------------------------------------------------------------------------
void MX_SPI1_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance                        = SPI1;
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <MX_SPI1_Init+0xa4>)
 8002842:	4a28      	ldr	r2, [pc, #160]	; (80028e4 <MX_SPI1_Init+0xa8>)
 8002844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode                       = SPI_MODE_MASTER;
 8002846:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <MX_SPI1_Init+0xa4>)
 8002848:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800284c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction                  = SPI_DIRECTION_2LINES;
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <MX_SPI1_Init+0xa4>)
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize                   = SPI_DATASIZE_8BIT;
 8002854:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <MX_SPI1_Init+0xa4>)
 8002856:	2207      	movs	r2, #7
 8002858:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity                = SPI_POLARITY_LOW;
 800285a:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <MX_SPI1_Init+0xa4>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase                   = SPI_PHASE_1EDGE;
 8002860:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <MX_SPI1_Init+0xa4>)
 8002862:	2200      	movs	r2, #0
 8002864:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS                        = SPI_NSS_HARD_OUTPUT;
 8002866:	4b1e      	ldr	r3, [pc, #120]	; (80028e0 <MX_SPI1_Init+0xa4>)
 8002868:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800286c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler          = SPI_BAUDRATEPRESCALER_128;
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <MX_SPI1_Init+0xa4>)
 8002870:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002874:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit                   = SPI_FIRSTBIT_MSB;
 8002876:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <MX_SPI1_Init+0xa4>)
 8002878:	2200      	movs	r2, #0
 800287a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode                     = SPI_TIMODE_DISABLE;
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <MX_SPI1_Init+0xa4>)
 800287e:	2200      	movs	r2, #0
 8002880:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation             = SPI_CRCCALCULATION_DISABLE;
 8002882:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <MX_SPI1_Init+0xa4>)
 8002884:	2200      	movs	r2, #0
 8002886:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial              = 0x0;
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <MX_SPI1_Init+0xa4>)
 800288a:	2200      	movs	r2, #0
 800288c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode                   = SPI_NSS_PULSE_DISABLE;
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <MX_SPI1_Init+0xa4>)
 8002890:	2200      	movs	r2, #0
 8002892:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity                = SPI_NSS_POLARITY_LOW;
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <MX_SPI1_Init+0xa4>)
 8002896:	2200      	movs	r2, #0
 8002898:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold              = SPI_FIFO_THRESHOLD_01DATA;
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <MX_SPI1_Init+0xa4>)
 800289c:	2200      	movs	r2, #0
 800289e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <MX_SPI1_Init+0xa4>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80028a6:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <MX_SPI1_Init+0xa4>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness           = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80028ac:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <MX_SPI1_Init+0xa4>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness    = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <MX_SPI1_Init+0xa4>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp     = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <MX_SPI1_Init+0xa4>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState          = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <MX_SPI1_Init+0xa4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap                     = SPI_IO_SWAP_DISABLE;
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <MX_SPI1_Init+0xa4>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	659a      	str	r2, [r3, #88]	; 0x58

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028ca:	4805      	ldr	r0, [pc, #20]	; (80028e0 <MX_SPI1_Init+0xa4>)
 80028cc:	f00a f808 	bl	800c8e0 <HAL_SPI_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80028d6:	f7fe ff59 	bl	800178c <Error_Handler>
  }
  

}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	24000c3c 	.word	0x24000c3c
 80028e4:	40013000 	.word	0x40013000

080028e8 <MX_SPI4_Init>:

// ----------------------------------------------------------------------------
// SPI4 init function (LEDs SPI)
// ----------------------------------------------------------------------------
void MX_SPI4_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80028ec:	4b27      	ldr	r3, [pc, #156]	; (800298c <MX_SPI4_Init+0xa4>)
 80028ee:	4a28      	ldr	r2, [pc, #160]	; (8002990 <MX_SPI4_Init+0xa8>)
 80028f0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80028f2:	4b26      	ldr	r3, [pc, #152]	; (800298c <MX_SPI4_Init+0xa4>)
 80028f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80028f8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80028fa:	4b24      	ldr	r3, [pc, #144]	; (800298c <MX_SPI4_Init+0xa4>)
 80028fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002900:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8002902:	4b22      	ldr	r3, [pc, #136]	; (800298c <MX_SPI4_Init+0xa4>)
 8002904:	2207      	movs	r2, #7
 8002906:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002908:	4b20      	ldr	r3, [pc, #128]	; (800298c <MX_SPI4_Init+0xa4>)
 800290a:	2200      	movs	r2, #0
 800290c:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800290e:	4b1f      	ldr	r3, [pc, #124]	; (800298c <MX_SPI4_Init+0xa4>)
 8002910:	2200      	movs	r2, #0
 8002912:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <MX_SPI4_Init+0xa4>)
 8002916:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800291a:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800291c:	4b1b      	ldr	r3, [pc, #108]	; (800298c <MX_SPI4_Init+0xa4>)
 800291e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002922:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002924:	4b19      	ldr	r3, [pc, #100]	; (800298c <MX_SPI4_Init+0xa4>)
 8002926:	2200      	movs	r2, #0
 8002928:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <MX_SPI4_Init+0xa4>)
 800292c:	2200      	movs	r2, #0
 800292e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <MX_SPI4_Init+0xa4>)
 8002932:	2200      	movs	r2, #0
 8002934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <MX_SPI4_Init+0xa4>)
 8002938:	2200      	movs	r2, #0
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800293c:	4b13      	ldr	r3, [pc, #76]	; (800298c <MX_SPI4_Init+0xa4>)
 800293e:	2200      	movs	r2, #0
 8002940:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002942:	4b12      	ldr	r3, [pc, #72]	; (800298c <MX_SPI4_Init+0xa4>)
 8002944:	2200      	movs	r2, #0
 8002946:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002948:	4b10      	ldr	r3, [pc, #64]	; (800298c <MX_SPI4_Init+0xa4>)
 800294a:	2200      	movs	r2, #0
 800294c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <MX_SPI4_Init+0xa4>)
 8002950:	2200      	movs	r2, #0
 8002952:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002954:	4b0d      	ldr	r3, [pc, #52]	; (800298c <MX_SPI4_Init+0xa4>)
 8002956:	2200      	movs	r2, #0
 8002958:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800295a:	4b0c      	ldr	r3, [pc, #48]	; (800298c <MX_SPI4_Init+0xa4>)
 800295c:	2200      	movs	r2, #0
 800295e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <MX_SPI4_Init+0xa4>)
 8002962:	2200      	movs	r2, #0
 8002964:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <MX_SPI4_Init+0xa4>)
 8002968:	2200      	movs	r2, #0
 800296a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800296c:	4b07      	ldr	r3, [pc, #28]	; (800298c <MX_SPI4_Init+0xa4>)
 800296e:	2200      	movs	r2, #0
 8002970:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <MX_SPI4_Init+0xa4>)
 8002974:	2200      	movs	r2, #0
 8002976:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002978:	4804      	ldr	r0, [pc, #16]	; (800298c <MX_SPI4_Init+0xa4>)
 800297a:	f009 ffb1 	bl	800c8e0 <HAL_SPI_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8002984:	f7fe ff02 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002988:	bf00      	nop
 800298a:	bd80      	pop	{r7, pc}
 800298c:	24000cc4 	.word	0x24000cc4
 8002990:	40013400 	.word	0x40013400

08002994 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	; 0x30
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a44      	ldr	r2, [pc, #272]	; (8002ac4 <HAL_SPI_MspInit+0x130>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d14e      	bne.n	8002a54 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029b6:	4b44      	ldr	r3, [pc, #272]	; (8002ac8 <HAL_SPI_MspInit+0x134>)
 80029b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029bc:	4a42      	ldr	r2, [pc, #264]	; (8002ac8 <HAL_SPI_MspInit+0x134>)
 80029be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80029c6:	4b40      	ldr	r3, [pc, #256]	; (8002ac8 <HAL_SPI_MspInit+0x134>)
 80029c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d4:	4b3c      	ldr	r3, [pc, #240]	; (8002ac8 <HAL_SPI_MspInit+0x134>)
 80029d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029da:	4a3b      	ldr	r2, [pc, #236]	; (8002ac8 <HAL_SPI_MspInit+0x134>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e4:	4b38      	ldr	r3, [pc, #224]	; (8002ac8 <HAL_SPI_MspInit+0x134>)
 80029e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80029f2:	4b35      	ldr	r3, [pc, #212]	; (8002ac8 <HAL_SPI_MspInit+0x134>)
 80029f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f8:	4a33      	ldr	r2, [pc, #204]	; (8002ac8 <HAL_SPI_MspInit+0x134>)
 80029fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a02:	4b31      	ldr	r3, [pc, #196]	; (8002ac8 <HAL_SPI_MspInit+0x134>)
 8002a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	693b      	ldr	r3, [r7, #16]
    PA7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG10     ------> SPI1_NSS
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = AUDIO_SPI_MOSI_Pin;
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a20:	2305      	movs	r3, #5
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(AUDIO_SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002a24:	f107 031c 	add.w	r3, r7, #28
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4828      	ldr	r0, [pc, #160]	; (8002acc <HAL_SPI_MspInit+0x138>)
 8002a2c:	f005 f9ac 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = audio_SPI_MISO_Pin|audio_SPI_MS_Pin|audio_SPI_MCLK_Pin;
 8002a30:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a36:	2302      	movs	r3, #2
 8002a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a42:	2305      	movs	r3, #5
 8002a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a46:	f107 031c 	add.w	r3, r7, #28
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4820      	ldr	r0, [pc, #128]	; (8002ad0 <HAL_SPI_MspInit+0x13c>)
 8002a4e:	f005 f99b 	bl	8007d88 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002a52:	e033      	b.n	8002abc <HAL_SPI_MspInit+0x128>
  else if(spiHandle->Instance==SPI4)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <HAL_SPI_MspInit+0x140>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d12e      	bne.n	8002abc <HAL_SPI_MspInit+0x128>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002a5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ac8 <HAL_SPI_MspInit+0x134>)
 8002a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a64:	4a18      	ldr	r2, [pc, #96]	; (8002ac8 <HAL_SPI_MspInit+0x134>)
 8002a66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a6e:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <HAL_SPI_MspInit+0x134>)
 8002a70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a7c:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_SPI_MspInit+0x134>)
 8002a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a82:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <HAL_SPI_MspInit+0x134>)
 8002a84:	f043 0310 	orr.w	r3, r3, #16
 8002a88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a8c:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <HAL_SPI_MspInit+0x134>)
 8002a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LED_SPI_MOSI_Pin|LED_SPI_CLK_Pin;
 8002a9a:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002aac:	2305      	movs	r3, #5
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ab0:	f107 031c 	add.w	r3, r7, #28
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4808      	ldr	r0, [pc, #32]	; (8002ad8 <HAL_SPI_MspInit+0x144>)
 8002ab8:	f005 f966 	bl	8007d88 <HAL_GPIO_Init>
}
 8002abc:	bf00      	nop
 8002abe:	3730      	adds	r7, #48	; 0x30
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40013000 	.word	0x40013000
 8002ac8:	58024400 	.word	0x58024400
 8002acc:	58020000 	.word	0x58020000
 8002ad0:	58021800 	.word	0x58021800
 8002ad4:	40013400 	.word	0x40013400
 8002ad8:	58021000 	.word	0x58021000

08002adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <HAL_MspInit+0x30>)
 8002ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ae8:	4a08      	ldr	r2, [pc, #32]	; (8002b0c <HAL_MspInit+0x30>)
 8002aea:	f043 0302 	orr.w	r3, r3, #2
 8002aee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_MspInit+0x30>)
 8002af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	607b      	str	r3, [r7, #4]
 8002afe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	58024400 	.word	0x58024400

08002b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b14:	e7fe      	b.n	8002b14 <NMI_Handler+0x4>

08002b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b1a:	e7fe      	b.n	8002b1a <HardFault_Handler+0x4>

08002b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b20:	e7fe      	b.n	8002b20 <MemManage_Handler+0x4>

08002b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b26:	e7fe      	b.n	8002b26 <BusFault_Handler+0x4>

08002b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b2c:	e7fe      	b.n	8002b2c <UsageFault_Handler+0x4>

08002b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b32:	bf00      	nop
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b5c:	f000 fbf0 	bl	8003340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002b68:	4802      	ldr	r0, [pc, #8]	; (8002b74 <DMA1_Stream0_IRQHandler+0x10>)
 8002b6a:	f003 fdef 	bl	800674c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	24000b48 	.word	0x24000b48

08002b78 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <DMA1_Stream1_IRQHandler+0x10>)
 8002b7e:	f003 fde5 	bl	800674c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	24000bc0 	.word	0x24000bc0

08002b8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <TIM2_IRQHandler+0x10>)
 8002b92:	f00b f811 	bl	800dbb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	24000d50 	.word	0x24000d50

08002ba0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <UART4_IRQHandler+0x10>)
 8002ba6:	f00c f977 	bl	800ee98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	24000d9c 	.word	0x24000d9c

08002bb4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002bb8:	4802      	ldr	r0, [pc, #8]	; (8002bc4 <UART5_IRQHandler+0x10>)
 8002bba:	f00c f96d 	bl	800ee98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	24000e2c 	.word	0x24000e2c

08002bc8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002bcc:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <ADC3_IRQHandler+0x10>)
 8002bce:	f001 f929 	bl	8003e24 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	24000490 	.word	0x24000490

08002bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002be4:	4a14      	ldr	r2, [pc, #80]	; (8002c38 <_sbrk+0x5c>)
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <_sbrk+0x60>)
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bf0:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <_sbrk+0x64>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d102      	bne.n	8002bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <_sbrk+0x64>)
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <_sbrk+0x68>)
 8002bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <_sbrk+0x64>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4413      	add	r3, r2
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d207      	bcs.n	8002c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c0c:	f00e fd9c 	bl	8011748 <__errno>
 8002c10:	4603      	mov	r3, r0
 8002c12:	220c      	movs	r2, #12
 8002c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c16:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1a:	e009      	b.n	8002c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c1c:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <_sbrk+0x64>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c22:	4b07      	ldr	r3, [pc, #28]	; (8002c40 <_sbrk+0x64>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <_sbrk+0x64>)
 8002c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	24080000 	.word	0x24080000
 8002c3c:	00000400 	.word	0x00000400
 8002c40:	24000d4c 	.word	0x24000d4c
 8002c44:	240011d8 	.word	0x240011d8

08002c48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c4c:	4b39      	ldr	r3, [pc, #228]	; (8002d34 <SystemInit+0xec>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c52:	4a38      	ldr	r2, [pc, #224]	; (8002d34 <SystemInit+0xec>)
 8002c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c5c:	4b36      	ldr	r3, [pc, #216]	; (8002d38 <SystemInit+0xf0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	2b06      	cmp	r3, #6
 8002c66:	d807      	bhi.n	8002c78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c68:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <SystemInit+0xf0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f023 030f 	bic.w	r3, r3, #15
 8002c70:	4a31      	ldr	r2, [pc, #196]	; (8002d38 <SystemInit+0xf0>)
 8002c72:	f043 0307 	orr.w	r3, r3, #7
 8002c76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002c78:	4b30      	ldr	r3, [pc, #192]	; (8002d3c <SystemInit+0xf4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <SystemInit+0xf4>)
 8002c7e:	f043 0301 	orr.w	r3, r3, #1
 8002c82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c84:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <SystemInit+0xf4>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c8a:	4b2c      	ldr	r3, [pc, #176]	; (8002d3c <SystemInit+0xf4>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	492b      	ldr	r1, [pc, #172]	; (8002d3c <SystemInit+0xf4>)
 8002c90:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <SystemInit+0xf8>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c96:	4b28      	ldr	r3, [pc, #160]	; (8002d38 <SystemInit+0xf0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ca2:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <SystemInit+0xf0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 030f 	bic.w	r3, r3, #15
 8002caa:	4a23      	ldr	r2, [pc, #140]	; (8002d38 <SystemInit+0xf0>)
 8002cac:	f043 0307 	orr.w	r3, r3, #7
 8002cb0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002cb2:	4b22      	ldr	r3, [pc, #136]	; (8002d3c <SystemInit+0xf4>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002cb8:	4b20      	ldr	r3, [pc, #128]	; (8002d3c <SystemInit+0xf4>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002cbe:	4b1f      	ldr	r3, [pc, #124]	; (8002d3c <SystemInit+0xf4>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <SystemInit+0xf4>)
 8002cc6:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <SystemInit+0xfc>)
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <SystemInit+0xf4>)
 8002ccc:	4a1e      	ldr	r2, [pc, #120]	; (8002d48 <SystemInit+0x100>)
 8002cce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <SystemInit+0xf4>)
 8002cd2:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <SystemInit+0x104>)
 8002cd4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002cd6:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <SystemInit+0xf4>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002cdc:	4b17      	ldr	r3, [pc, #92]	; (8002d3c <SystemInit+0xf4>)
 8002cde:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <SystemInit+0x104>)
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ce2:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <SystemInit+0xf4>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <SystemInit+0xf4>)
 8002cea:	4a18      	ldr	r2, [pc, #96]	; (8002d4c <SystemInit+0x104>)
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002cee:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <SystemInit+0xf4>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <SystemInit+0xf4>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a10      	ldr	r2, [pc, #64]	; (8002d3c <SystemInit+0xf4>)
 8002cfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d00:	4b0e      	ldr	r3, [pc, #56]	; (8002d3c <SystemInit+0xf4>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002d06:	4b12      	ldr	r3, [pc, #72]	; (8002d50 <SystemInit+0x108>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <SystemInit+0x10c>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d12:	d202      	bcs.n	8002d1a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <SystemInit+0x110>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002d1a:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <SystemInit+0x114>)
 8002d1c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002d20:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d22:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <SystemInit+0xec>)
 8002d24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d28:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002d2a:	bf00      	nop
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000ed00 	.word	0xe000ed00
 8002d38:	52002000 	.word	0x52002000
 8002d3c:	58024400 	.word	0x58024400
 8002d40:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d44:	02020200 	.word	0x02020200
 8002d48:	01ff0000 	.word	0x01ff0000
 8002d4c:	01010280 	.word	0x01010280
 8002d50:	5c001000 	.word	0x5c001000
 8002d54:	ffff0000 	.word	0xffff0000
 8002d58:	51008108 	.word	0x51008108
 8002d5c:	52004000 	.word	0x52004000

08002d60 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08e      	sub	sp, #56	; 0x38
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	609a      	str	r2, [r3, #8]
 8002d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d74:	f107 031c 	add.w	r3, r7, #28
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d80:	463b      	mov	r3, r7
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	605a      	str	r2, [r3, #4]
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	60da      	str	r2, [r3, #12]
 8002d8c:	611a      	str	r2, [r3, #16]
 8002d8e:	615a      	str	r2, [r3, #20]
 8002d90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d92:	4b2c      	ldr	r3, [pc, #176]	; (8002e44 <MX_TIM2_Init+0xe4>)
 8002d94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 8002d9a:	4b2a      	ldr	r3, [pc, #168]	; (8002e44 <MX_TIM2_Init+0xe4>)
 8002d9c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002da0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da2:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <MX_TIM2_Init+0xe4>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 58593;
 8002da8:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <MX_TIM2_Init+0xe4>)
 8002daa:	f24e 42e1 	movw	r2, #58593	; 0xe4e1
 8002dae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db0:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <MX_TIM2_Init+0xe4>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db6:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <MX_TIM2_Init+0xe4>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dbc:	4821      	ldr	r0, [pc, #132]	; (8002e44 <MX_TIM2_Init+0xe4>)
 8002dbe:	f00a fd34 	bl	800d82a <HAL_TIM_Base_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002dc8:	f7fe fce0 	bl	800178c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	481a      	ldr	r0, [pc, #104]	; (8002e44 <MX_TIM2_Init+0xe4>)
 8002dda:	f00b f921 	bl	800e020 <HAL_TIM_ConfigClockSource>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8002de4:	f7fe fcd2 	bl	800178c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002de8:	4816      	ldr	r0, [pc, #88]	; (8002e44 <MX_TIM2_Init+0xe4>)
 8002dea:	f00a fd75 	bl	800d8d8 <HAL_TIM_PWM_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002df4:	f7fe fcca 	bl	800178c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002df8:	2320      	movs	r3, #32
 8002dfa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e00:	f107 031c 	add.w	r3, r7, #28
 8002e04:	4619      	mov	r1, r3
 8002e06:	480f      	ldr	r0, [pc, #60]	; (8002e44 <MX_TIM2_Init+0xe4>)
 8002e08:	f00b fe5e 	bl	800eac8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002e12:	f7fe fcbb 	bl	800178c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e16:	2360      	movs	r3, #96	; 0x60
 8002e18:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e26:	463b      	mov	r3, r7
 8002e28:	2200      	movs	r2, #0
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4805      	ldr	r0, [pc, #20]	; (8002e44 <MX_TIM2_Init+0xe4>)
 8002e2e:	f00a ffe3 	bl	800ddf8 <HAL_TIM_PWM_ConfigChannel>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002e38:	f7fe fca8 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e3c:	bf00      	nop
 8002e3e:	3738      	adds	r7, #56	; 0x38
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	24000d50 	.word	0x24000d50

08002e48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e58:	d116      	bne.n	8002e88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <HAL_TIM_Base_MspInit+0x48>)
 8002e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e60:	4a0b      	ldr	r2, [pc, #44]	; (8002e90 <HAL_TIM_Base_MspInit+0x48>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_TIM_Base_MspInit+0x48>)
 8002e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	201c      	movs	r0, #28
 8002e7e:	f002 f906 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e82:	201c      	movs	r0, #28
 8002e84:	f002 f91d 	bl	80050c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	58024400 	.word	0x58024400

08002e94 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart5;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002e98:	4b23      	ldr	r3, [pc, #140]	; (8002f28 <MX_UART4_Init+0x94>)
 8002e9a:	4a24      	ldr	r2, [pc, #144]	; (8002f2c <MX_UART4_Init+0x98>)
 8002e9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002e9e:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <MX_UART4_Init+0x94>)
 8002ea0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ea4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <MX_UART4_Init+0x94>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002eac:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <MX_UART4_Init+0x94>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <MX_UART4_Init+0x94>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002eb8:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <MX_UART4_Init+0x94>)
 8002eba:	220c      	movs	r2, #12
 8002ebc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <MX_UART4_Init+0x94>)
 8002ec0:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002ec4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <MX_UART4_Init+0x94>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ecc:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <MX_UART4_Init+0x94>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <MX_UART4_Init+0x94>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ed8:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <MX_UART4_Init+0x94>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ede:	4812      	ldr	r0, [pc, #72]	; (8002f28 <MX_UART4_Init+0x94>)
 8002ee0:	f00b fe9e 	bl	800ec20 <HAL_UART_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 8002eea:	f7fe fc4f 	bl	800178c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eee:	2100      	movs	r1, #0
 8002ef0:	480d      	ldr	r0, [pc, #52]	; (8002f28 <MX_UART4_Init+0x94>)
 8002ef2:	f00e f932 	bl	801115a <HAL_UARTEx_SetTxFifoThreshold>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <MX_UART4_Init+0x6c>
  {
    Error_Handler();
 8002efc:	f7fe fc46 	bl	800178c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f00:	2100      	movs	r1, #0
 8002f02:	4809      	ldr	r0, [pc, #36]	; (8002f28 <MX_UART4_Init+0x94>)
 8002f04:	f00e f967 	bl	80111d6 <HAL_UARTEx_SetRxFifoThreshold>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8002f0e:	f7fe fc3d 	bl	800178c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002f12:	4805      	ldr	r0, [pc, #20]	; (8002f28 <MX_UART4_Init+0x94>)
 8002f14:	f00e f8e8 	bl	80110e8 <HAL_UARTEx_DisableFifoMode>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 8002f1e:	f7fe fc35 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	24000d9c 	.word	0x24000d9c
 8002f2c:	40004c00 	.word	0x40004c00

08002f30 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002f34:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <MX_UART5_Init+0x90>)
 8002f36:	4a23      	ldr	r2, [pc, #140]	; (8002fc4 <MX_UART5_Init+0x94>)
 8002f38:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 31250;
 8002f3a:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <MX_UART5_Init+0x90>)
 8002f3c:	f647 2212 	movw	r2, #31250	; 0x7a12
 8002f40:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002f42:	4b1f      	ldr	r3, [pc, #124]	; (8002fc0 <MX_UART5_Init+0x90>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <MX_UART5_Init+0x90>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002f4e:	4b1c      	ldr	r3, [pc, #112]	; (8002fc0 <MX_UART5_Init+0x90>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002f54:	4b1a      	ldr	r3, [pc, #104]	; (8002fc0 <MX_UART5_Init+0x90>)
 8002f56:	220c      	movs	r2, #12
 8002f58:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f5a:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <MX_UART5_Init+0x90>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f60:	4b17      	ldr	r3, [pc, #92]	; (8002fc0 <MX_UART5_Init+0x90>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f66:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <MX_UART5_Init+0x90>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f6c:	4b14      	ldr	r3, [pc, #80]	; (8002fc0 <MX_UART5_Init+0x90>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f72:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <MX_UART5_Init+0x90>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002f78:	4811      	ldr	r0, [pc, #68]	; (8002fc0 <MX_UART5_Init+0x90>)
 8002f7a:	f00b fe51 	bl	800ec20 <HAL_UART_Init>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002f84:	f7fe fc02 	bl	800178c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f88:	2100      	movs	r1, #0
 8002f8a:	480d      	ldr	r0, [pc, #52]	; (8002fc0 <MX_UART5_Init+0x90>)
 8002f8c:	f00e f8e5 	bl	801115a <HAL_UARTEx_SetTxFifoThreshold>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002f96:	f7fe fbf9 	bl	800178c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4808      	ldr	r0, [pc, #32]	; (8002fc0 <MX_UART5_Init+0x90>)
 8002f9e:	f00e f91a 	bl	80111d6 <HAL_UARTEx_SetRxFifoThreshold>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002fa8:	f7fe fbf0 	bl	800178c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002fac:	4804      	ldr	r0, [pc, #16]	; (8002fc0 <MX_UART5_Init+0x90>)
 8002fae:	f00e f89b 	bl	80110e8 <HAL_UARTEx_DisableFifoMode>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002fb8:	f7fe fbe8 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002fbc:	bf00      	nop
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	24000e2c 	.word	0x24000e2c
 8002fc4:	40005000 	.word	0x40005000

08002fc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08c      	sub	sp, #48	; 0x30
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd0:	f107 031c 	add.w	r3, r7, #28
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a4c      	ldr	r2, [pc, #304]	; (8003118 <HAL_UART_MspInit+0x150>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d156      	bne.n	8003098 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002fea:	4b4c      	ldr	r3, [pc, #304]	; (800311c <HAL_UART_MspInit+0x154>)
 8002fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ff0:	4a4a      	ldr	r2, [pc, #296]	; (800311c <HAL_UART_MspInit+0x154>)
 8002ff2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ff6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ffa:	4b48      	ldr	r3, [pc, #288]	; (800311c <HAL_UART_MspInit+0x154>)
 8002ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003000:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003004:	61bb      	str	r3, [r7, #24]
 8003006:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003008:	4b44      	ldr	r3, [pc, #272]	; (800311c <HAL_UART_MspInit+0x154>)
 800300a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800300e:	4a43      	ldr	r2, [pc, #268]	; (800311c <HAL_UART_MspInit+0x154>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003018:	4b40      	ldr	r3, [pc, #256]	; (800311c <HAL_UART_MspInit+0x154>)
 800301a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	617b      	str	r3, [r7, #20]
 8003024:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003026:	4b3d      	ldr	r3, [pc, #244]	; (800311c <HAL_UART_MspInit+0x154>)
 8003028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800302c:	4a3b      	ldr	r2, [pc, #236]	; (800311c <HAL_UART_MspInit+0x154>)
 800302e:	f043 0302 	orr.w	r3, r3, #2
 8003032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003036:	4b39      	ldr	r3, [pc, #228]	; (800311c <HAL_UART_MspInit+0x154>)
 8003038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	693b      	ldr	r3, [r7, #16]
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    PB14     ------> UART4_RTS
    PB15     ------> UART4_CTS
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003044:	2303      	movs	r3, #3
 8003046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003048:	2302      	movs	r3, #2
 800304a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003050:	2300      	movs	r3, #0
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003054:	2308      	movs	r3, #8
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003058:	f107 031c 	add.w	r3, r7, #28
 800305c:	4619      	mov	r1, r3
 800305e:	4830      	ldr	r0, [pc, #192]	; (8003120 <HAL_UART_MspInit+0x158>)
 8003060:	f004 fe92 	bl	8007d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_RTS_Pin|UART_CTS_Pin;
 8003064:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306a:	2302      	movs	r3, #2
 800306c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306e:	2300      	movs	r3, #0
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003072:	2300      	movs	r3, #0
 8003074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003076:	2308      	movs	r3, #8
 8003078:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800307a:	f107 031c 	add.w	r3, r7, #28
 800307e:	4619      	mov	r1, r3
 8003080:	4828      	ldr	r0, [pc, #160]	; (8003124 <HAL_UART_MspInit+0x15c>)
 8003082:	f004 fe81 	bl	8007d88 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003086:	2200      	movs	r2, #0
 8003088:	2100      	movs	r1, #0
 800308a:	2034      	movs	r0, #52	; 0x34
 800308c:	f001 ffff 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003090:	2034      	movs	r0, #52	; 0x34
 8003092:	f002 f816 	bl	80050c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8003096:	e03b      	b.n	8003110 <HAL_UART_MspInit+0x148>
  else if(uartHandle->Instance==UART5)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a22      	ldr	r2, [pc, #136]	; (8003128 <HAL_UART_MspInit+0x160>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d136      	bne.n	8003110 <HAL_UART_MspInit+0x148>
    __HAL_RCC_UART5_CLK_ENABLE();
 80030a2:	4b1e      	ldr	r3, [pc, #120]	; (800311c <HAL_UART_MspInit+0x154>)
 80030a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030a8:	4a1c      	ldr	r2, [pc, #112]	; (800311c <HAL_UART_MspInit+0x154>)
 80030aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030b2:	4b1a      	ldr	r3, [pc, #104]	; (800311c <HAL_UART_MspInit+0x154>)
 80030b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <HAL_UART_MspInit+0x154>)
 80030c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c6:	4a15      	ldr	r2, [pc, #84]	; (800311c <HAL_UART_MspInit+0x154>)
 80030c8:	f043 0302 	orr.w	r3, r3, #2
 80030cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030d0:	4b12      	ldr	r3, [pc, #72]	; (800311c <HAL_UART_MspInit+0x154>)
 80030d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	60bb      	str	r3, [r7, #8]
 80030dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MIDI_in_Pin|MIDI_out_Pin;
 80030de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80030e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	2302      	movs	r3, #2
 80030e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ec:	2300      	movs	r3, #0
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80030f0:	230e      	movs	r3, #14
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f4:	f107 031c 	add.w	r3, r7, #28
 80030f8:	4619      	mov	r1, r3
 80030fa:	480a      	ldr	r0, [pc, #40]	; (8003124 <HAL_UART_MspInit+0x15c>)
 80030fc:	f004 fe44 	bl	8007d88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003100:	2200      	movs	r2, #0
 8003102:	2100      	movs	r1, #0
 8003104:	2035      	movs	r0, #53	; 0x35
 8003106:	f001 ffc2 	bl	800508e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800310a:	2035      	movs	r0, #53	; 0x35
 800310c:	f001 ffd9 	bl	80050c2 <HAL_NVIC_EnableIRQ>
}
 8003110:	bf00      	nop
 8003112:	3730      	adds	r7, #48	; 0x30
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40004c00 	.word	0x40004c00
 800311c:	58024400 	.word	0x58024400
 8003120:	58020000 	.word	0x58020000
 8003124:	58020400 	.word	0x58020400
 8003128:	40005000 	.word	0x40005000

0800312c <MX_USB_OTG_FS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_HCD_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003130:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8003132:	4a0e      	ldr	r2, [pc, #56]	; (800316c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8003134:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 16;
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8003138:	2210      	movs	r2, #16
 800313a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800313c:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 800313e:	2201      	movs	r2, #1
 8003140:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8003144:	2200      	movs	r2, #0
 8003146:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8003148:	4b07      	ldr	r3, [pc, #28]	; (8003168 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 800314a:	2202      	movs	r2, #2
 800314c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8003150:	2200      	movs	r2, #0
 8003152:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8003154:	4804      	ldr	r0, [pc, #16]	; (8003168 <MX_USB_OTG_FS_HCD_Init+0x3c>)
 8003156:	f004 fffa 	bl	800814e <HAL_HCD_Init>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_USB_OTG_FS_HCD_Init+0x38>
  {
    Error_Handler();
 8003160:	f7fe fb14 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003164:	bf00      	nop
 8003166:	bd80      	pop	{r7, pc}
 8003168:	24000ebc 	.word	0x24000ebc
 800316c:	40080000 	.word	0x40080000

08003170 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	; 0x28
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 0314 	add.w	r3, r7, #20
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <HAL_HCD_MspInit+0x8c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d130      	bne.n	80031f4 <HAL_HCD_MspInit+0x84>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003192:	f005 fb21 	bl	80087d8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <HAL_HCD_MspInit+0x90>)
 8003198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800319c:	4a18      	ldr	r2, [pc, #96]	; (8003200 <HAL_HCD_MspInit+0x90>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a6:	4b16      	ldr	r3, [pc, #88]	; (8003200 <HAL_HCD_MspInit+0x90>)
 80031a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80031b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80031b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c2:	2300      	movs	r3, #0
 80031c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80031c6:	230a      	movs	r3, #10
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ca:	f107 0314 	add.w	r3, r7, #20
 80031ce:	4619      	mov	r1, r3
 80031d0:	480c      	ldr	r0, [pc, #48]	; (8003204 <HAL_HCD_MspInit+0x94>)
 80031d2:	f004 fdd9 	bl	8007d88 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <HAL_HCD_MspInit+0x90>)
 80031d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031dc:	4a08      	ldr	r2, [pc, #32]	; (8003200 <HAL_HCD_MspInit+0x90>)
 80031de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80031e6:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_HCD_MspInit+0x90>)
 80031e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80031f4:	bf00      	nop
 80031f6:	3728      	adds	r7, #40	; 0x28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40080000 	.word	0x40080000
 8003200:	58024400 	.word	0x58024400
 8003204:	58020000 	.word	0x58020000

08003208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003240 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800320c:	f7ff fd1c 	bl	8002c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003210:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003212:	e003      	b.n	800321c <LoopCopyDataInit>

08003214 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003216:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003218:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800321a:	3104      	adds	r1, #4

0800321c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800321c:	480a      	ldr	r0, [pc, #40]	; (8003248 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003220:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003222:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003224:	d3f6      	bcc.n	8003214 <CopyDataInit>
  ldr  r2, =_sbss
 8003226:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003228:	e002      	b.n	8003230 <LoopFillZerobss>

0800322a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800322a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800322c:	f842 3b04 	str.w	r3, [r2], #4

08003230 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003230:	4b08      	ldr	r3, [pc, #32]	; (8003254 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003232:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003234:	d3f9      	bcc.n	800322a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003236:	f00e fa8d 	bl	8011754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800323a:	f7fd fe2b 	bl	8000e94 <main>
  bx  lr    
 800323e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003240:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8003244:	0801245c 	.word	0x0801245c
  ldr  r0, =_sdata
 8003248:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800324c:	24000474 	.word	0x24000474
  ldr  r2, =_sbss
 8003250:	24000474 	.word	0x24000474
  ldr  r3, = _ebss
 8003254:	240011d4 	.word	0x240011d4

08003258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003258:	e7fe      	b.n	8003258 <ADC_IRQHandler>
	...

0800325c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003262:	2003      	movs	r0, #3
 8003264:	f001 ff08 	bl	8005078 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003268:	f006 f964 	bl	8009534 <HAL_RCC_GetSysClockFreq>
 800326c:	4602      	mov	r2, r0
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <HAL_Init+0x68>)
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	0a1b      	lsrs	r3, r3, #8
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	4913      	ldr	r1, [pc, #76]	; (80032c8 <HAL_Init+0x6c>)
 800327a:	5ccb      	ldrb	r3, [r1, r3]
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
 8003284:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <HAL_Init+0x68>)
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <HAL_Init+0x6c>)
 8003290:	5cd3      	ldrb	r3, [r2, r3]
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
 800329c:	4a0b      	ldr	r2, [pc, #44]	; (80032cc <HAL_Init+0x70>)
 800329e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032a0:	4a0b      	ldr	r2, [pc, #44]	; (80032d0 <HAL_Init+0x74>)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032a6:	2000      	movs	r0, #0
 80032a8:	f000 f814 	bl	80032d4 <HAL_InitTick>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e002      	b.n	80032bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80032b6:	f7ff fc11 	bl	8002adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	58024400 	.word	0x58024400
 80032c8:	080123d8 	.word	0x080123d8
 80032cc:	24000404 	.word	0x24000404
 80032d0:	24000400 	.word	0x24000400

080032d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80032dc:	4b15      	ldr	r3, [pc, #84]	; (8003334 <HAL_InitTick+0x60>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e021      	b.n	800332c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80032e8:	4b13      	ldr	r3, [pc, #76]	; (8003338 <HAL_InitTick+0x64>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <HAL_InitTick+0x60>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 feed 	bl	80050de <HAL_SYSTICK_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e00e      	b.n	800332c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b0f      	cmp	r3, #15
 8003312:	d80a      	bhi.n	800332a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003314:	2200      	movs	r2, #0
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	f04f 30ff 	mov.w	r0, #4294967295
 800331c:	f001 feb7 	bl	800508e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003320:	4a06      	ldr	r2, [pc, #24]	; (800333c <HAL_InitTick+0x68>)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
}
 800332c:	4618      	mov	r0, r3
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	2400040c 	.word	0x2400040c
 8003338:	24000400 	.word	0x24000400
 800333c:	24000408 	.word	0x24000408

08003340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_IncTick+0x20>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4b06      	ldr	r3, [pc, #24]	; (8003364 <HAL_IncTick+0x24>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4413      	add	r3, r2
 8003350:	4a04      	ldr	r2, [pc, #16]	; (8003364 <HAL_IncTick+0x24>)
 8003352:	6013      	str	r3, [r2, #0]
}
 8003354:	bf00      	nop
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	2400040c 	.word	0x2400040c
 8003364:	240011c0 	.word	0x240011c0

08003368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return uwTick;
 800336c:	4b03      	ldr	r3, [pc, #12]	; (800337c <HAL_GetTick+0x14>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	240011c0 	.word	0x240011c0

08003380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003388:	f7ff ffee 	bl	8003368 <HAL_GetTick>
 800338c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003398:	d005      	beq.n	80033a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <HAL_Delay+0x44>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033a6:	bf00      	nop
 80033a8:	f7ff ffde 	bl	8003368 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d8f7      	bhi.n	80033a8 <HAL_Delay+0x28>
  {
  }
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	2400040c 	.word	0x2400040c

080033c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <HAL_GetREVID+0x14>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	0c1b      	lsrs	r3, r3, #16
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	5c001000 	.word	0x5c001000

080033e0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80033ea:	4b07      	ldr	r3, [pc, #28]	; (8003408 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	401a      	ands	r2, r3
 80033f4:	4904      	ldr	r1, [pc, #16]	; (8003408 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	604b      	str	r3, [r1, #4]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	58000400 	.word	0x58000400

0800340c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	431a      	orrs	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	609a      	str	r2, [r3, #8]
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
 800343a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	609a      	str	r2, [r3, #8]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003468:	4618      	mov	r0, r3
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	3360      	adds	r3, #96	; 0x60
 8003486:	461a      	mov	r2, r3
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	430b      	orrs	r3, r1
 80034a2:	431a      	orrs	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80034a8:	bf00      	nop
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	f003 031f 	and.w	r3, r3, #31
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	fa01 f303 	lsl.w	r3, r1, r3
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	611a      	str	r2, [r3, #16]
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b087      	sub	sp, #28
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3360      	adds	r3, #96	; 0x60
 80034f6:	461a      	mov	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	431a      	orrs	r2, r3
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	601a      	str	r2, [r3, #0]
  }
}
 8003510:	bf00      	nop
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800352c:	2b00      	cmp	r3, #0
 800352e:	d101      	bne.n	8003534 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003542:	b480      	push	{r7}
 8003544:	b087      	sub	sp, #28
 8003546:	af00      	add	r7, sp, #0
 8003548:	60f8      	str	r0, [r7, #12]
 800354a:	60b9      	str	r1, [r7, #8]
 800354c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3330      	adds	r3, #48	; 0x30
 8003552:	461a      	mov	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	4413      	add	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	211f      	movs	r1, #31
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	401a      	ands	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0e9b      	lsrs	r3, r3, #26
 800357a:	f003 011f 	and.w	r1, r3, #31
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	fa01 f303 	lsl.w	r3, r1, r3
 8003588:	431a      	orrs	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800358e:	bf00      	nop
 8003590:	371c      	adds	r7, #28
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	3314      	adds	r3, #20
 80035d0:	461a      	mov	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	0e5b      	lsrs	r3, r3, #25
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	4413      	add	r3, r2
 80035de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	0d1b      	lsrs	r3, r3, #20
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	2107      	movs	r1, #7
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	43db      	mvns	r3, r3
 80035f4:	401a      	ands	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	0d1b      	lsrs	r3, r3, #20
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	fa01 f303 	lsl.w	r3, r1, r3
 8003604:	431a      	orrs	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003630:	43db      	mvns	r3, r3
 8003632:	401a      	ands	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f003 0318 	and.w	r3, r3, #24
 800363a:	4908      	ldr	r1, [pc, #32]	; (800365c <LL_ADC_SetChannelSingleDiff+0x44>)
 800363c:	40d9      	lsrs	r1, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	400b      	ands	r3, r1
 8003642:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003646:	431a      	orrs	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800364e:	bf00      	nop
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	000fffff 	.word	0x000fffff

08003660 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 031f 	and.w	r3, r3, #31
}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800368c:	4618      	mov	r0, r3
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80036a6:	4013      	ands	r3, r2
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6093      	str	r3, [r2, #8]
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	5fffffc0 	.word	0x5fffffc0

080036bc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036d0:	d101      	bne.n	80036d6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	4b05      	ldr	r3, [pc, #20]	; (8003708 <LL_ADC_EnableInternalRegulator+0x24>)
 80036f2:	4013      	ands	r3, r2
 80036f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	6fffffc0 	.word	0x6fffffc0

0800370c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003720:	d101      	bne.n	8003726 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <LL_ADC_Enable+0x24>)
 8003742:	4013      	ands	r3, r2
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	7fffffc0 	.word	0x7fffffc0

0800375c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <LL_ADC_Disable+0x24>)
 800376a:	4013      	ands	r3, r2
 800376c:	f043 0202 	orr.w	r2, r3, #2
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	7fffffc0 	.word	0x7fffffc0

08003784 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <LL_ADC_IsEnabled+0x18>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <LL_ADC_IsEnabled+0x1a>
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d101      	bne.n	80037c2 <LL_ADC_IsDisableOngoing+0x18>
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <LL_ADC_IsDisableOngoing+0x1a>
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <LL_ADC_REG_StartConversion+0x24>)
 80037de:	4013      	ands	r3, r2
 80037e0:	f043 0204 	orr.w	r2, r3, #4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	7fffffc0 	.word	0x7fffffc0

080037f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b04      	cmp	r3, #4
 800380a:	d101      	bne.n	8003810 <LL_ADC_REG_IsConversionOngoing+0x18>
 800380c:	2301      	movs	r3, #1
 800380e:	e000      	b.n	8003812 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b08      	cmp	r3, #8
 8003830:	d101      	bne.n	8003836 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800384c:	2300      	movs	r3, #0
 800384e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003850:	2300      	movs	r3, #0
 8003852:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e18f      	b.n	8003b7e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7fc ff71 	bl	8000754 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff ff19 	bl	80036bc <LL_ADC_IsDeepPowerDownEnabled>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d004      	beq.n	800389a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff feff 	bl	8003698 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff ff34 	bl	800370c <LL_ADC_IsInternalRegulatorEnabled>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d114      	bne.n	80038d4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff ff18 	bl	80036e4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038b4:	4b87      	ldr	r3, [pc, #540]	; (8003ad4 <HAL_ADC_Init+0x290>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	099b      	lsrs	r3, r3, #6
 80038ba:	4a87      	ldr	r2, [pc, #540]	; (8003ad8 <HAL_ADC_Init+0x294>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	099b      	lsrs	r3, r3, #6
 80038c2:	3301      	adds	r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038c6:	e002      	b.n	80038ce <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f9      	bne.n	80038c8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f7ff ff17 	bl	800370c <LL_ADC_IsInternalRegulatorEnabled>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10d      	bne.n	8003900 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	f043 0210 	orr.w	r2, r3, #16
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f4:	f043 0201 	orr.w	r2, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff77 	bl	80037f8 <LL_ADC_REG_IsConversionOngoing>
 800390a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b00      	cmp	r3, #0
 8003916:	f040 8129 	bne.w	8003b6c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	f040 8125 	bne.w	8003b6c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003926:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800392a:	f043 0202 	orr.w	r2, r3, #2
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff ff24 	bl	8003784 <LL_ADC_IsEnabled>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d136      	bne.n	80039b0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a65      	ldr	r2, [pc, #404]	; (8003adc <HAL_ADC_Init+0x298>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d004      	beq.n	8003956 <HAL_ADC_Init+0x112>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a63      	ldr	r2, [pc, #396]	; (8003ae0 <HAL_ADC_Init+0x29c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d10e      	bne.n	8003974 <HAL_ADC_Init+0x130>
 8003956:	4861      	ldr	r0, [pc, #388]	; (8003adc <HAL_ADC_Init+0x298>)
 8003958:	f7ff ff14 	bl	8003784 <LL_ADC_IsEnabled>
 800395c:	4604      	mov	r4, r0
 800395e:	4860      	ldr	r0, [pc, #384]	; (8003ae0 <HAL_ADC_Init+0x29c>)
 8003960:	f7ff ff10 	bl	8003784 <LL_ADC_IsEnabled>
 8003964:	4603      	mov	r3, r0
 8003966:	4323      	orrs	r3, r4
 8003968:	2b00      	cmp	r3, #0
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	e008      	b.n	8003986 <HAL_ADC_Init+0x142>
 8003974:	485b      	ldr	r0, [pc, #364]	; (8003ae4 <HAL_ADC_Init+0x2a0>)
 8003976:	f7ff ff05 	bl	8003784 <LL_ADC_IsEnabled>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d012      	beq.n	80039b0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a53      	ldr	r2, [pc, #332]	; (8003adc <HAL_ADC_Init+0x298>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d004      	beq.n	800399e <HAL_ADC_Init+0x15a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a51      	ldr	r2, [pc, #324]	; (8003ae0 <HAL_ADC_Init+0x29c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d101      	bne.n	80039a2 <HAL_ADC_Init+0x15e>
 800399e:	4a52      	ldr	r2, [pc, #328]	; (8003ae8 <HAL_ADC_Init+0x2a4>)
 80039a0:	e000      	b.n	80039a4 <HAL_ADC_Init+0x160>
 80039a2:	4a52      	ldr	r2, [pc, #328]	; (8003aec <HAL_ADC_Init+0x2a8>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f7ff fd2e 	bl	800340c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80039b0:	f7ff fd0a 	bl	80033c8 <HAL_GetREVID>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d914      	bls.n	80039e8 <HAL_ADC_Init+0x1a4>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b10      	cmp	r3, #16
 80039c4:	d110      	bne.n	80039e8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	7d5b      	ldrb	r3, [r3, #21]
 80039ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039d0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80039d6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	7f1b      	ldrb	r3, [r3, #28]
 80039dc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80039de:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039e0:	f043 030c 	orr.w	r3, r3, #12
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	e00d      	b.n	8003a04 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	7d5b      	ldrb	r3, [r3, #21]
 80039ec:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039f2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80039f8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	7f1b      	ldrb	r3, [r3, #28]
 80039fe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003a00:	4313      	orrs	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	7f1b      	ldrb	r3, [r3, #28]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d106      	bne.n	8003a1a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	3b01      	subs	r3, #1
 8003a12:	045b      	lsls	r3, r3, #17
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a26:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	4b2c      	ldr	r3, [pc, #176]	; (8003af0 <HAL_ADC_Init+0x2ac>)
 8003a3e:	4013      	ands	r3, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	69b9      	ldr	r1, [r7, #24]
 8003a46:	430b      	orrs	r3, r1
 8003a48:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff fed2 	bl	80037f8 <LL_ADC_REG_IsConversionOngoing>
 8003a54:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fedf 	bl	800381e <LL_ADC_INJ_IsConversionOngoing>
 8003a60:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d15f      	bne.n	8003b28 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d15c      	bne.n	8003b28 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	7d1b      	ldrb	r3, [r3, #20]
 8003a72:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	4b1c      	ldr	r3, [pc, #112]	; (8003af4 <HAL_ADC_Init+0x2b0>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6812      	ldr	r2, [r2, #0]
 8003a8a:	69b9      	ldr	r1, [r7, #24]
 8003a8c:	430b      	orrs	r3, r1
 8003a8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d130      	bne.n	8003afc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <HAL_ADC_Init+0x2b4>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003aae:	3a01      	subs	r2, #1
 8003ab0:	0411      	lsls	r1, r2, #16
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003ab6:	4311      	orrs	r1, r2
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003abc:	4311      	orrs	r1, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	611a      	str	r2, [r3, #16]
 8003ad0:	e01c      	b.n	8003b0c <HAL_ADC_Init+0x2c8>
 8003ad2:	bf00      	nop
 8003ad4:	24000400 	.word	0x24000400
 8003ad8:	053e2d63 	.word	0x053e2d63
 8003adc:	40022000 	.word	0x40022000
 8003ae0:	40022100 	.word	0x40022100
 8003ae4:	58026000 	.word	0x58026000
 8003ae8:	40022300 	.word	0x40022300
 8003aec:	58026300 	.word	0x58026300
 8003af0:	fff0c003 	.word	0xfff0c003
 8003af4:	ffffbffc 	.word	0xffffbffc
 8003af8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691a      	ldr	r2, [r3, #16]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f022 0201 	bic.w	r2, r2, #1
 8003b0a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f001 f806 	bl	8004b34 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d10c      	bne.n	8003b4a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	f023 010f 	bic.w	r1, r3, #15
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	1e5a      	subs	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
 8003b48:	e007      	b.n	8003b5a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 020f 	bic.w	r2, r2, #15
 8003b58:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	f043 0201 	orr.w	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
 8003b6a:	e007      	b.n	8003b7c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	f043 0210 	orr.w	r2, r3, #16
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3724      	adds	r7, #36	; 0x24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd90      	pop	{r4, r7, pc}
 8003b86:	bf00      	nop

08003b88 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a90      	ldr	r2, [pc, #576]	; (8003dd8 <HAL_ADC_Start_IT+0x250>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <HAL_ADC_Start_IT+0x1c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a8f      	ldr	r2, [pc, #572]	; (8003ddc <HAL_ADC_Start_IT+0x254>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d101      	bne.n	8003ba8 <HAL_ADC_Start_IT+0x20>
 8003ba4:	4b8e      	ldr	r3, [pc, #568]	; (8003de0 <HAL_ADC_Start_IT+0x258>)
 8003ba6:	e000      	b.n	8003baa <HAL_ADC_Start_IT+0x22>
 8003ba8:	4b8e      	ldr	r3, [pc, #568]	; (8003de4 <HAL_ADC_Start_IT+0x25c>)
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fd58 	bl	8003660 <LL_ADC_GetMultimode>
 8003bb0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fe1e 	bl	80037f8 <LL_ADC_REG_IsConversionOngoing>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f040 8119 	bne.w	8003df6 <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_ADC_Start_IT+0x4a>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e116      	b.n	8003e00 <HAL_ADC_Start_IT+0x278>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fec0 	bl	8004960 <ADC_Enable>
 8003be0:	4603      	mov	r3, r0
 8003be2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f040 8100 	bne.w	8003dec <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bf0:	4b7d      	ldr	r3, [pc, #500]	; (8003de8 <HAL_ADC_Start_IT+0x260>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a76      	ldr	r2, [pc, #472]	; (8003ddc <HAL_ADC_Start_IT+0x254>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d002      	beq.n	8003c0c <HAL_ADC_Start_IT+0x84>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	e000      	b.n	8003c0e <HAL_ADC_Start_IT+0x86>
 8003c0c:	4b72      	ldr	r3, [pc, #456]	; (8003dd8 <HAL_ADC_Start_IT+0x250>)
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d002      	beq.n	8003c1c <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d105      	bne.n	8003c28 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c20:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d006      	beq.n	8003c42 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c38:	f023 0206 	bic.w	r2, r3, #6
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	659a      	str	r2, [r3, #88]	; 0x58
 8003c40:	e002      	b.n	8003c48 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	221c      	movs	r2, #28
 8003c4e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 021c 	bic.w	r2, r2, #28
 8003c66:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d108      	bne.n	8003c82 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0208 	orr.w	r2, r2, #8
 8003c7e:	605a      	str	r2, [r3, #4]
          break;
 8003c80:	e008      	b.n	8003c94 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f042 0204 	orr.w	r2, r2, #4
 8003c90:	605a      	str	r2, [r3, #4]
          break;
 8003c92:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d107      	bne.n	8003cac <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0210 	orr.w	r2, r2, #16
 8003caa:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a4a      	ldr	r2, [pc, #296]	; (8003ddc <HAL_ADC_Start_IT+0x254>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d002      	beq.n	8003cbc <HAL_ADC_Start_IT+0x134>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	e000      	b.n	8003cbe <HAL_ADC_Start_IT+0x136>
 8003cbc:	4b46      	ldr	r3, [pc, #280]	; (8003dd8 <HAL_ADC_Start_IT+0x250>)
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d008      	beq.n	8003cd8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	2b05      	cmp	r3, #5
 8003cd0:	d002      	beq.n	8003cd8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	2b09      	cmp	r3, #9
 8003cd6:	d13b      	bne.n	8003d50 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d02d      	beq.n	8003d42 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d110      	bne.n	8003d20 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0220 	bic.w	r2, r2, #32
 8003d0c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d1c:	605a      	str	r2, [r3, #4]
              break;
 8003d1e:	e011      	b.n	8003d44 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d2e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0220 	orr.w	r2, r2, #32
 8003d3e:	605a      	str	r2, [r3, #4]
              break;
 8003d40:	e000      	b.n	8003d44 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 8003d42:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff fd41 	bl	80037d0 <LL_ADC_REG_StartConversion>
 8003d4e:	e056      	b.n	8003dfe <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d54:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1e      	ldr	r2, [pc, #120]	; (8003ddc <HAL_ADC_Start_IT+0x254>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d002      	beq.n	8003d6c <HAL_ADC_Start_IT+0x1e4>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	e000      	b.n	8003d6e <HAL_ADC_Start_IT+0x1e6>
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <HAL_ADC_Start_IT+0x250>)
 8003d6e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d03f      	beq.n	8003dfc <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d110      	bne.n	8003db6 <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0220 	bic.w	r2, r2, #32
 8003da2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003db2:	605a      	str	r2, [r3, #4]
              break;
 8003db4:	e023      	b.n	8003dfe <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0220 	orr.w	r2, r2, #32
 8003dd4:	605a      	str	r2, [r3, #4]
              break;
 8003dd6:	e012      	b.n	8003dfe <HAL_ADC_Start_IT+0x276>
 8003dd8:	40022000 	.word	0x40022000
 8003ddc:	40022100 	.word	0x40022100
 8003de0:	40022300 	.word	0x40022300
 8003de4:	58026300 	.word	0x58026300
 8003de8:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003df4:	e003      	b.n	8003dfe <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003df6:	2302      	movs	r3, #2
 8003df8:	75fb      	strb	r3, [r7, #23]
 8003dfa:	e000      	b.n	8003dfe <HAL_ADC_Start_IT+0x276>
        }
 8003dfc:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08a      	sub	sp, #40	; 0x28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a87      	ldr	r2, [pc, #540]	; (8004064 <HAL_ADC_IRQHandler+0x240>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <HAL_ADC_IRQHandler+0x30>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a86      	ldr	r2, [pc, #536]	; (8004068 <HAL_ADC_IRQHandler+0x244>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d101      	bne.n	8003e58 <HAL_ADC_IRQHandler+0x34>
 8003e54:	4b85      	ldr	r3, [pc, #532]	; (800406c <HAL_ADC_IRQHandler+0x248>)
 8003e56:	e000      	b.n	8003e5a <HAL_ADC_IRQHandler+0x36>
 8003e58:	4b85      	ldr	r3, [pc, #532]	; (8004070 <HAL_ADC_IRQHandler+0x24c>)
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fc00 	bl	8003660 <LL_ADC_GetMultimode>
 8003e60:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d017      	beq.n	8003e9c <HAL_ADC_IRQHandler+0x78>
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d012      	beq.n	8003e9c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7a:	f003 0310 	and.w	r3, r3, #16
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d105      	bne.n	8003e8e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f001 f818 	bl	8004ec4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d004      	beq.n	8003eb0 <HAL_ADC_IRQHandler+0x8c>
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10a      	bne.n	8003ec6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8083 	beq.w	8003fc2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d07d      	beq.n	8003fc2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fb1a 	bl	800351c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d062      	beq.n	8003fb4 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a5d      	ldr	r2, [pc, #372]	; (8004068 <HAL_ADC_IRQHandler+0x244>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d002      	beq.n	8003efe <HAL_ADC_IRQHandler+0xda>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	e000      	b.n	8003f00 <HAL_ADC_IRQHandler+0xdc>
 8003efe:	4b59      	ldr	r3, [pc, #356]	; (8004064 <HAL_ADC_IRQHandler+0x240>)
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6812      	ldr	r2, [r2, #0]
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d008      	beq.n	8003f1a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b05      	cmp	r3, #5
 8003f12:	d002      	beq.n	8003f1a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	2b09      	cmp	r3, #9
 8003f18:	d104      	bne.n	8003f24 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	623b      	str	r3, [r7, #32]
 8003f22:	e00c      	b.n	8003f3e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a4f      	ldr	r2, [pc, #316]	; (8004068 <HAL_ADC_IRQHandler+0x244>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d002      	beq.n	8003f34 <HAL_ADC_IRQHandler+0x110>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	e000      	b.n	8003f36 <HAL_ADC_IRQHandler+0x112>
 8003f34:	4b4b      	ldr	r3, [pc, #300]	; (8004064 <HAL_ADC_IRQHandler+0x240>)
 8003f36:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d135      	bne.n	8003fb4 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d12e      	bne.n	8003fb4 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff fc4c 	bl	80037f8 <LL_ADC_REG_IsConversionOngoing>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d11a      	bne.n	8003f9c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 020c 	bic.w	r2, r2, #12
 8003f74:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d112      	bne.n	8003fb4 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	f043 0201 	orr.w	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	655a      	str	r2, [r3, #84]	; 0x54
 8003f9a:	e00b      	b.n	8003fb4 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa0:	f043 0210 	orr.w	r2, r3, #16
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fac:	f043 0201 	orr.w	r2, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f7fd fc53 	bl	8001860 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	220c      	movs	r2, #12
 8003fc0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d004      	beq.n	8003fd6 <HAL_ADC_IRQHandler+0x1b2>
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10b      	bne.n	8003fee <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 80a0 	beq.w	8004122 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 809a 	beq.w	8004122 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d105      	bne.n	8004006 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffe:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fac5 	bl	800359a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004010:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fa80 	bl	800351c <LL_ADC_REG_IsTriggerSourceSWStart>
 800401c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a11      	ldr	r2, [pc, #68]	; (8004068 <HAL_ADC_IRQHandler+0x244>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d002      	beq.n	800402e <HAL_ADC_IRQHandler+0x20a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	e000      	b.n	8004030 <HAL_ADC_IRQHandler+0x20c>
 800402e:	4b0d      	ldr	r3, [pc, #52]	; (8004064 <HAL_ADC_IRQHandler+0x240>)
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6812      	ldr	r2, [r2, #0]
 8004034:	4293      	cmp	r3, r2
 8004036:	d008      	beq.n	800404a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b06      	cmp	r3, #6
 8004042:	d002      	beq.n	800404a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b07      	cmp	r3, #7
 8004048:	d104      	bne.n	8004054 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	623b      	str	r3, [r7, #32]
 8004052:	e014      	b.n	800407e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a03      	ldr	r2, [pc, #12]	; (8004068 <HAL_ADC_IRQHandler+0x244>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00a      	beq.n	8004074 <HAL_ADC_IRQHandler+0x250>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	e008      	b.n	8004076 <HAL_ADC_IRQHandler+0x252>
 8004064:	40022000 	.word	0x40022000
 8004068:	40022100 	.word	0x40022100
 800406c:	40022300 	.word	0x40022300
 8004070:	58026300 	.word	0x58026300
 8004074:	4b84      	ldr	r3, [pc, #528]	; (8004288 <HAL_ADC_IRQHandler+0x464>)
 8004076:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d047      	beq.n	8004114 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d007      	beq.n	800409e <HAL_ADC_IRQHandler+0x27a>
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d03f      	beq.n	8004114 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800409a:	2b00      	cmp	r3, #0
 800409c:	d13a      	bne.n	8004114 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a8:	2b40      	cmp	r3, #64	; 0x40
 80040aa:	d133      	bne.n	8004114 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d12e      	bne.n	8004114 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fbaf 	bl	800381e <LL_ADC_INJ_IsConversionOngoing>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d11a      	bne.n	80040fc <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040d4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d112      	bne.n	8004114 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	f043 0201 	orr.w	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54
 80040fa:	e00b      	b.n	8004114 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004100:	f043 0210 	orr.w	r2, r3, #16
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	f043 0201 	orr.w	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fead 	bl	8004e74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2260      	movs	r2, #96	; 0x60
 8004120:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004128:	2b00      	cmp	r3, #0
 800412a:	d011      	beq.n	8004150 <HAL_ADC_IRQHandler+0x32c>
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00c      	beq.n	8004150 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f8a8 	bl	8004298 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2280      	movs	r2, #128	; 0x80
 800414e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d012      	beq.n	8004180 <HAL_ADC_IRQHandler+0x35c>
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00d      	beq.n	8004180 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004168:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fe93 	bl	8004e9c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800417e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004186:	2b00      	cmp	r3, #0
 8004188:	d012      	beq.n	80041b0 <HAL_ADC_IRQHandler+0x38c>
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00d      	beq.n	80041b0 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004198:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fe85 	bl	8004eb0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d043      	beq.n	8004242 <HAL_ADC_IRQHandler+0x41e>
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d03e      	beq.n	8004242 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d102      	bne.n	80041d2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80041cc:	2301      	movs	r3, #1
 80041ce:	627b      	str	r3, [r7, #36]	; 0x24
 80041d0:	e021      	b.n	8004216 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d015      	beq.n	8004204 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2a      	ldr	r2, [pc, #168]	; (8004288 <HAL_ADC_IRQHandler+0x464>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <HAL_ADC_IRQHandler+0x3c8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a29      	ldr	r2, [pc, #164]	; (800428c <HAL_ADC_IRQHandler+0x468>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d101      	bne.n	80041f0 <HAL_ADC_IRQHandler+0x3cc>
 80041ec:	4b28      	ldr	r3, [pc, #160]	; (8004290 <HAL_ADC_IRQHandler+0x46c>)
 80041ee:	e000      	b.n	80041f2 <HAL_ADC_IRQHandler+0x3ce>
 80041f0:	4b28      	ldr	r3, [pc, #160]	; (8004294 <HAL_ADC_IRQHandler+0x470>)
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7ff fa42 	bl	800367c <LL_ADC_GetMultiDMATransfer>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80041fe:	2301      	movs	r3, #1
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
 8004202:	e008      	b.n	8004216 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004212:	2301      	movs	r3, #1
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	2b01      	cmp	r3, #1
 800421a:	d10e      	bne.n	800423a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004220:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422c:	f043 0202 	orr.w	r2, r3, #2
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f839 	bl	80042ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2210      	movs	r2, #16
 8004240:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004248:	2b00      	cmp	r3, #0
 800424a:	d018      	beq.n	800427e <HAL_ADC_IRQHandler+0x45a>
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004252:	2b00      	cmp	r3, #0
 8004254:	d013      	beq.n	800427e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	f043 0208 	orr.w	r2, r3, #8
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004276:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 fe05 	bl	8004e88 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800427e:	bf00      	nop
 8004280:	3728      	adds	r7, #40	; 0x28
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40022000 	.word	0x40022000
 800428c:	40022100 	.word	0x40022100
 8004290:	40022300 	.word	0x40022300
 8004294:	58026300 	.word	0x58026300

08004298 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042c0:	b590      	push	{r4, r7, lr}
 80042c2:	b0a1      	sub	sp, #132	; 0x84
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4a9d      	ldr	r2, [pc, #628]	; (8004550 <HAL_ADC_ConfigChannel+0x290>)
 80042da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_ADC_ConfigChannel+0x2a>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e321      	b.n	800492e <HAL_ADC_ConfigChannel+0x66e>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fa7e 	bl	80037f8 <LL_ADC_REG_IsConversionOngoing>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f040 8306 	bne.w	8004910 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800430c:	2b00      	cmp	r3, #0
 800430e:	d108      	bne.n	8004322 <HAL_ADC_ConfigChannel+0x62>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	0e9b      	lsrs	r3, r3, #26
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	2201      	movs	r2, #1
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	e016      	b.n	8004350 <HAL_ADC_ConfigChannel+0x90>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004332:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004334:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800433a:	2320      	movs	r3, #32
 800433c:	e003      	b.n	8004346 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800433e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004340:	fab3 f383 	clz	r3, r3
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	2201      	movs	r2, #1
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	69d1      	ldr	r1, [r2, #28]
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6812      	ldr	r2, [r2, #0]
 800435a:	430b      	orrs	r3, r1
 800435c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6859      	ldr	r1, [r3, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	f7ff f8e9 	bl	8003542 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff fa3f 	bl	80037f8 <LL_ADC_REG_IsConversionOngoing>
 800437a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fa4c 	bl	800381e <LL_ADC_INJ_IsConversionOngoing>
 8004386:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 80b3 	bne.w	80044f6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004392:	2b00      	cmp	r3, #0
 8004394:	f040 80af 	bne.w	80044f6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	6819      	ldr	r1, [r3, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	461a      	mov	r2, r3
 80043a6:	f7ff f90b 	bl	80035c0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043aa:	4b6a      	ldr	r3, [pc, #424]	; (8004554 <HAL_ADC_ConfigChannel+0x294>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80043b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043b6:	d10b      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x110>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	695a      	ldr	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	089b      	lsrs	r3, r3, #2
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	e01d      	b.n	800440c <HAL_ADC_ConfigChannel+0x14c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10b      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x136>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	089b      	lsrs	r3, r3, #2
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	fa02 f303 	lsl.w	r3, r2, r3
 80043f4:	e00a      	b.n	800440c <HAL_ADC_ConfigChannel+0x14c>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	695a      	ldr	r2, [r3, #20]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	089b      	lsrs	r3, r3, #2
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b04      	cmp	r3, #4
 8004414:	d027      	beq.n	8004466 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6919      	ldr	r1, [r3, #16]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004424:	f7ff f826 	bl	8003474 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	6919      	ldr	r1, [r3, #16]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	7e5b      	ldrb	r3, [r3, #25]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d102      	bne.n	800443e <HAL_ADC_ConfigChannel+0x17e>
 8004438:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800443c:	e000      	b.n	8004440 <HAL_ADC_ConfigChannel+0x180>
 800443e:	2300      	movs	r3, #0
 8004440:	461a      	mov	r2, r3
 8004442:	f7ff f850 	bl	80034e6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6919      	ldr	r1, [r3, #16]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	7e1b      	ldrb	r3, [r3, #24]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d102      	bne.n	800445c <HAL_ADC_ConfigChannel+0x19c>
 8004456:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800445a:	e000      	b.n	800445e <HAL_ADC_ConfigChannel+0x19e>
 800445c:	2300      	movs	r3, #0
 800445e:	461a      	mov	r2, r3
 8004460:	f7ff f828 	bl	80034b4 <LL_ADC_SetDataRightShift>
 8004464:	e047      	b.n	80044f6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800446c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	069b      	lsls	r3, r3, #26
 8004476:	429a      	cmp	r2, r3
 8004478:	d107      	bne.n	800448a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004488:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004490:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	069b      	lsls	r3, r3, #26
 800449a:	429a      	cmp	r2, r3
 800449c:	d107      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044ac:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	069b      	lsls	r3, r3, #26
 80044be:	429a      	cmp	r2, r3
 80044c0:	d107      	bne.n	80044d2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044d0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	069b      	lsls	r3, r3, #26
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d107      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff f942 	bl	8003784 <LL_ADC_IsEnabled>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	f040 820d 	bne.w	8004922 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	461a      	mov	r2, r3
 8004516:	f7ff f87f 	bl	8003618 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	4a0c      	ldr	r2, [pc, #48]	; (8004550 <HAL_ADC_ConfigChannel+0x290>)
 8004520:	4293      	cmp	r3, r2
 8004522:	f040 8133 	bne.w	800478c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004532:	2b00      	cmp	r3, #0
 8004534:	d110      	bne.n	8004558 <HAL_ADC_ConfigChannel+0x298>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	0e9b      	lsrs	r3, r3, #26
 800453c:	3301      	adds	r3, #1
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	2b09      	cmp	r3, #9
 8004544:	bf94      	ite	ls
 8004546:	2301      	movls	r3, #1
 8004548:	2300      	movhi	r3, #0
 800454a:	b2db      	uxtb	r3, r3
 800454c:	e01e      	b.n	800458c <HAL_ADC_ConfigChannel+0x2cc>
 800454e:	bf00      	nop
 8004550:	47ff0000 	.word	0x47ff0000
 8004554:	5c001000 	.word	0x5c001000
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004560:	fa93 f3a3 	rbit	r3, r3
 8004564:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004568:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800456a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004570:	2320      	movs	r3, #32
 8004572:	e003      	b.n	800457c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004576:	fab3 f383 	clz	r3, r3
 800457a:	b2db      	uxtb	r3, r3
 800457c:	3301      	adds	r3, #1
 800457e:	f003 031f 	and.w	r3, r3, #31
 8004582:	2b09      	cmp	r3, #9
 8004584:	bf94      	ite	ls
 8004586:	2301      	movls	r3, #1
 8004588:	2300      	movhi	r3, #0
 800458a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800458c:	2b00      	cmp	r3, #0
 800458e:	d079      	beq.n	8004684 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004598:	2b00      	cmp	r3, #0
 800459a:	d107      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x2ec>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	0e9b      	lsrs	r3, r3, #26
 80045a2:	3301      	adds	r3, #1
 80045a4:	069b      	lsls	r3, r3, #26
 80045a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045aa:	e015      	b.n	80045d8 <HAL_ADC_ConfigChannel+0x318>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b4:	fa93 f3a3 	rbit	r3, r3
 80045b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80045ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80045be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80045c4:	2320      	movs	r3, #32
 80045c6:	e003      	b.n	80045d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80045c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045ca:	fab3 f383 	clz	r3, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	3301      	adds	r3, #1
 80045d2:	069b      	lsls	r3, r3, #26
 80045d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <HAL_ADC_ConfigChannel+0x338>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	0e9b      	lsrs	r3, r3, #26
 80045ea:	3301      	adds	r3, #1
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	2101      	movs	r1, #1
 80045f2:	fa01 f303 	lsl.w	r3, r1, r3
 80045f6:	e017      	b.n	8004628 <HAL_ADC_ConfigChannel+0x368>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004600:	fa93 f3a3 	rbit	r3, r3
 8004604:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004608:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800460a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004610:	2320      	movs	r3, #32
 8004612:	e003      	b.n	800461c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004616:	fab3 f383 	clz	r3, r3
 800461a:	b2db      	uxtb	r3, r3
 800461c:	3301      	adds	r3, #1
 800461e:	f003 031f 	and.w	r3, r3, #31
 8004622:	2101      	movs	r1, #1
 8004624:	fa01 f303 	lsl.w	r3, r1, r3
 8004628:	ea42 0103 	orr.w	r1, r2, r3
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004634:	2b00      	cmp	r3, #0
 8004636:	d10a      	bne.n	800464e <HAL_ADC_ConfigChannel+0x38e>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	0e9b      	lsrs	r3, r3, #26
 800463e:	3301      	adds	r3, #1
 8004640:	f003 021f 	and.w	r2, r3, #31
 8004644:	4613      	mov	r3, r2
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	4413      	add	r3, r2
 800464a:	051b      	lsls	r3, r3, #20
 800464c:	e018      	b.n	8004680 <HAL_ADC_ConfigChannel+0x3c0>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004656:	fa93 f3a3 	rbit	r3, r3
 800465a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800465c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004666:	2320      	movs	r3, #32
 8004668:	e003      	b.n	8004672 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	fab3 f383 	clz	r3, r3
 8004670:	b2db      	uxtb	r3, r3
 8004672:	3301      	adds	r3, #1
 8004674:	f003 021f 	and.w	r2, r3, #31
 8004678:	4613      	mov	r3, r2
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	4413      	add	r3, r2
 800467e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004680:	430b      	orrs	r3, r1
 8004682:	e07e      	b.n	8004782 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800468c:	2b00      	cmp	r3, #0
 800468e:	d107      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x3e0>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	0e9b      	lsrs	r3, r3, #26
 8004696:	3301      	adds	r3, #1
 8004698:	069b      	lsls	r3, r3, #26
 800469a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800469e:	e015      	b.n	80046cc <HAL_ADC_ConfigChannel+0x40c>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a8:	fa93 f3a3 	rbit	r3, r3
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80046b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80046b8:	2320      	movs	r3, #32
 80046ba:	e003      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	3301      	adds	r3, #1
 80046c6:	069b      	lsls	r3, r3, #26
 80046c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d109      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x42c>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	0e9b      	lsrs	r3, r3, #26
 80046de:	3301      	adds	r3, #1
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2101      	movs	r1, #1
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	e017      	b.n	800471c <HAL_ADC_ConfigChannel+0x45c>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	fa93 f3a3 	rbit	r3, r3
 80046f8:	61bb      	str	r3, [r7, #24]
  return result;
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004704:	2320      	movs	r3, #32
 8004706:	e003      	b.n	8004710 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	fab3 f383 	clz	r3, r3
 800470e:	b2db      	uxtb	r3, r3
 8004710:	3301      	adds	r3, #1
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	2101      	movs	r1, #1
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	ea42 0103 	orr.w	r1, r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10d      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x488>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	0e9b      	lsrs	r3, r3, #26
 8004732:	3301      	adds	r3, #1
 8004734:	f003 021f 	and.w	r2, r3, #31
 8004738:	4613      	mov	r3, r2
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	4413      	add	r3, r2
 800473e:	3b1e      	subs	r3, #30
 8004740:	051b      	lsls	r3, r3, #20
 8004742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004746:	e01b      	b.n	8004780 <HAL_ADC_ConfigChannel+0x4c0>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	fa93 f3a3 	rbit	r3, r3
 8004754:	60fb      	str	r3, [r7, #12]
  return result;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004760:	2320      	movs	r3, #32
 8004762:	e003      	b.n	800476c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	fab3 f383 	clz	r3, r3
 800476a:	b2db      	uxtb	r3, r3
 800476c:	3301      	adds	r3, #1
 800476e:	f003 021f 	and.w	r2, r3, #31
 8004772:	4613      	mov	r3, r2
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	4413      	add	r3, r2
 8004778:	3b1e      	subs	r3, #30
 800477a:	051b      	lsls	r3, r3, #20
 800477c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004780:	430b      	orrs	r3, r1
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	6892      	ldr	r2, [r2, #8]
 8004786:	4619      	mov	r1, r3
 8004788:	f7fe ff1a 	bl	80035c0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	f280 80c6 	bge.w	8004922 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a67      	ldr	r2, [pc, #412]	; (8004938 <HAL_ADC_ConfigChannel+0x678>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d004      	beq.n	80047aa <HAL_ADC_ConfigChannel+0x4ea>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a65      	ldr	r2, [pc, #404]	; (800493c <HAL_ADC_ConfigChannel+0x67c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d101      	bne.n	80047ae <HAL_ADC_ConfigChannel+0x4ee>
 80047aa:	4b65      	ldr	r3, [pc, #404]	; (8004940 <HAL_ADC_ConfigChannel+0x680>)
 80047ac:	e000      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x4f0>
 80047ae:	4b65      	ldr	r3, [pc, #404]	; (8004944 <HAL_ADC_ConfigChannel+0x684>)
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fe fe51 	bl	8003458 <LL_ADC_GetCommonPathInternalCh>
 80047b6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a5e      	ldr	r2, [pc, #376]	; (8004938 <HAL_ADC_ConfigChannel+0x678>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <HAL_ADC_ConfigChannel+0x50c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a5d      	ldr	r2, [pc, #372]	; (800493c <HAL_ADC_ConfigChannel+0x67c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d10e      	bne.n	80047ea <HAL_ADC_ConfigChannel+0x52a>
 80047cc:	485a      	ldr	r0, [pc, #360]	; (8004938 <HAL_ADC_ConfigChannel+0x678>)
 80047ce:	f7fe ffd9 	bl	8003784 <LL_ADC_IsEnabled>
 80047d2:	4604      	mov	r4, r0
 80047d4:	4859      	ldr	r0, [pc, #356]	; (800493c <HAL_ADC_ConfigChannel+0x67c>)
 80047d6:	f7fe ffd5 	bl	8003784 <LL_ADC_IsEnabled>
 80047da:	4603      	mov	r3, r0
 80047dc:	4323      	orrs	r3, r4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	bf0c      	ite	eq
 80047e2:	2301      	moveq	r3, #1
 80047e4:	2300      	movne	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	e008      	b.n	80047fc <HAL_ADC_ConfigChannel+0x53c>
 80047ea:	4857      	ldr	r0, [pc, #348]	; (8004948 <HAL_ADC_ConfigChannel+0x688>)
 80047ec:	f7fe ffca 	bl	8003784 <LL_ADC_IsEnabled>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	bf0c      	ite	eq
 80047f6:	2301      	moveq	r3, #1
 80047f8:	2300      	movne	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d07d      	beq.n	80048fc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a51      	ldr	r2, [pc, #324]	; (800494c <HAL_ADC_ConfigChannel+0x68c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d130      	bne.n	800486c <HAL_ADC_ConfigChannel+0x5ac>
 800480a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800480c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d12b      	bne.n	800486c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a4b      	ldr	r2, [pc, #300]	; (8004948 <HAL_ADC_ConfigChannel+0x688>)
 800481a:	4293      	cmp	r3, r2
 800481c:	f040 8081 	bne.w	8004922 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a44      	ldr	r2, [pc, #272]	; (8004938 <HAL_ADC_ConfigChannel+0x678>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <HAL_ADC_ConfigChannel+0x574>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a43      	ldr	r2, [pc, #268]	; (800493c <HAL_ADC_ConfigChannel+0x67c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d101      	bne.n	8004838 <HAL_ADC_ConfigChannel+0x578>
 8004834:	4a42      	ldr	r2, [pc, #264]	; (8004940 <HAL_ADC_ConfigChannel+0x680>)
 8004836:	e000      	b.n	800483a <HAL_ADC_ConfigChannel+0x57a>
 8004838:	4a42      	ldr	r2, [pc, #264]	; (8004944 <HAL_ADC_ConfigChannel+0x684>)
 800483a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800483c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f7fe fdf5 	bl	8003432 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004848:	4b41      	ldr	r3, [pc, #260]	; (8004950 <HAL_ADC_ConfigChannel+0x690>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	099b      	lsrs	r3, r3, #6
 800484e:	4a41      	ldr	r2, [pc, #260]	; (8004954 <HAL_ADC_ConfigChannel+0x694>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	099b      	lsrs	r3, r3, #6
 8004856:	3301      	adds	r3, #1
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800485c:	e002      	b.n	8004864 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	3b01      	subs	r3, #1
 8004862:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f9      	bne.n	800485e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800486a:	e05a      	b.n	8004922 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a39      	ldr	r2, [pc, #228]	; (8004958 <HAL_ADC_ConfigChannel+0x698>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d11e      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x5f4>
 8004876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d119      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a30      	ldr	r2, [pc, #192]	; (8004948 <HAL_ADC_ConfigChannel+0x688>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d14b      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a2a      	ldr	r2, [pc, #168]	; (8004938 <HAL_ADC_ConfigChannel+0x678>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_ADC_ConfigChannel+0x5de>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a28      	ldr	r2, [pc, #160]	; (800493c <HAL_ADC_ConfigChannel+0x67c>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d101      	bne.n	80048a2 <HAL_ADC_ConfigChannel+0x5e2>
 800489e:	4a28      	ldr	r2, [pc, #160]	; (8004940 <HAL_ADC_ConfigChannel+0x680>)
 80048a0:	e000      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x5e4>
 80048a2:	4a28      	ldr	r2, [pc, #160]	; (8004944 <HAL_ADC_ConfigChannel+0x684>)
 80048a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048aa:	4619      	mov	r1, r3
 80048ac:	4610      	mov	r0, r2
 80048ae:	f7fe fdc0 	bl	8003432 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048b2:	e036      	b.n	8004922 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a28      	ldr	r2, [pc, #160]	; (800495c <HAL_ADC_ConfigChannel+0x69c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d131      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x662>
 80048be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d12c      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1e      	ldr	r2, [pc, #120]	; (8004948 <HAL_ADC_ConfigChannel+0x688>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d127      	bne.n	8004922 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a18      	ldr	r2, [pc, #96]	; (8004938 <HAL_ADC_ConfigChannel+0x678>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d004      	beq.n	80048e6 <HAL_ADC_ConfigChannel+0x626>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a16      	ldr	r2, [pc, #88]	; (800493c <HAL_ADC_ConfigChannel+0x67c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d101      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x62a>
 80048e6:	4a16      	ldr	r2, [pc, #88]	; (8004940 <HAL_ADC_ConfigChannel+0x680>)
 80048e8:	e000      	b.n	80048ec <HAL_ADC_ConfigChannel+0x62c>
 80048ea:	4a16      	ldr	r2, [pc, #88]	; (8004944 <HAL_ADC_ConfigChannel+0x684>)
 80048ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f7fe fd9c 	bl	8003432 <LL_ADC_SetCommonPathInternalCh>
 80048fa:	e012      	b.n	8004922 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004900:	f043 0220 	orr.w	r2, r3, #32
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800490e:	e008      	b.n	8004922 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004914:	f043 0220 	orr.w	r2, r3, #32
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800492a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800492e:	4618      	mov	r0, r3
 8004930:	3784      	adds	r7, #132	; 0x84
 8004932:	46bd      	mov	sp, r7
 8004934:	bd90      	pop	{r4, r7, pc}
 8004936:	bf00      	nop
 8004938:	40022000 	.word	0x40022000
 800493c:	40022100 	.word	0x40022100
 8004940:	40022300 	.word	0x40022300
 8004944:	58026300 	.word	0x58026300
 8004948:	58026000 	.word	0x58026000
 800494c:	cb840000 	.word	0xcb840000
 8004950:	24000400 	.word	0x24000400
 8004954:	053e2d63 	.word	0x053e2d63
 8004958:	c7520000 	.word	0xc7520000
 800495c:	cfb80000 	.word	0xcfb80000

08004960 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f7fe ff09 	bl	8003784 <LL_ADC_IsEnabled>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d16e      	bne.n	8004a56 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	4b38      	ldr	r3, [pc, #224]	; (8004a60 <ADC_Enable+0x100>)
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00d      	beq.n	80049a2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800498a:	f043 0210 	orr.w	r2, r3, #16
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004996:	f043 0201 	orr.w	r2, r3, #1
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e05a      	b.n	8004a58 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe fec4 	bl	8003734 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80049ac:	f7fe fcdc 	bl	8003368 <HAL_GetTick>
 80049b0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a2b      	ldr	r2, [pc, #172]	; (8004a64 <ADC_Enable+0x104>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d004      	beq.n	80049c6 <ADC_Enable+0x66>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a29      	ldr	r2, [pc, #164]	; (8004a68 <ADC_Enable+0x108>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d101      	bne.n	80049ca <ADC_Enable+0x6a>
 80049c6:	4b29      	ldr	r3, [pc, #164]	; (8004a6c <ADC_Enable+0x10c>)
 80049c8:	e000      	b.n	80049cc <ADC_Enable+0x6c>
 80049ca:	4b29      	ldr	r3, [pc, #164]	; (8004a70 <ADC_Enable+0x110>)
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fe fe47 	bl	8003660 <LL_ADC_GetMultimode>
 80049d2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a23      	ldr	r2, [pc, #140]	; (8004a68 <ADC_Enable+0x108>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d002      	beq.n	80049e4 <ADC_Enable+0x84>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	e000      	b.n	80049e6 <ADC_Enable+0x86>
 80049e4:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <ADC_Enable+0x104>)
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d02c      	beq.n	8004a48 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d130      	bne.n	8004a56 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80049f4:	e028      	b.n	8004a48 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fe fec2 	bl	8003784 <LL_ADC_IsEnabled>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d104      	bne.n	8004a10 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fe fe92 	bl	8003734 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a10:	f7fe fcaa 	bl	8003368 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d914      	bls.n	8004a48 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d00d      	beq.n	8004a48 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a30:	f043 0210 	orr.w	r2, r3, #16
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3c:	f043 0201 	orr.w	r2, r3, #1
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e007      	b.n	8004a58 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d1cf      	bne.n	80049f6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	8000003f 	.word	0x8000003f
 8004a64:	40022000 	.word	0x40022000
 8004a68:	40022100 	.word	0x40022100
 8004a6c:	40022300 	.word	0x40022300
 8004a70:	58026300 	.word	0x58026300

08004a74 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe fe92 	bl	80037aa <LL_ADC_IsDisableOngoing>
 8004a86:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fe fe79 	bl	8003784 <LL_ADC_IsEnabled>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d047      	beq.n	8004b28 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d144      	bne.n	8004b28 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 030d 	and.w	r3, r3, #13
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d10c      	bne.n	8004ac6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fe fe53 	bl	800375c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2203      	movs	r2, #3
 8004abc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004abe:	f7fe fc53 	bl	8003368 <HAL_GetTick>
 8004ac2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ac4:	e029      	b.n	8004b1a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aca:	f043 0210 	orr.w	r2, r3, #16
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	f043 0201 	orr.w	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e023      	b.n	8004b2a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ae2:	f7fe fc41 	bl	8003368 <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d914      	bls.n	8004b1a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00d      	beq.n	8004b1a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	f043 0210 	orr.w	r2, r3, #16
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0e:	f043 0201 	orr.w	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e007      	b.n	8004b2a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1dc      	bne.n	8004ae2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a79      	ldr	r2, [pc, #484]	; (8004d28 <ADC_ConfigureBoostMode+0x1f4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <ADC_ConfigureBoostMode+0x1c>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a78      	ldr	r2, [pc, #480]	; (8004d2c <ADC_ConfigureBoostMode+0x1f8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d109      	bne.n	8004b64 <ADC_ConfigureBoostMode+0x30>
 8004b50:	4b77      	ldr	r3, [pc, #476]	; (8004d30 <ADC_ConfigureBoostMode+0x1fc>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf14      	ite	ne
 8004b5c:	2301      	movne	r3, #1
 8004b5e:	2300      	moveq	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e008      	b.n	8004b76 <ADC_ConfigureBoostMode+0x42>
 8004b64:	4b73      	ldr	r3, [pc, #460]	; (8004d34 <ADC_ConfigureBoostMode+0x200>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01c      	beq.n	8004bb4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004b7a:	f004 fe55 	bl	8009828 <HAL_RCC_GetHCLKFreq>
 8004b7e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b88:	d010      	beq.n	8004bac <ADC_ConfigureBoostMode+0x78>
 8004b8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b8e:	d871      	bhi.n	8004c74 <ADC_ConfigureBoostMode+0x140>
 8004b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b94:	d002      	beq.n	8004b9c <ADC_ConfigureBoostMode+0x68>
 8004b96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b9a:	d16b      	bne.n	8004c74 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	0c1b      	lsrs	r3, r3, #16
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba8:	60fb      	str	r3, [r7, #12]
        break;
 8004baa:	e066      	b.n	8004c7a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	089b      	lsrs	r3, r3, #2
 8004bb0:	60fb      	str	r3, [r7, #12]
        break;
 8004bb2:	e062      	b.n	8004c7a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004bb4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004bb8:	f005 fdd8 	bl	800a76c <HAL_RCCEx_GetPeriphCLKFreq>
 8004bbc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004bc6:	d051      	beq.n	8004c6c <ADC_ConfigureBoostMode+0x138>
 8004bc8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004bcc:	d854      	bhi.n	8004c78 <ADC_ConfigureBoostMode+0x144>
 8004bce:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004bd2:	d047      	beq.n	8004c64 <ADC_ConfigureBoostMode+0x130>
 8004bd4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004bd8:	d84e      	bhi.n	8004c78 <ADC_ConfigureBoostMode+0x144>
 8004bda:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004bde:	d03d      	beq.n	8004c5c <ADC_ConfigureBoostMode+0x128>
 8004be0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004be4:	d848      	bhi.n	8004c78 <ADC_ConfigureBoostMode+0x144>
 8004be6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bea:	d033      	beq.n	8004c54 <ADC_ConfigureBoostMode+0x120>
 8004bec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bf0:	d842      	bhi.n	8004c78 <ADC_ConfigureBoostMode+0x144>
 8004bf2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004bf6:	d029      	beq.n	8004c4c <ADC_ConfigureBoostMode+0x118>
 8004bf8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004bfc:	d83c      	bhi.n	8004c78 <ADC_ConfigureBoostMode+0x144>
 8004bfe:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c02:	d01a      	beq.n	8004c3a <ADC_ConfigureBoostMode+0x106>
 8004c04:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004c08:	d836      	bhi.n	8004c78 <ADC_ConfigureBoostMode+0x144>
 8004c0a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c0e:	d014      	beq.n	8004c3a <ADC_ConfigureBoostMode+0x106>
 8004c10:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004c14:	d830      	bhi.n	8004c78 <ADC_ConfigureBoostMode+0x144>
 8004c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c1a:	d00e      	beq.n	8004c3a <ADC_ConfigureBoostMode+0x106>
 8004c1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c20:	d82a      	bhi.n	8004c78 <ADC_ConfigureBoostMode+0x144>
 8004c22:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c26:	d008      	beq.n	8004c3a <ADC_ConfigureBoostMode+0x106>
 8004c28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c2c:	d824      	bhi.n	8004c78 <ADC_ConfigureBoostMode+0x144>
 8004c2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c32:	d002      	beq.n	8004c3a <ADC_ConfigureBoostMode+0x106>
 8004c34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c38:	d11e      	bne.n	8004c78 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	0c9b      	lsrs	r3, r3, #18
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c48:	60fb      	str	r3, [r7, #12]
        break;
 8004c4a:	e016      	b.n	8004c7a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	091b      	lsrs	r3, r3, #4
 8004c50:	60fb      	str	r3, [r7, #12]
        break;
 8004c52:	e012      	b.n	8004c7a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	60fb      	str	r3, [r7, #12]
        break;
 8004c5a:	e00e      	b.n	8004c7a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	099b      	lsrs	r3, r3, #6
 8004c60:	60fb      	str	r3, [r7, #12]
        break;
 8004c62:	e00a      	b.n	8004c7a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	09db      	lsrs	r3, r3, #7
 8004c68:	60fb      	str	r3, [r7, #12]
        break;
 8004c6a:	e006      	b.n	8004c7a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	0a1b      	lsrs	r3, r3, #8
 8004c70:	60fb      	str	r3, [r7, #12]
        break;
 8004c72:	e002      	b.n	8004c7a <ADC_ConfigureBoostMode+0x146>
        break;
 8004c74:	bf00      	nop
 8004c76:	e000      	b.n	8004c7a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004c78:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004c7a:	f7fe fba5 	bl	80033c8 <HAL_GetREVID>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f241 0203 	movw	r2, #4099	; 0x1003
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d815      	bhi.n	8004cb4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4a2b      	ldr	r2, [pc, #172]	; (8004d38 <ADC_ConfigureBoostMode+0x204>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d908      	bls.n	8004ca2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689a      	ldr	r2, [r3, #8]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c9e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ca0:	e03e      	b.n	8004d20 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cb0:	609a      	str	r2, [r3, #8]
}
 8004cb2:	e035      	b.n	8004d20 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a1f      	ldr	r2, [pc, #124]	; (8004d3c <ADC_ConfigureBoostMode+0x208>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d808      	bhi.n	8004cd4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004cd0:	609a      	str	r2, [r3, #8]
}
 8004cd2:	e025      	b.n	8004d20 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4a1a      	ldr	r2, [pc, #104]	; (8004d40 <ADC_ConfigureBoostMode+0x20c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d80a      	bhi.n	8004cf2 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cee:	609a      	str	r2, [r3, #8]
}
 8004cf0:	e016      	b.n	8004d20 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <ADC_ConfigureBoostMode+0x210>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d80a      	bhi.n	8004d10 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d0c:	609a      	str	r2, [r3, #8]
}
 8004d0e:	e007      	b.n	8004d20 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004d1e:	609a      	str	r2, [r3, #8]
}
 8004d20:	bf00      	nop
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40022000 	.word	0x40022000
 8004d2c:	40022100 	.word	0x40022100
 8004d30:	40022300 	.word	0x40022300
 8004d34:	58026300 	.word	0x58026300
 8004d38:	01312d00 	.word	0x01312d00
 8004d3c:	005f5e10 	.word	0x005f5e10
 8004d40:	00bebc20 	.word	0x00bebc20
 8004d44:	017d7840 	.word	0x017d7840

08004d48 <LL_ADC_StartCalibration>:
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <LL_ADC_StartCalibration+0x38>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	609a      	str	r2, [r3, #8]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	3ffeffc0 	.word	0x3ffeffc0

08004d84 <LL_ADC_IsCalibrationOnGoing>:
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d98:	d101      	bne.n	8004d9e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e000      	b.n	8004da0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_ADCEx_Calibration_Start+0x1e>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e04c      	b.n	8004e64 <HAL_ADCEx_Calibration_Start+0xb8>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f7ff fe4e 	bl	8004a74 <ADC_Disable>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d135      	bne.n	8004e4e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004de6:	4b21      	ldr	r3, [pc, #132]	; (8004e6c <HAL_ADCEx_Calibration_Start+0xc0>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	f043 0202 	orr.w	r2, r3, #2
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	68b9      	ldr	r1, [r7, #8]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7ff ffa4 	bl	8004d48 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e00:	e014      	b.n	8004e2c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	3301      	adds	r3, #1
 8004e06:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	4a19      	ldr	r2, [pc, #100]	; (8004e70 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d30d      	bcc.n	8004e2c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e14:	f023 0312 	bic.w	r3, r3, #18
 8004e18:	f043 0210 	orr.w	r2, r3, #16
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e01b      	b.n	8004e64 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff ffa7 	bl	8004d84 <LL_ADC_IsCalibrationOnGoing>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e2      	bne.n	8004e02 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e40:	f023 0303 	bic.w	r3, r3, #3
 8004e44:	f043 0201 	orr.w	r2, r3, #1
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	655a      	str	r2, [r3, #84]	; 0x54
 8004e4c:	e005      	b.n	8004e5a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e52:	f043 0210 	orr.w	r2, r3, #16
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3718      	adds	r7, #24
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	ffffeefd 	.word	0xffffeefd
 8004e70:	25c3f800 	.word	0x25c3f800

08004e74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ee8:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <__NVIC_SetPriorityGrouping+0x40>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004f00:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <__NVIC_SetPriorityGrouping+0x44>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f06:	4a04      	ldr	r2, [pc, #16]	; (8004f18 <__NVIC_SetPriorityGrouping+0x40>)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	60d3      	str	r3, [r2, #12]
}
 8004f0c:	bf00      	nop
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	e000ed00 	.word	0xe000ed00
 8004f1c:	05fa0000 	.word	0x05fa0000

08004f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f24:	4b04      	ldr	r3, [pc, #16]	; (8004f38 <__NVIC_GetPriorityGrouping+0x18>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	0a1b      	lsrs	r3, r3, #8
 8004f2a:	f003 0307 	and.w	r3, r3, #7
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	e000ed00 	.word	0xe000ed00

08004f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	4603      	mov	r3, r0
 8004f44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	db0b      	blt.n	8004f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	f003 021f 	and.w	r2, r3, #31
 8004f54:	4907      	ldr	r1, [pc, #28]	; (8004f74 <__NVIC_EnableIRQ+0x38>)
 8004f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	2001      	movs	r0, #1
 8004f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	e000e100 	.word	0xe000e100

08004f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	4603      	mov	r3, r0
 8004f80:	6039      	str	r1, [r7, #0]
 8004f82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	db0a      	blt.n	8004fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	b2da      	uxtb	r2, r3
 8004f90:	490c      	ldr	r1, [pc, #48]	; (8004fc4 <__NVIC_SetPriority+0x4c>)
 8004f92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f96:	0112      	lsls	r2, r2, #4
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fa0:	e00a      	b.n	8004fb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	4908      	ldr	r1, [pc, #32]	; (8004fc8 <__NVIC_SetPriority+0x50>)
 8004fa8:	88fb      	ldrh	r3, [r7, #6]
 8004faa:	f003 030f 	and.w	r3, r3, #15
 8004fae:	3b04      	subs	r3, #4
 8004fb0:	0112      	lsls	r2, r2, #4
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	761a      	strb	r2, [r3, #24]
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	e000e100 	.word	0xe000e100
 8004fc8:	e000ed00 	.word	0xe000ed00

08004fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b089      	sub	sp, #36	; 0x24
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f1c3 0307 	rsb	r3, r3, #7
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	bf28      	it	cs
 8004fea:	2304      	movcs	r3, #4
 8004fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	2b06      	cmp	r3, #6
 8004ff4:	d902      	bls.n	8004ffc <NVIC_EncodePriority+0x30>
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3b03      	subs	r3, #3
 8004ffa:	e000      	b.n	8004ffe <NVIC_EncodePriority+0x32>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005000:	f04f 32ff 	mov.w	r2, #4294967295
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	43da      	mvns	r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	401a      	ands	r2, r3
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005014:	f04f 31ff 	mov.w	r1, #4294967295
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	fa01 f303 	lsl.w	r3, r1, r3
 800501e:	43d9      	mvns	r1, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005024:	4313      	orrs	r3, r2
         );
}
 8005026:	4618      	mov	r0, r3
 8005028:	3724      	adds	r7, #36	; 0x24
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3b01      	subs	r3, #1
 8005040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005044:	d301      	bcc.n	800504a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005046:	2301      	movs	r3, #1
 8005048:	e00f      	b.n	800506a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800504a:	4a0a      	ldr	r2, [pc, #40]	; (8005074 <SysTick_Config+0x40>)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3b01      	subs	r3, #1
 8005050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005052:	210f      	movs	r1, #15
 8005054:	f04f 30ff 	mov.w	r0, #4294967295
 8005058:	f7ff ff8e 	bl	8004f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <SysTick_Config+0x40>)
 800505e:	2200      	movs	r2, #0
 8005060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005062:	4b04      	ldr	r3, [pc, #16]	; (8005074 <SysTick_Config+0x40>)
 8005064:	2207      	movs	r2, #7
 8005066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	e000e010 	.word	0xe000e010

08005078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff ff29 	bl	8004ed8 <__NVIC_SetPriorityGrouping>
}
 8005086:	bf00      	nop
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b086      	sub	sp, #24
 8005092:	af00      	add	r7, sp, #0
 8005094:	4603      	mov	r3, r0
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800509c:	f7ff ff40 	bl	8004f20 <__NVIC_GetPriorityGrouping>
 80050a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	6978      	ldr	r0, [r7, #20]
 80050a8:	f7ff ff90 	bl	8004fcc <NVIC_EncodePriority>
 80050ac:	4602      	mov	r2, r0
 80050ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80050b2:	4611      	mov	r1, r2
 80050b4:	4618      	mov	r0, r3
 80050b6:	f7ff ff5f 	bl	8004f78 <__NVIC_SetPriority>
}
 80050ba:	bf00      	nop
 80050bc:	3718      	adds	r7, #24
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b082      	sub	sp, #8
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	4603      	mov	r3, r0
 80050ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff ff33 	bl	8004f3c <__NVIC_EnableIRQ>
}
 80050d6:	bf00      	nop
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff ffa4 	bl	8005034 <SysTick_Config>
 80050ec:	4603      	mov	r3, r0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005100:	f7fe f932 	bl	8003368 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e316      	b.n	800573e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a66      	ldr	r2, [pc, #408]	; (80052b0 <HAL_DMA_Init+0x1b8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d04a      	beq.n	80051b0 <HAL_DMA_Init+0xb8>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a65      	ldr	r2, [pc, #404]	; (80052b4 <HAL_DMA_Init+0x1bc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d045      	beq.n	80051b0 <HAL_DMA_Init+0xb8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a63      	ldr	r2, [pc, #396]	; (80052b8 <HAL_DMA_Init+0x1c0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d040      	beq.n	80051b0 <HAL_DMA_Init+0xb8>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a62      	ldr	r2, [pc, #392]	; (80052bc <HAL_DMA_Init+0x1c4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d03b      	beq.n	80051b0 <HAL_DMA_Init+0xb8>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a60      	ldr	r2, [pc, #384]	; (80052c0 <HAL_DMA_Init+0x1c8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d036      	beq.n	80051b0 <HAL_DMA_Init+0xb8>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a5f      	ldr	r2, [pc, #380]	; (80052c4 <HAL_DMA_Init+0x1cc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d031      	beq.n	80051b0 <HAL_DMA_Init+0xb8>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a5d      	ldr	r2, [pc, #372]	; (80052c8 <HAL_DMA_Init+0x1d0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d02c      	beq.n	80051b0 <HAL_DMA_Init+0xb8>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a5c      	ldr	r2, [pc, #368]	; (80052cc <HAL_DMA_Init+0x1d4>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d027      	beq.n	80051b0 <HAL_DMA_Init+0xb8>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a5a      	ldr	r2, [pc, #360]	; (80052d0 <HAL_DMA_Init+0x1d8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d022      	beq.n	80051b0 <HAL_DMA_Init+0xb8>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a59      	ldr	r2, [pc, #356]	; (80052d4 <HAL_DMA_Init+0x1dc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d01d      	beq.n	80051b0 <HAL_DMA_Init+0xb8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a57      	ldr	r2, [pc, #348]	; (80052d8 <HAL_DMA_Init+0x1e0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d018      	beq.n	80051b0 <HAL_DMA_Init+0xb8>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a56      	ldr	r2, [pc, #344]	; (80052dc <HAL_DMA_Init+0x1e4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d013      	beq.n	80051b0 <HAL_DMA_Init+0xb8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a54      	ldr	r2, [pc, #336]	; (80052e0 <HAL_DMA_Init+0x1e8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d00e      	beq.n	80051b0 <HAL_DMA_Init+0xb8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a53      	ldr	r2, [pc, #332]	; (80052e4 <HAL_DMA_Init+0x1ec>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d009      	beq.n	80051b0 <HAL_DMA_Init+0xb8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a51      	ldr	r2, [pc, #324]	; (80052e8 <HAL_DMA_Init+0x1f0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d004      	beq.n	80051b0 <HAL_DMA_Init+0xb8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a50      	ldr	r2, [pc, #320]	; (80052ec <HAL_DMA_Init+0x1f4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d101      	bne.n	80051b4 <HAL_DMA_Init+0xbc>
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <HAL_DMA_Init+0xbe>
 80051b4:	2300      	movs	r3, #0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 813b 	beq.w	8005432 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a37      	ldr	r2, [pc, #220]	; (80052b0 <HAL_DMA_Init+0x1b8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d04a      	beq.n	800526c <HAL_DMA_Init+0x174>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a36      	ldr	r2, [pc, #216]	; (80052b4 <HAL_DMA_Init+0x1bc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d045      	beq.n	800526c <HAL_DMA_Init+0x174>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a34      	ldr	r2, [pc, #208]	; (80052b8 <HAL_DMA_Init+0x1c0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d040      	beq.n	800526c <HAL_DMA_Init+0x174>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a33      	ldr	r2, [pc, #204]	; (80052bc <HAL_DMA_Init+0x1c4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d03b      	beq.n	800526c <HAL_DMA_Init+0x174>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a31      	ldr	r2, [pc, #196]	; (80052c0 <HAL_DMA_Init+0x1c8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d036      	beq.n	800526c <HAL_DMA_Init+0x174>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a30      	ldr	r2, [pc, #192]	; (80052c4 <HAL_DMA_Init+0x1cc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d031      	beq.n	800526c <HAL_DMA_Init+0x174>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a2e      	ldr	r2, [pc, #184]	; (80052c8 <HAL_DMA_Init+0x1d0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d02c      	beq.n	800526c <HAL_DMA_Init+0x174>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a2d      	ldr	r2, [pc, #180]	; (80052cc <HAL_DMA_Init+0x1d4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d027      	beq.n	800526c <HAL_DMA_Init+0x174>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a2b      	ldr	r2, [pc, #172]	; (80052d0 <HAL_DMA_Init+0x1d8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d022      	beq.n	800526c <HAL_DMA_Init+0x174>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a2a      	ldr	r2, [pc, #168]	; (80052d4 <HAL_DMA_Init+0x1dc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d01d      	beq.n	800526c <HAL_DMA_Init+0x174>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a28      	ldr	r2, [pc, #160]	; (80052d8 <HAL_DMA_Init+0x1e0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d018      	beq.n	800526c <HAL_DMA_Init+0x174>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a27      	ldr	r2, [pc, #156]	; (80052dc <HAL_DMA_Init+0x1e4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d013      	beq.n	800526c <HAL_DMA_Init+0x174>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a25      	ldr	r2, [pc, #148]	; (80052e0 <HAL_DMA_Init+0x1e8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00e      	beq.n	800526c <HAL_DMA_Init+0x174>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a24      	ldr	r2, [pc, #144]	; (80052e4 <HAL_DMA_Init+0x1ec>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d009      	beq.n	800526c <HAL_DMA_Init+0x174>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a22      	ldr	r2, [pc, #136]	; (80052e8 <HAL_DMA_Init+0x1f0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d004      	beq.n	800526c <HAL_DMA_Init+0x174>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a21      	ldr	r2, [pc, #132]	; (80052ec <HAL_DMA_Init+0x1f4>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d108      	bne.n	800527e <HAL_DMA_Init+0x186>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0201 	bic.w	r2, r2, #1
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	e007      	b.n	800528e <HAL_DMA_Init+0x196>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0201 	bic.w	r2, r2, #1
 800528c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800528e:	e02f      	b.n	80052f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005290:	f7fe f86a 	bl	8003368 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b05      	cmp	r3, #5
 800529c:	d928      	bls.n	80052f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2203      	movs	r2, #3
 80052a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e246      	b.n	800573e <HAL_DMA_Init+0x646>
 80052b0:	40020010 	.word	0x40020010
 80052b4:	40020028 	.word	0x40020028
 80052b8:	40020040 	.word	0x40020040
 80052bc:	40020058 	.word	0x40020058
 80052c0:	40020070 	.word	0x40020070
 80052c4:	40020088 	.word	0x40020088
 80052c8:	400200a0 	.word	0x400200a0
 80052cc:	400200b8 	.word	0x400200b8
 80052d0:	40020410 	.word	0x40020410
 80052d4:	40020428 	.word	0x40020428
 80052d8:	40020440 	.word	0x40020440
 80052dc:	40020458 	.word	0x40020458
 80052e0:	40020470 	.word	0x40020470
 80052e4:	40020488 	.word	0x40020488
 80052e8:	400204a0 	.word	0x400204a0
 80052ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1c8      	bne.n	8005290 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4b83      	ldr	r3, [pc, #524]	; (8005518 <HAL_DMA_Init+0x420>)
 800530a:	4013      	ands	r3, r2
 800530c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005316:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005322:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800532e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	2b04      	cmp	r3, #4
 8005342:	d107      	bne.n	8005354 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	4313      	orrs	r3, r2
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005354:	4b71      	ldr	r3, [pc, #452]	; (800551c <HAL_DMA_Init+0x424>)
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	4b71      	ldr	r3, [pc, #452]	; (8005520 <HAL_DMA_Init+0x428>)
 800535a:	4013      	ands	r3, r2
 800535c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005360:	d328      	bcc.n	80053b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b28      	cmp	r3, #40	; 0x28
 8005368:	d903      	bls.n	8005372 <HAL_DMA_Init+0x27a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b2e      	cmp	r3, #46	; 0x2e
 8005370:	d917      	bls.n	80053a2 <HAL_DMA_Init+0x2aa>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b3e      	cmp	r3, #62	; 0x3e
 8005378:	d903      	bls.n	8005382 <HAL_DMA_Init+0x28a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	2b42      	cmp	r3, #66	; 0x42
 8005380:	d90f      	bls.n	80053a2 <HAL_DMA_Init+0x2aa>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2b46      	cmp	r3, #70	; 0x46
 8005388:	d903      	bls.n	8005392 <HAL_DMA_Init+0x29a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b48      	cmp	r3, #72	; 0x48
 8005390:	d907      	bls.n	80053a2 <HAL_DMA_Init+0x2aa>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b4e      	cmp	r3, #78	; 0x4e
 8005398:	d905      	bls.n	80053a6 <HAL_DMA_Init+0x2ae>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b52      	cmp	r3, #82	; 0x52
 80053a0:	d801      	bhi.n	80053a6 <HAL_DMA_Init+0x2ae>
 80053a2:	2301      	movs	r3, #1
 80053a4:	e000      	b.n	80053a8 <HAL_DMA_Init+0x2b0>
 80053a6:	2300      	movs	r3, #0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f023 0307 	bic.w	r3, r3, #7
 80053ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d117      	bne.n	800540e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00e      	beq.n	800540e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f002 fb3f 	bl	8007a74 <DMA_CheckFifoParam>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2240      	movs	r2, #64	; 0x40
 8005400:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e197      	b.n	800573e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f002 fa7a 	bl	8007910 <DMA_CalcBaseAndBitshift>
 800541c:	4603      	mov	r3, r0
 800541e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	223f      	movs	r2, #63	; 0x3f
 800542a:	409a      	lsls	r2, r3
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	609a      	str	r2, [r3, #8]
 8005430:	e0cd      	b.n	80055ce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a3b      	ldr	r2, [pc, #236]	; (8005524 <HAL_DMA_Init+0x42c>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d022      	beq.n	8005482 <HAL_DMA_Init+0x38a>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a39      	ldr	r2, [pc, #228]	; (8005528 <HAL_DMA_Init+0x430>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d01d      	beq.n	8005482 <HAL_DMA_Init+0x38a>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a38      	ldr	r2, [pc, #224]	; (800552c <HAL_DMA_Init+0x434>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d018      	beq.n	8005482 <HAL_DMA_Init+0x38a>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a36      	ldr	r2, [pc, #216]	; (8005530 <HAL_DMA_Init+0x438>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d013      	beq.n	8005482 <HAL_DMA_Init+0x38a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a35      	ldr	r2, [pc, #212]	; (8005534 <HAL_DMA_Init+0x43c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00e      	beq.n	8005482 <HAL_DMA_Init+0x38a>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a33      	ldr	r2, [pc, #204]	; (8005538 <HAL_DMA_Init+0x440>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d009      	beq.n	8005482 <HAL_DMA_Init+0x38a>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a32      	ldr	r2, [pc, #200]	; (800553c <HAL_DMA_Init+0x444>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d004      	beq.n	8005482 <HAL_DMA_Init+0x38a>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a30      	ldr	r2, [pc, #192]	; (8005540 <HAL_DMA_Init+0x448>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d101      	bne.n	8005486 <HAL_DMA_Init+0x38e>
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <HAL_DMA_Init+0x390>
 8005486:	2300      	movs	r3, #0
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 8097 	beq.w	80055bc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a24      	ldr	r2, [pc, #144]	; (8005524 <HAL_DMA_Init+0x42c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d021      	beq.n	80054dc <HAL_DMA_Init+0x3e4>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a22      	ldr	r2, [pc, #136]	; (8005528 <HAL_DMA_Init+0x430>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01c      	beq.n	80054dc <HAL_DMA_Init+0x3e4>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a21      	ldr	r2, [pc, #132]	; (800552c <HAL_DMA_Init+0x434>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d017      	beq.n	80054dc <HAL_DMA_Init+0x3e4>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1f      	ldr	r2, [pc, #124]	; (8005530 <HAL_DMA_Init+0x438>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d012      	beq.n	80054dc <HAL_DMA_Init+0x3e4>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1e      	ldr	r2, [pc, #120]	; (8005534 <HAL_DMA_Init+0x43c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00d      	beq.n	80054dc <HAL_DMA_Init+0x3e4>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1c      	ldr	r2, [pc, #112]	; (8005538 <HAL_DMA_Init+0x440>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d008      	beq.n	80054dc <HAL_DMA_Init+0x3e4>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1b      	ldr	r2, [pc, #108]	; (800553c <HAL_DMA_Init+0x444>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <HAL_DMA_Init+0x3e4>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a19      	ldr	r2, [pc, #100]	; (8005540 <HAL_DMA_Init+0x448>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2202      	movs	r2, #2
 80054e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4b12      	ldr	r3, [pc, #72]	; (8005544 <HAL_DMA_Init+0x44c>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	2b40      	cmp	r3, #64	; 0x40
 8005504:	d020      	beq.n	8005548 <HAL_DMA_Init+0x450>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	2b80      	cmp	r3, #128	; 0x80
 800550c:	d102      	bne.n	8005514 <HAL_DMA_Init+0x41c>
 800550e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005512:	e01a      	b.n	800554a <HAL_DMA_Init+0x452>
 8005514:	2300      	movs	r3, #0
 8005516:	e018      	b.n	800554a <HAL_DMA_Init+0x452>
 8005518:	fe10803f 	.word	0xfe10803f
 800551c:	5c001000 	.word	0x5c001000
 8005520:	ffff0000 	.word	0xffff0000
 8005524:	58025408 	.word	0x58025408
 8005528:	5802541c 	.word	0x5802541c
 800552c:	58025430 	.word	0x58025430
 8005530:	58025444 	.word	0x58025444
 8005534:	58025458 	.word	0x58025458
 8005538:	5802546c 	.word	0x5802546c
 800553c:	58025480 	.word	0x58025480
 8005540:	58025494 	.word	0x58025494
 8005544:	fffe000f 	.word	0xfffe000f
 8005548:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	68d2      	ldr	r2, [r2, #12]
 800554e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005550:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005558:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005560:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005568:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005570:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005578:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	4b6e      	ldr	r3, [pc, #440]	; (8005748 <HAL_DMA_Init+0x650>)
 8005590:	4413      	add	r3, r2
 8005592:	4a6e      	ldr	r2, [pc, #440]	; (800574c <HAL_DMA_Init+0x654>)
 8005594:	fba2 2303 	umull	r2, r3, r2, r3
 8005598:	091b      	lsrs	r3, r3, #4
 800559a:	009a      	lsls	r2, r3, #2
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f002 f9b5 	bl	8007910 <DMA_CalcBaseAndBitshift>
 80055a6:	4603      	mov	r3, r0
 80055a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	2201      	movs	r2, #1
 80055b4:	409a      	lsls	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	605a      	str	r2, [r3, #4]
 80055ba:	e008      	b.n	80055ce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2240      	movs	r2, #64	; 0x40
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2203      	movs	r2, #3
 80055c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e0b7      	b.n	800573e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a5f      	ldr	r2, [pc, #380]	; (8005750 <HAL_DMA_Init+0x658>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d072      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a5d      	ldr	r2, [pc, #372]	; (8005754 <HAL_DMA_Init+0x65c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d06d      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a5c      	ldr	r2, [pc, #368]	; (8005758 <HAL_DMA_Init+0x660>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d068      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a5a      	ldr	r2, [pc, #360]	; (800575c <HAL_DMA_Init+0x664>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d063      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a59      	ldr	r2, [pc, #356]	; (8005760 <HAL_DMA_Init+0x668>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d05e      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a57      	ldr	r2, [pc, #348]	; (8005764 <HAL_DMA_Init+0x66c>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d059      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a56      	ldr	r2, [pc, #344]	; (8005768 <HAL_DMA_Init+0x670>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d054      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a54      	ldr	r2, [pc, #336]	; (800576c <HAL_DMA_Init+0x674>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d04f      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a53      	ldr	r2, [pc, #332]	; (8005770 <HAL_DMA_Init+0x678>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d04a      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a51      	ldr	r2, [pc, #324]	; (8005774 <HAL_DMA_Init+0x67c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d045      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a50      	ldr	r2, [pc, #320]	; (8005778 <HAL_DMA_Init+0x680>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d040      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a4e      	ldr	r2, [pc, #312]	; (800577c <HAL_DMA_Init+0x684>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d03b      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a4d      	ldr	r2, [pc, #308]	; (8005780 <HAL_DMA_Init+0x688>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d036      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a4b      	ldr	r2, [pc, #300]	; (8005784 <HAL_DMA_Init+0x68c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d031      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a4a      	ldr	r2, [pc, #296]	; (8005788 <HAL_DMA_Init+0x690>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d02c      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a48      	ldr	r2, [pc, #288]	; (800578c <HAL_DMA_Init+0x694>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d027      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a47      	ldr	r2, [pc, #284]	; (8005790 <HAL_DMA_Init+0x698>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d022      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a45      	ldr	r2, [pc, #276]	; (8005794 <HAL_DMA_Init+0x69c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d01d      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a44      	ldr	r2, [pc, #272]	; (8005798 <HAL_DMA_Init+0x6a0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d018      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a42      	ldr	r2, [pc, #264]	; (800579c <HAL_DMA_Init+0x6a4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d013      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a41      	ldr	r2, [pc, #260]	; (80057a0 <HAL_DMA_Init+0x6a8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00e      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a3f      	ldr	r2, [pc, #252]	; (80057a4 <HAL_DMA_Init+0x6ac>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d009      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a3e      	ldr	r2, [pc, #248]	; (80057a8 <HAL_DMA_Init+0x6b0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d004      	beq.n	80056be <HAL_DMA_Init+0x5c6>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a3c      	ldr	r2, [pc, #240]	; (80057ac <HAL_DMA_Init+0x6b4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d101      	bne.n	80056c2 <HAL_DMA_Init+0x5ca>
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <HAL_DMA_Init+0x5cc>
 80056c2:	2300      	movs	r3, #0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d032      	beq.n	800572e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f002 fa4f 	bl	8007b6c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	2b80      	cmp	r3, #128	; 0x80
 80056d4:	d102      	bne.n	80056dc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e4:	b2d2      	uxtb	r2, r2
 80056e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80056f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d010      	beq.n	800571c <HAL_DMA_Init+0x624>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b08      	cmp	r3, #8
 8005700:	d80c      	bhi.n	800571c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f002 facc 	bl	8007ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005718:	605a      	str	r2, [r3, #4]
 800571a:	e008      	b.n	800572e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	a7fdabf8 	.word	0xa7fdabf8
 800574c:	cccccccd 	.word	0xcccccccd
 8005750:	40020010 	.word	0x40020010
 8005754:	40020028 	.word	0x40020028
 8005758:	40020040 	.word	0x40020040
 800575c:	40020058 	.word	0x40020058
 8005760:	40020070 	.word	0x40020070
 8005764:	40020088 	.word	0x40020088
 8005768:	400200a0 	.word	0x400200a0
 800576c:	400200b8 	.word	0x400200b8
 8005770:	40020410 	.word	0x40020410
 8005774:	40020428 	.word	0x40020428
 8005778:	40020440 	.word	0x40020440
 800577c:	40020458 	.word	0x40020458
 8005780:	40020470 	.word	0x40020470
 8005784:	40020488 	.word	0x40020488
 8005788:	400204a0 	.word	0x400204a0
 800578c:	400204b8 	.word	0x400204b8
 8005790:	58025408 	.word	0x58025408
 8005794:	5802541c 	.word	0x5802541c
 8005798:	58025430 	.word	0x58025430
 800579c:	58025444 	.word	0x58025444
 80057a0:	58025458 	.word	0x58025458
 80057a4:	5802546c 	.word	0x5802546c
 80057a8:	58025480 	.word	0x58025480
 80057ac:	58025494 	.word	0x58025494

080057b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e226      	b.n	8005c1a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d101      	bne.n	80057da <HAL_DMA_Start_IT+0x2a>
 80057d6:	2302      	movs	r3, #2
 80057d8:	e21f      	b.n	8005c1a <HAL_DMA_Start_IT+0x46a>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	f040 820a 	bne.w	8005c04 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a68      	ldr	r2, [pc, #416]	; (80059a4 <HAL_DMA_Start_IT+0x1f4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d04a      	beq.n	800589e <HAL_DMA_Start_IT+0xee>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a66      	ldr	r2, [pc, #408]	; (80059a8 <HAL_DMA_Start_IT+0x1f8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d045      	beq.n	800589e <HAL_DMA_Start_IT+0xee>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a65      	ldr	r2, [pc, #404]	; (80059ac <HAL_DMA_Start_IT+0x1fc>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d040      	beq.n	800589e <HAL_DMA_Start_IT+0xee>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a63      	ldr	r2, [pc, #396]	; (80059b0 <HAL_DMA_Start_IT+0x200>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d03b      	beq.n	800589e <HAL_DMA_Start_IT+0xee>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a62      	ldr	r2, [pc, #392]	; (80059b4 <HAL_DMA_Start_IT+0x204>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d036      	beq.n	800589e <HAL_DMA_Start_IT+0xee>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a60      	ldr	r2, [pc, #384]	; (80059b8 <HAL_DMA_Start_IT+0x208>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d031      	beq.n	800589e <HAL_DMA_Start_IT+0xee>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a5f      	ldr	r2, [pc, #380]	; (80059bc <HAL_DMA_Start_IT+0x20c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d02c      	beq.n	800589e <HAL_DMA_Start_IT+0xee>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a5d      	ldr	r2, [pc, #372]	; (80059c0 <HAL_DMA_Start_IT+0x210>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d027      	beq.n	800589e <HAL_DMA_Start_IT+0xee>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a5c      	ldr	r2, [pc, #368]	; (80059c4 <HAL_DMA_Start_IT+0x214>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d022      	beq.n	800589e <HAL_DMA_Start_IT+0xee>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a5a      	ldr	r2, [pc, #360]	; (80059c8 <HAL_DMA_Start_IT+0x218>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d01d      	beq.n	800589e <HAL_DMA_Start_IT+0xee>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a59      	ldr	r2, [pc, #356]	; (80059cc <HAL_DMA_Start_IT+0x21c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d018      	beq.n	800589e <HAL_DMA_Start_IT+0xee>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a57      	ldr	r2, [pc, #348]	; (80059d0 <HAL_DMA_Start_IT+0x220>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d013      	beq.n	800589e <HAL_DMA_Start_IT+0xee>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a56      	ldr	r2, [pc, #344]	; (80059d4 <HAL_DMA_Start_IT+0x224>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00e      	beq.n	800589e <HAL_DMA_Start_IT+0xee>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a54      	ldr	r2, [pc, #336]	; (80059d8 <HAL_DMA_Start_IT+0x228>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d009      	beq.n	800589e <HAL_DMA_Start_IT+0xee>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a53      	ldr	r2, [pc, #332]	; (80059dc <HAL_DMA_Start_IT+0x22c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d004      	beq.n	800589e <HAL_DMA_Start_IT+0xee>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a51      	ldr	r2, [pc, #324]	; (80059e0 <HAL_DMA_Start_IT+0x230>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d108      	bne.n	80058b0 <HAL_DMA_Start_IT+0x100>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0201 	bic.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	e007      	b.n	80058c0 <HAL_DMA_Start_IT+0x110>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0201 	bic.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f001 fe76 	bl	80075b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a34      	ldr	r2, [pc, #208]	; (80059a4 <HAL_DMA_Start_IT+0x1f4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d04a      	beq.n	800596c <HAL_DMA_Start_IT+0x1bc>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a33      	ldr	r2, [pc, #204]	; (80059a8 <HAL_DMA_Start_IT+0x1f8>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d045      	beq.n	800596c <HAL_DMA_Start_IT+0x1bc>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a31      	ldr	r2, [pc, #196]	; (80059ac <HAL_DMA_Start_IT+0x1fc>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d040      	beq.n	800596c <HAL_DMA_Start_IT+0x1bc>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a30      	ldr	r2, [pc, #192]	; (80059b0 <HAL_DMA_Start_IT+0x200>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d03b      	beq.n	800596c <HAL_DMA_Start_IT+0x1bc>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a2e      	ldr	r2, [pc, #184]	; (80059b4 <HAL_DMA_Start_IT+0x204>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d036      	beq.n	800596c <HAL_DMA_Start_IT+0x1bc>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a2d      	ldr	r2, [pc, #180]	; (80059b8 <HAL_DMA_Start_IT+0x208>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d031      	beq.n	800596c <HAL_DMA_Start_IT+0x1bc>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a2b      	ldr	r2, [pc, #172]	; (80059bc <HAL_DMA_Start_IT+0x20c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d02c      	beq.n	800596c <HAL_DMA_Start_IT+0x1bc>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a2a      	ldr	r2, [pc, #168]	; (80059c0 <HAL_DMA_Start_IT+0x210>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d027      	beq.n	800596c <HAL_DMA_Start_IT+0x1bc>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a28      	ldr	r2, [pc, #160]	; (80059c4 <HAL_DMA_Start_IT+0x214>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d022      	beq.n	800596c <HAL_DMA_Start_IT+0x1bc>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a27      	ldr	r2, [pc, #156]	; (80059c8 <HAL_DMA_Start_IT+0x218>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d01d      	beq.n	800596c <HAL_DMA_Start_IT+0x1bc>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a25      	ldr	r2, [pc, #148]	; (80059cc <HAL_DMA_Start_IT+0x21c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d018      	beq.n	800596c <HAL_DMA_Start_IT+0x1bc>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a24      	ldr	r2, [pc, #144]	; (80059d0 <HAL_DMA_Start_IT+0x220>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <HAL_DMA_Start_IT+0x1bc>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a22      	ldr	r2, [pc, #136]	; (80059d4 <HAL_DMA_Start_IT+0x224>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00e      	beq.n	800596c <HAL_DMA_Start_IT+0x1bc>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a21      	ldr	r2, [pc, #132]	; (80059d8 <HAL_DMA_Start_IT+0x228>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d009      	beq.n	800596c <HAL_DMA_Start_IT+0x1bc>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1f      	ldr	r2, [pc, #124]	; (80059dc <HAL_DMA_Start_IT+0x22c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d004      	beq.n	800596c <HAL_DMA_Start_IT+0x1bc>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1e      	ldr	r2, [pc, #120]	; (80059e0 <HAL_DMA_Start_IT+0x230>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d101      	bne.n	8005970 <HAL_DMA_Start_IT+0x1c0>
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <HAL_DMA_Start_IT+0x1c2>
 8005970:	2300      	movs	r3, #0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d036      	beq.n	80059e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f023 021e 	bic.w	r2, r3, #30
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0216 	orr.w	r2, r2, #22
 8005988:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	2b00      	cmp	r3, #0
 8005990:	d03e      	beq.n	8005a10 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0208 	orr.w	r2, r2, #8
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	e035      	b.n	8005a10 <HAL_DMA_Start_IT+0x260>
 80059a4:	40020010 	.word	0x40020010
 80059a8:	40020028 	.word	0x40020028
 80059ac:	40020040 	.word	0x40020040
 80059b0:	40020058 	.word	0x40020058
 80059b4:	40020070 	.word	0x40020070
 80059b8:	40020088 	.word	0x40020088
 80059bc:	400200a0 	.word	0x400200a0
 80059c0:	400200b8 	.word	0x400200b8
 80059c4:	40020410 	.word	0x40020410
 80059c8:	40020428 	.word	0x40020428
 80059cc:	40020440 	.word	0x40020440
 80059d0:	40020458 	.word	0x40020458
 80059d4:	40020470 	.word	0x40020470
 80059d8:	40020488 	.word	0x40020488
 80059dc:	400204a0 	.word	0x400204a0
 80059e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f023 020e 	bic.w	r2, r3, #14
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 020a 	orr.w	r2, r2, #10
 80059f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d007      	beq.n	8005a10 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0204 	orr.w	r2, r2, #4
 8005a0e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a83      	ldr	r2, [pc, #524]	; (8005c24 <HAL_DMA_Start_IT+0x474>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d072      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a82      	ldr	r2, [pc, #520]	; (8005c28 <HAL_DMA_Start_IT+0x478>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d06d      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a80      	ldr	r2, [pc, #512]	; (8005c2c <HAL_DMA_Start_IT+0x47c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d068      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a7f      	ldr	r2, [pc, #508]	; (8005c30 <HAL_DMA_Start_IT+0x480>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d063      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a7d      	ldr	r2, [pc, #500]	; (8005c34 <HAL_DMA_Start_IT+0x484>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d05e      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a7c      	ldr	r2, [pc, #496]	; (8005c38 <HAL_DMA_Start_IT+0x488>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d059      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a7a      	ldr	r2, [pc, #488]	; (8005c3c <HAL_DMA_Start_IT+0x48c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d054      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a79      	ldr	r2, [pc, #484]	; (8005c40 <HAL_DMA_Start_IT+0x490>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d04f      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a77      	ldr	r2, [pc, #476]	; (8005c44 <HAL_DMA_Start_IT+0x494>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d04a      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a76      	ldr	r2, [pc, #472]	; (8005c48 <HAL_DMA_Start_IT+0x498>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d045      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a74      	ldr	r2, [pc, #464]	; (8005c4c <HAL_DMA_Start_IT+0x49c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d040      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a73      	ldr	r2, [pc, #460]	; (8005c50 <HAL_DMA_Start_IT+0x4a0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d03b      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a71      	ldr	r2, [pc, #452]	; (8005c54 <HAL_DMA_Start_IT+0x4a4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d036      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a70      	ldr	r2, [pc, #448]	; (8005c58 <HAL_DMA_Start_IT+0x4a8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d031      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a6e      	ldr	r2, [pc, #440]	; (8005c5c <HAL_DMA_Start_IT+0x4ac>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d02c      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a6d      	ldr	r2, [pc, #436]	; (8005c60 <HAL_DMA_Start_IT+0x4b0>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d027      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a6b      	ldr	r2, [pc, #428]	; (8005c64 <HAL_DMA_Start_IT+0x4b4>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d022      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a6a      	ldr	r2, [pc, #424]	; (8005c68 <HAL_DMA_Start_IT+0x4b8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d01d      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a68      	ldr	r2, [pc, #416]	; (8005c6c <HAL_DMA_Start_IT+0x4bc>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d018      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a67      	ldr	r2, [pc, #412]	; (8005c70 <HAL_DMA_Start_IT+0x4c0>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d013      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a65      	ldr	r2, [pc, #404]	; (8005c74 <HAL_DMA_Start_IT+0x4c4>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00e      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a64      	ldr	r2, [pc, #400]	; (8005c78 <HAL_DMA_Start_IT+0x4c8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d009      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a62      	ldr	r2, [pc, #392]	; (8005c7c <HAL_DMA_Start_IT+0x4cc>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d004      	beq.n	8005b00 <HAL_DMA_Start_IT+0x350>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a61      	ldr	r2, [pc, #388]	; (8005c80 <HAL_DMA_Start_IT+0x4d0>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d101      	bne.n	8005b04 <HAL_DMA_Start_IT+0x354>
 8005b00:	2301      	movs	r3, #1
 8005b02:	e000      	b.n	8005b06 <HAL_DMA_Start_IT+0x356>
 8005b04:	2300      	movs	r3, #0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01a      	beq.n	8005b40 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d007      	beq.n	8005b28 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a37      	ldr	r2, [pc, #220]	; (8005c24 <HAL_DMA_Start_IT+0x474>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d04a      	beq.n	8005be0 <HAL_DMA_Start_IT+0x430>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a36      	ldr	r2, [pc, #216]	; (8005c28 <HAL_DMA_Start_IT+0x478>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d045      	beq.n	8005be0 <HAL_DMA_Start_IT+0x430>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a34      	ldr	r2, [pc, #208]	; (8005c2c <HAL_DMA_Start_IT+0x47c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d040      	beq.n	8005be0 <HAL_DMA_Start_IT+0x430>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a33      	ldr	r2, [pc, #204]	; (8005c30 <HAL_DMA_Start_IT+0x480>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d03b      	beq.n	8005be0 <HAL_DMA_Start_IT+0x430>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a31      	ldr	r2, [pc, #196]	; (8005c34 <HAL_DMA_Start_IT+0x484>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d036      	beq.n	8005be0 <HAL_DMA_Start_IT+0x430>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a30      	ldr	r2, [pc, #192]	; (8005c38 <HAL_DMA_Start_IT+0x488>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d031      	beq.n	8005be0 <HAL_DMA_Start_IT+0x430>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a2e      	ldr	r2, [pc, #184]	; (8005c3c <HAL_DMA_Start_IT+0x48c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d02c      	beq.n	8005be0 <HAL_DMA_Start_IT+0x430>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a2d      	ldr	r2, [pc, #180]	; (8005c40 <HAL_DMA_Start_IT+0x490>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d027      	beq.n	8005be0 <HAL_DMA_Start_IT+0x430>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a2b      	ldr	r2, [pc, #172]	; (8005c44 <HAL_DMA_Start_IT+0x494>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d022      	beq.n	8005be0 <HAL_DMA_Start_IT+0x430>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a2a      	ldr	r2, [pc, #168]	; (8005c48 <HAL_DMA_Start_IT+0x498>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d01d      	beq.n	8005be0 <HAL_DMA_Start_IT+0x430>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a28      	ldr	r2, [pc, #160]	; (8005c4c <HAL_DMA_Start_IT+0x49c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d018      	beq.n	8005be0 <HAL_DMA_Start_IT+0x430>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a27      	ldr	r2, [pc, #156]	; (8005c50 <HAL_DMA_Start_IT+0x4a0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d013      	beq.n	8005be0 <HAL_DMA_Start_IT+0x430>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a25      	ldr	r2, [pc, #148]	; (8005c54 <HAL_DMA_Start_IT+0x4a4>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00e      	beq.n	8005be0 <HAL_DMA_Start_IT+0x430>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a24      	ldr	r2, [pc, #144]	; (8005c58 <HAL_DMA_Start_IT+0x4a8>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d009      	beq.n	8005be0 <HAL_DMA_Start_IT+0x430>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a22      	ldr	r2, [pc, #136]	; (8005c5c <HAL_DMA_Start_IT+0x4ac>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d004      	beq.n	8005be0 <HAL_DMA_Start_IT+0x430>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a21      	ldr	r2, [pc, #132]	; (8005c60 <HAL_DMA_Start_IT+0x4b0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d108      	bne.n	8005bf2 <HAL_DMA_Start_IT+0x442>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0201 	orr.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	e012      	b.n	8005c18 <HAL_DMA_Start_IT+0x468>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0201 	orr.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	e009      	b.n	8005c18 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40020010 	.word	0x40020010
 8005c28:	40020028 	.word	0x40020028
 8005c2c:	40020040 	.word	0x40020040
 8005c30:	40020058 	.word	0x40020058
 8005c34:	40020070 	.word	0x40020070
 8005c38:	40020088 	.word	0x40020088
 8005c3c:	400200a0 	.word	0x400200a0
 8005c40:	400200b8 	.word	0x400200b8
 8005c44:	40020410 	.word	0x40020410
 8005c48:	40020428 	.word	0x40020428
 8005c4c:	40020440 	.word	0x40020440
 8005c50:	40020458 	.word	0x40020458
 8005c54:	40020470 	.word	0x40020470
 8005c58:	40020488 	.word	0x40020488
 8005c5c:	400204a0 	.word	0x400204a0
 8005c60:	400204b8 	.word	0x400204b8
 8005c64:	58025408 	.word	0x58025408
 8005c68:	5802541c 	.word	0x5802541c
 8005c6c:	58025430 	.word	0x58025430
 8005c70:	58025444 	.word	0x58025444
 8005c74:	58025458 	.word	0x58025458
 8005c78:	5802546c 	.word	0x5802546c
 8005c7c:	58025480 	.word	0x58025480
 8005c80:	58025494 	.word	0x58025494

08005c84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005c8c:	f7fd fb6c 	bl	8003368 <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e2dc      	b.n	8006256 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d008      	beq.n	8005cba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2280      	movs	r2, #128	; 0x80
 8005cac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e2cd      	b.n	8006256 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a76      	ldr	r2, [pc, #472]	; (8005e98 <HAL_DMA_Abort+0x214>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d04a      	beq.n	8005d5a <HAL_DMA_Abort+0xd6>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a74      	ldr	r2, [pc, #464]	; (8005e9c <HAL_DMA_Abort+0x218>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d045      	beq.n	8005d5a <HAL_DMA_Abort+0xd6>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a73      	ldr	r2, [pc, #460]	; (8005ea0 <HAL_DMA_Abort+0x21c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d040      	beq.n	8005d5a <HAL_DMA_Abort+0xd6>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a71      	ldr	r2, [pc, #452]	; (8005ea4 <HAL_DMA_Abort+0x220>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d03b      	beq.n	8005d5a <HAL_DMA_Abort+0xd6>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a70      	ldr	r2, [pc, #448]	; (8005ea8 <HAL_DMA_Abort+0x224>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d036      	beq.n	8005d5a <HAL_DMA_Abort+0xd6>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a6e      	ldr	r2, [pc, #440]	; (8005eac <HAL_DMA_Abort+0x228>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d031      	beq.n	8005d5a <HAL_DMA_Abort+0xd6>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a6d      	ldr	r2, [pc, #436]	; (8005eb0 <HAL_DMA_Abort+0x22c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d02c      	beq.n	8005d5a <HAL_DMA_Abort+0xd6>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a6b      	ldr	r2, [pc, #428]	; (8005eb4 <HAL_DMA_Abort+0x230>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d027      	beq.n	8005d5a <HAL_DMA_Abort+0xd6>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a6a      	ldr	r2, [pc, #424]	; (8005eb8 <HAL_DMA_Abort+0x234>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d022      	beq.n	8005d5a <HAL_DMA_Abort+0xd6>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a68      	ldr	r2, [pc, #416]	; (8005ebc <HAL_DMA_Abort+0x238>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d01d      	beq.n	8005d5a <HAL_DMA_Abort+0xd6>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a67      	ldr	r2, [pc, #412]	; (8005ec0 <HAL_DMA_Abort+0x23c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d018      	beq.n	8005d5a <HAL_DMA_Abort+0xd6>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a65      	ldr	r2, [pc, #404]	; (8005ec4 <HAL_DMA_Abort+0x240>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d013      	beq.n	8005d5a <HAL_DMA_Abort+0xd6>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a64      	ldr	r2, [pc, #400]	; (8005ec8 <HAL_DMA_Abort+0x244>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d00e      	beq.n	8005d5a <HAL_DMA_Abort+0xd6>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a62      	ldr	r2, [pc, #392]	; (8005ecc <HAL_DMA_Abort+0x248>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d009      	beq.n	8005d5a <HAL_DMA_Abort+0xd6>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a61      	ldr	r2, [pc, #388]	; (8005ed0 <HAL_DMA_Abort+0x24c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d004      	beq.n	8005d5a <HAL_DMA_Abort+0xd6>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a5f      	ldr	r2, [pc, #380]	; (8005ed4 <HAL_DMA_Abort+0x250>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d101      	bne.n	8005d5e <HAL_DMA_Abort+0xda>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e000      	b.n	8005d60 <HAL_DMA_Abort+0xdc>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d013      	beq.n	8005d8c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 021e 	bic.w	r2, r2, #30
 8005d72:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d82:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	e00a      	b.n	8005da2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 020e 	bic.w	r2, r2, #14
 8005d9a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a3c      	ldr	r2, [pc, #240]	; (8005e98 <HAL_DMA_Abort+0x214>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d072      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a3a      	ldr	r2, [pc, #232]	; (8005e9c <HAL_DMA_Abort+0x218>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d06d      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a39      	ldr	r2, [pc, #228]	; (8005ea0 <HAL_DMA_Abort+0x21c>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d068      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a37      	ldr	r2, [pc, #220]	; (8005ea4 <HAL_DMA_Abort+0x220>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d063      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a36      	ldr	r2, [pc, #216]	; (8005ea8 <HAL_DMA_Abort+0x224>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d05e      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a34      	ldr	r2, [pc, #208]	; (8005eac <HAL_DMA_Abort+0x228>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d059      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a33      	ldr	r2, [pc, #204]	; (8005eb0 <HAL_DMA_Abort+0x22c>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d054      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a31      	ldr	r2, [pc, #196]	; (8005eb4 <HAL_DMA_Abort+0x230>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d04f      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a30      	ldr	r2, [pc, #192]	; (8005eb8 <HAL_DMA_Abort+0x234>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d04a      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a2e      	ldr	r2, [pc, #184]	; (8005ebc <HAL_DMA_Abort+0x238>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d045      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a2d      	ldr	r2, [pc, #180]	; (8005ec0 <HAL_DMA_Abort+0x23c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d040      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a2b      	ldr	r2, [pc, #172]	; (8005ec4 <HAL_DMA_Abort+0x240>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d03b      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a2a      	ldr	r2, [pc, #168]	; (8005ec8 <HAL_DMA_Abort+0x244>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d036      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a28      	ldr	r2, [pc, #160]	; (8005ecc <HAL_DMA_Abort+0x248>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d031      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a27      	ldr	r2, [pc, #156]	; (8005ed0 <HAL_DMA_Abort+0x24c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d02c      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a25      	ldr	r2, [pc, #148]	; (8005ed4 <HAL_DMA_Abort+0x250>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d027      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a24      	ldr	r2, [pc, #144]	; (8005ed8 <HAL_DMA_Abort+0x254>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d022      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a22      	ldr	r2, [pc, #136]	; (8005edc <HAL_DMA_Abort+0x258>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d01d      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a21      	ldr	r2, [pc, #132]	; (8005ee0 <HAL_DMA_Abort+0x25c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d018      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1f      	ldr	r2, [pc, #124]	; (8005ee4 <HAL_DMA_Abort+0x260>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d013      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ee8 <HAL_DMA_Abort+0x264>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00e      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1c      	ldr	r2, [pc, #112]	; (8005eec <HAL_DMA_Abort+0x268>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d009      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1b      	ldr	r2, [pc, #108]	; (8005ef0 <HAL_DMA_Abort+0x26c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d004      	beq.n	8005e92 <HAL_DMA_Abort+0x20e>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a19      	ldr	r2, [pc, #100]	; (8005ef4 <HAL_DMA_Abort+0x270>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d132      	bne.n	8005ef8 <HAL_DMA_Abort+0x274>
 8005e92:	2301      	movs	r3, #1
 8005e94:	e031      	b.n	8005efa <HAL_DMA_Abort+0x276>
 8005e96:	bf00      	nop
 8005e98:	40020010 	.word	0x40020010
 8005e9c:	40020028 	.word	0x40020028
 8005ea0:	40020040 	.word	0x40020040
 8005ea4:	40020058 	.word	0x40020058
 8005ea8:	40020070 	.word	0x40020070
 8005eac:	40020088 	.word	0x40020088
 8005eb0:	400200a0 	.word	0x400200a0
 8005eb4:	400200b8 	.word	0x400200b8
 8005eb8:	40020410 	.word	0x40020410
 8005ebc:	40020428 	.word	0x40020428
 8005ec0:	40020440 	.word	0x40020440
 8005ec4:	40020458 	.word	0x40020458
 8005ec8:	40020470 	.word	0x40020470
 8005ecc:	40020488 	.word	0x40020488
 8005ed0:	400204a0 	.word	0x400204a0
 8005ed4:	400204b8 	.word	0x400204b8
 8005ed8:	58025408 	.word	0x58025408
 8005edc:	5802541c 	.word	0x5802541c
 8005ee0:	58025430 	.word	0x58025430
 8005ee4:	58025444 	.word	0x58025444
 8005ee8:	58025458 	.word	0x58025458
 8005eec:	5802546c 	.word	0x5802546c
 8005ef0:	58025480 	.word	0x58025480
 8005ef4:	58025494 	.word	0x58025494
 8005ef8:	2300      	movs	r3, #0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d007      	beq.n	8005f0e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a6d      	ldr	r2, [pc, #436]	; (80060c8 <HAL_DMA_Abort+0x444>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d04a      	beq.n	8005fae <HAL_DMA_Abort+0x32a>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a6b      	ldr	r2, [pc, #428]	; (80060cc <HAL_DMA_Abort+0x448>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d045      	beq.n	8005fae <HAL_DMA_Abort+0x32a>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a6a      	ldr	r2, [pc, #424]	; (80060d0 <HAL_DMA_Abort+0x44c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d040      	beq.n	8005fae <HAL_DMA_Abort+0x32a>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a68      	ldr	r2, [pc, #416]	; (80060d4 <HAL_DMA_Abort+0x450>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d03b      	beq.n	8005fae <HAL_DMA_Abort+0x32a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a67      	ldr	r2, [pc, #412]	; (80060d8 <HAL_DMA_Abort+0x454>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d036      	beq.n	8005fae <HAL_DMA_Abort+0x32a>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a65      	ldr	r2, [pc, #404]	; (80060dc <HAL_DMA_Abort+0x458>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d031      	beq.n	8005fae <HAL_DMA_Abort+0x32a>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a64      	ldr	r2, [pc, #400]	; (80060e0 <HAL_DMA_Abort+0x45c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d02c      	beq.n	8005fae <HAL_DMA_Abort+0x32a>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a62      	ldr	r2, [pc, #392]	; (80060e4 <HAL_DMA_Abort+0x460>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d027      	beq.n	8005fae <HAL_DMA_Abort+0x32a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a61      	ldr	r2, [pc, #388]	; (80060e8 <HAL_DMA_Abort+0x464>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d022      	beq.n	8005fae <HAL_DMA_Abort+0x32a>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a5f      	ldr	r2, [pc, #380]	; (80060ec <HAL_DMA_Abort+0x468>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d01d      	beq.n	8005fae <HAL_DMA_Abort+0x32a>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a5e      	ldr	r2, [pc, #376]	; (80060f0 <HAL_DMA_Abort+0x46c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d018      	beq.n	8005fae <HAL_DMA_Abort+0x32a>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a5c      	ldr	r2, [pc, #368]	; (80060f4 <HAL_DMA_Abort+0x470>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d013      	beq.n	8005fae <HAL_DMA_Abort+0x32a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a5b      	ldr	r2, [pc, #364]	; (80060f8 <HAL_DMA_Abort+0x474>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00e      	beq.n	8005fae <HAL_DMA_Abort+0x32a>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a59      	ldr	r2, [pc, #356]	; (80060fc <HAL_DMA_Abort+0x478>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d009      	beq.n	8005fae <HAL_DMA_Abort+0x32a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a58      	ldr	r2, [pc, #352]	; (8006100 <HAL_DMA_Abort+0x47c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d004      	beq.n	8005fae <HAL_DMA_Abort+0x32a>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a56      	ldr	r2, [pc, #344]	; (8006104 <HAL_DMA_Abort+0x480>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d108      	bne.n	8005fc0 <HAL_DMA_Abort+0x33c>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0201 	bic.w	r2, r2, #1
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	e007      	b.n	8005fd0 <HAL_DMA_Abort+0x34c>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0201 	bic.w	r2, r2, #1
 8005fce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005fd0:	e013      	b.n	8005ffa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005fd2:	f7fd f9c9 	bl	8003368 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b05      	cmp	r3, #5
 8005fde:	d90c      	bls.n	8005ffa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2203      	movs	r2, #3
 8005fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e12d      	b.n	8006256 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e5      	bne.n	8005fd2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a2f      	ldr	r2, [pc, #188]	; (80060c8 <HAL_DMA_Abort+0x444>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d04a      	beq.n	80060a6 <HAL_DMA_Abort+0x422>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a2d      	ldr	r2, [pc, #180]	; (80060cc <HAL_DMA_Abort+0x448>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d045      	beq.n	80060a6 <HAL_DMA_Abort+0x422>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a2c      	ldr	r2, [pc, #176]	; (80060d0 <HAL_DMA_Abort+0x44c>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d040      	beq.n	80060a6 <HAL_DMA_Abort+0x422>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a2a      	ldr	r2, [pc, #168]	; (80060d4 <HAL_DMA_Abort+0x450>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d03b      	beq.n	80060a6 <HAL_DMA_Abort+0x422>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a29      	ldr	r2, [pc, #164]	; (80060d8 <HAL_DMA_Abort+0x454>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d036      	beq.n	80060a6 <HAL_DMA_Abort+0x422>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a27      	ldr	r2, [pc, #156]	; (80060dc <HAL_DMA_Abort+0x458>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d031      	beq.n	80060a6 <HAL_DMA_Abort+0x422>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a26      	ldr	r2, [pc, #152]	; (80060e0 <HAL_DMA_Abort+0x45c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d02c      	beq.n	80060a6 <HAL_DMA_Abort+0x422>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a24      	ldr	r2, [pc, #144]	; (80060e4 <HAL_DMA_Abort+0x460>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d027      	beq.n	80060a6 <HAL_DMA_Abort+0x422>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a23      	ldr	r2, [pc, #140]	; (80060e8 <HAL_DMA_Abort+0x464>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d022      	beq.n	80060a6 <HAL_DMA_Abort+0x422>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a21      	ldr	r2, [pc, #132]	; (80060ec <HAL_DMA_Abort+0x468>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01d      	beq.n	80060a6 <HAL_DMA_Abort+0x422>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a20      	ldr	r2, [pc, #128]	; (80060f0 <HAL_DMA_Abort+0x46c>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d018      	beq.n	80060a6 <HAL_DMA_Abort+0x422>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1e      	ldr	r2, [pc, #120]	; (80060f4 <HAL_DMA_Abort+0x470>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d013      	beq.n	80060a6 <HAL_DMA_Abort+0x422>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1d      	ldr	r2, [pc, #116]	; (80060f8 <HAL_DMA_Abort+0x474>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00e      	beq.n	80060a6 <HAL_DMA_Abort+0x422>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1b      	ldr	r2, [pc, #108]	; (80060fc <HAL_DMA_Abort+0x478>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d009      	beq.n	80060a6 <HAL_DMA_Abort+0x422>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a1a      	ldr	r2, [pc, #104]	; (8006100 <HAL_DMA_Abort+0x47c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d004      	beq.n	80060a6 <HAL_DMA_Abort+0x422>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a18      	ldr	r2, [pc, #96]	; (8006104 <HAL_DMA_Abort+0x480>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d101      	bne.n	80060aa <HAL_DMA_Abort+0x426>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <HAL_DMA_Abort+0x428>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d02b      	beq.n	8006108 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ba:	f003 031f 	and.w	r3, r3, #31
 80060be:	223f      	movs	r2, #63	; 0x3f
 80060c0:	409a      	lsls	r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	609a      	str	r2, [r3, #8]
 80060c6:	e02a      	b.n	800611e <HAL_DMA_Abort+0x49a>
 80060c8:	40020010 	.word	0x40020010
 80060cc:	40020028 	.word	0x40020028
 80060d0:	40020040 	.word	0x40020040
 80060d4:	40020058 	.word	0x40020058
 80060d8:	40020070 	.word	0x40020070
 80060dc:	40020088 	.word	0x40020088
 80060e0:	400200a0 	.word	0x400200a0
 80060e4:	400200b8 	.word	0x400200b8
 80060e8:	40020410 	.word	0x40020410
 80060ec:	40020428 	.word	0x40020428
 80060f0:	40020440 	.word	0x40020440
 80060f4:	40020458 	.word	0x40020458
 80060f8:	40020470 	.word	0x40020470
 80060fc:	40020488 	.word	0x40020488
 8006100:	400204a0 	.word	0x400204a0
 8006104:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	2201      	movs	r2, #1
 8006118:	409a      	lsls	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a4f      	ldr	r2, [pc, #316]	; (8006260 <HAL_DMA_Abort+0x5dc>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d072      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a4d      	ldr	r2, [pc, #308]	; (8006264 <HAL_DMA_Abort+0x5e0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d06d      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a4c      	ldr	r2, [pc, #304]	; (8006268 <HAL_DMA_Abort+0x5e4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d068      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a4a      	ldr	r2, [pc, #296]	; (800626c <HAL_DMA_Abort+0x5e8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d063      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a49      	ldr	r2, [pc, #292]	; (8006270 <HAL_DMA_Abort+0x5ec>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d05e      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a47      	ldr	r2, [pc, #284]	; (8006274 <HAL_DMA_Abort+0x5f0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d059      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a46      	ldr	r2, [pc, #280]	; (8006278 <HAL_DMA_Abort+0x5f4>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d054      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a44      	ldr	r2, [pc, #272]	; (800627c <HAL_DMA_Abort+0x5f8>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d04f      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a43      	ldr	r2, [pc, #268]	; (8006280 <HAL_DMA_Abort+0x5fc>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d04a      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a41      	ldr	r2, [pc, #260]	; (8006284 <HAL_DMA_Abort+0x600>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d045      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a40      	ldr	r2, [pc, #256]	; (8006288 <HAL_DMA_Abort+0x604>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d040      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a3e      	ldr	r2, [pc, #248]	; (800628c <HAL_DMA_Abort+0x608>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d03b      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a3d      	ldr	r2, [pc, #244]	; (8006290 <HAL_DMA_Abort+0x60c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d036      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a3b      	ldr	r2, [pc, #236]	; (8006294 <HAL_DMA_Abort+0x610>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d031      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a3a      	ldr	r2, [pc, #232]	; (8006298 <HAL_DMA_Abort+0x614>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d02c      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a38      	ldr	r2, [pc, #224]	; (800629c <HAL_DMA_Abort+0x618>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d027      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a37      	ldr	r2, [pc, #220]	; (80062a0 <HAL_DMA_Abort+0x61c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d022      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a35      	ldr	r2, [pc, #212]	; (80062a4 <HAL_DMA_Abort+0x620>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d01d      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a34      	ldr	r2, [pc, #208]	; (80062a8 <HAL_DMA_Abort+0x624>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d018      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a32      	ldr	r2, [pc, #200]	; (80062ac <HAL_DMA_Abort+0x628>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d013      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a31      	ldr	r2, [pc, #196]	; (80062b0 <HAL_DMA_Abort+0x62c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00e      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a2f      	ldr	r2, [pc, #188]	; (80062b4 <HAL_DMA_Abort+0x630>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d009      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a2e      	ldr	r2, [pc, #184]	; (80062b8 <HAL_DMA_Abort+0x634>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d004      	beq.n	800620e <HAL_DMA_Abort+0x58a>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a2c      	ldr	r2, [pc, #176]	; (80062bc <HAL_DMA_Abort+0x638>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d101      	bne.n	8006212 <HAL_DMA_Abort+0x58e>
 800620e:	2301      	movs	r3, #1
 8006210:	e000      	b.n	8006214 <HAL_DMA_Abort+0x590>
 8006212:	2300      	movs	r3, #0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d015      	beq.n	8006244 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006220:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00c      	beq.n	8006244 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006238:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006242:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3718      	adds	r7, #24
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	40020010 	.word	0x40020010
 8006264:	40020028 	.word	0x40020028
 8006268:	40020040 	.word	0x40020040
 800626c:	40020058 	.word	0x40020058
 8006270:	40020070 	.word	0x40020070
 8006274:	40020088 	.word	0x40020088
 8006278:	400200a0 	.word	0x400200a0
 800627c:	400200b8 	.word	0x400200b8
 8006280:	40020410 	.word	0x40020410
 8006284:	40020428 	.word	0x40020428
 8006288:	40020440 	.word	0x40020440
 800628c:	40020458 	.word	0x40020458
 8006290:	40020470 	.word	0x40020470
 8006294:	40020488 	.word	0x40020488
 8006298:	400204a0 	.word	0x400204a0
 800629c:	400204b8 	.word	0x400204b8
 80062a0:	58025408 	.word	0x58025408
 80062a4:	5802541c 	.word	0x5802541c
 80062a8:	58025430 	.word	0x58025430
 80062ac:	58025444 	.word	0x58025444
 80062b0:	58025458 	.word	0x58025458
 80062b4:	5802546c 	.word	0x5802546c
 80062b8:	58025480 	.word	0x58025480
 80062bc:	58025494 	.word	0x58025494

080062c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e237      	b.n	8006742 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d004      	beq.n	80062e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2280      	movs	r2, #128	; 0x80
 80062e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e22c      	b.n	8006742 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a5c      	ldr	r2, [pc, #368]	; (8006460 <HAL_DMA_Abort_IT+0x1a0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d04a      	beq.n	8006388 <HAL_DMA_Abort_IT+0xc8>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a5b      	ldr	r2, [pc, #364]	; (8006464 <HAL_DMA_Abort_IT+0x1a4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d045      	beq.n	8006388 <HAL_DMA_Abort_IT+0xc8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a59      	ldr	r2, [pc, #356]	; (8006468 <HAL_DMA_Abort_IT+0x1a8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d040      	beq.n	8006388 <HAL_DMA_Abort_IT+0xc8>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a58      	ldr	r2, [pc, #352]	; (800646c <HAL_DMA_Abort_IT+0x1ac>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d03b      	beq.n	8006388 <HAL_DMA_Abort_IT+0xc8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a56      	ldr	r2, [pc, #344]	; (8006470 <HAL_DMA_Abort_IT+0x1b0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d036      	beq.n	8006388 <HAL_DMA_Abort_IT+0xc8>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a55      	ldr	r2, [pc, #340]	; (8006474 <HAL_DMA_Abort_IT+0x1b4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d031      	beq.n	8006388 <HAL_DMA_Abort_IT+0xc8>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a53      	ldr	r2, [pc, #332]	; (8006478 <HAL_DMA_Abort_IT+0x1b8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d02c      	beq.n	8006388 <HAL_DMA_Abort_IT+0xc8>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a52      	ldr	r2, [pc, #328]	; (800647c <HAL_DMA_Abort_IT+0x1bc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d027      	beq.n	8006388 <HAL_DMA_Abort_IT+0xc8>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a50      	ldr	r2, [pc, #320]	; (8006480 <HAL_DMA_Abort_IT+0x1c0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d022      	beq.n	8006388 <HAL_DMA_Abort_IT+0xc8>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a4f      	ldr	r2, [pc, #316]	; (8006484 <HAL_DMA_Abort_IT+0x1c4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d01d      	beq.n	8006388 <HAL_DMA_Abort_IT+0xc8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a4d      	ldr	r2, [pc, #308]	; (8006488 <HAL_DMA_Abort_IT+0x1c8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d018      	beq.n	8006388 <HAL_DMA_Abort_IT+0xc8>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a4c      	ldr	r2, [pc, #304]	; (800648c <HAL_DMA_Abort_IT+0x1cc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d013      	beq.n	8006388 <HAL_DMA_Abort_IT+0xc8>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a4a      	ldr	r2, [pc, #296]	; (8006490 <HAL_DMA_Abort_IT+0x1d0>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d00e      	beq.n	8006388 <HAL_DMA_Abort_IT+0xc8>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a49      	ldr	r2, [pc, #292]	; (8006494 <HAL_DMA_Abort_IT+0x1d4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d009      	beq.n	8006388 <HAL_DMA_Abort_IT+0xc8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a47      	ldr	r2, [pc, #284]	; (8006498 <HAL_DMA_Abort_IT+0x1d8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d004      	beq.n	8006388 <HAL_DMA_Abort_IT+0xc8>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a46      	ldr	r2, [pc, #280]	; (800649c <HAL_DMA_Abort_IT+0x1dc>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d101      	bne.n	800638c <HAL_DMA_Abort_IT+0xcc>
 8006388:	2301      	movs	r3, #1
 800638a:	e000      	b.n	800638e <HAL_DMA_Abort_IT+0xce>
 800638c:	2300      	movs	r3, #0
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 8086 	beq.w	80064a0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2204      	movs	r2, #4
 8006398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a2f      	ldr	r2, [pc, #188]	; (8006460 <HAL_DMA_Abort_IT+0x1a0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d04a      	beq.n	800643c <HAL_DMA_Abort_IT+0x17c>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a2e      	ldr	r2, [pc, #184]	; (8006464 <HAL_DMA_Abort_IT+0x1a4>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d045      	beq.n	800643c <HAL_DMA_Abort_IT+0x17c>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a2c      	ldr	r2, [pc, #176]	; (8006468 <HAL_DMA_Abort_IT+0x1a8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d040      	beq.n	800643c <HAL_DMA_Abort_IT+0x17c>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a2b      	ldr	r2, [pc, #172]	; (800646c <HAL_DMA_Abort_IT+0x1ac>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d03b      	beq.n	800643c <HAL_DMA_Abort_IT+0x17c>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a29      	ldr	r2, [pc, #164]	; (8006470 <HAL_DMA_Abort_IT+0x1b0>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d036      	beq.n	800643c <HAL_DMA_Abort_IT+0x17c>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a28      	ldr	r2, [pc, #160]	; (8006474 <HAL_DMA_Abort_IT+0x1b4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d031      	beq.n	800643c <HAL_DMA_Abort_IT+0x17c>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a26      	ldr	r2, [pc, #152]	; (8006478 <HAL_DMA_Abort_IT+0x1b8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d02c      	beq.n	800643c <HAL_DMA_Abort_IT+0x17c>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a25      	ldr	r2, [pc, #148]	; (800647c <HAL_DMA_Abort_IT+0x1bc>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d027      	beq.n	800643c <HAL_DMA_Abort_IT+0x17c>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a23      	ldr	r2, [pc, #140]	; (8006480 <HAL_DMA_Abort_IT+0x1c0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d022      	beq.n	800643c <HAL_DMA_Abort_IT+0x17c>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a22      	ldr	r2, [pc, #136]	; (8006484 <HAL_DMA_Abort_IT+0x1c4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d01d      	beq.n	800643c <HAL_DMA_Abort_IT+0x17c>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a20      	ldr	r2, [pc, #128]	; (8006488 <HAL_DMA_Abort_IT+0x1c8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d018      	beq.n	800643c <HAL_DMA_Abort_IT+0x17c>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a1f      	ldr	r2, [pc, #124]	; (800648c <HAL_DMA_Abort_IT+0x1cc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d013      	beq.n	800643c <HAL_DMA_Abort_IT+0x17c>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1d      	ldr	r2, [pc, #116]	; (8006490 <HAL_DMA_Abort_IT+0x1d0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00e      	beq.n	800643c <HAL_DMA_Abort_IT+0x17c>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1c      	ldr	r2, [pc, #112]	; (8006494 <HAL_DMA_Abort_IT+0x1d4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d009      	beq.n	800643c <HAL_DMA_Abort_IT+0x17c>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1a      	ldr	r2, [pc, #104]	; (8006498 <HAL_DMA_Abort_IT+0x1d8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d004      	beq.n	800643c <HAL_DMA_Abort_IT+0x17c>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a19      	ldr	r2, [pc, #100]	; (800649c <HAL_DMA_Abort_IT+0x1dc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d108      	bne.n	800644e <HAL_DMA_Abort_IT+0x18e>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0201 	bic.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	e178      	b.n	8006740 <HAL_DMA_Abort_IT+0x480>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0201 	bic.w	r2, r2, #1
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	e16f      	b.n	8006740 <HAL_DMA_Abort_IT+0x480>
 8006460:	40020010 	.word	0x40020010
 8006464:	40020028 	.word	0x40020028
 8006468:	40020040 	.word	0x40020040
 800646c:	40020058 	.word	0x40020058
 8006470:	40020070 	.word	0x40020070
 8006474:	40020088 	.word	0x40020088
 8006478:	400200a0 	.word	0x400200a0
 800647c:	400200b8 	.word	0x400200b8
 8006480:	40020410 	.word	0x40020410
 8006484:	40020428 	.word	0x40020428
 8006488:	40020440 	.word	0x40020440
 800648c:	40020458 	.word	0x40020458
 8006490:	40020470 	.word	0x40020470
 8006494:	40020488 	.word	0x40020488
 8006498:	400204a0 	.word	0x400204a0
 800649c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 020e 	bic.w	r2, r2, #14
 80064ae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a6c      	ldr	r2, [pc, #432]	; (8006668 <HAL_DMA_Abort_IT+0x3a8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d04a      	beq.n	8006550 <HAL_DMA_Abort_IT+0x290>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a6b      	ldr	r2, [pc, #428]	; (800666c <HAL_DMA_Abort_IT+0x3ac>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d045      	beq.n	8006550 <HAL_DMA_Abort_IT+0x290>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a69      	ldr	r2, [pc, #420]	; (8006670 <HAL_DMA_Abort_IT+0x3b0>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d040      	beq.n	8006550 <HAL_DMA_Abort_IT+0x290>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a68      	ldr	r2, [pc, #416]	; (8006674 <HAL_DMA_Abort_IT+0x3b4>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d03b      	beq.n	8006550 <HAL_DMA_Abort_IT+0x290>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a66      	ldr	r2, [pc, #408]	; (8006678 <HAL_DMA_Abort_IT+0x3b8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d036      	beq.n	8006550 <HAL_DMA_Abort_IT+0x290>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a65      	ldr	r2, [pc, #404]	; (800667c <HAL_DMA_Abort_IT+0x3bc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d031      	beq.n	8006550 <HAL_DMA_Abort_IT+0x290>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a63      	ldr	r2, [pc, #396]	; (8006680 <HAL_DMA_Abort_IT+0x3c0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d02c      	beq.n	8006550 <HAL_DMA_Abort_IT+0x290>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a62      	ldr	r2, [pc, #392]	; (8006684 <HAL_DMA_Abort_IT+0x3c4>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d027      	beq.n	8006550 <HAL_DMA_Abort_IT+0x290>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a60      	ldr	r2, [pc, #384]	; (8006688 <HAL_DMA_Abort_IT+0x3c8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d022      	beq.n	8006550 <HAL_DMA_Abort_IT+0x290>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a5f      	ldr	r2, [pc, #380]	; (800668c <HAL_DMA_Abort_IT+0x3cc>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d01d      	beq.n	8006550 <HAL_DMA_Abort_IT+0x290>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a5d      	ldr	r2, [pc, #372]	; (8006690 <HAL_DMA_Abort_IT+0x3d0>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d018      	beq.n	8006550 <HAL_DMA_Abort_IT+0x290>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a5c      	ldr	r2, [pc, #368]	; (8006694 <HAL_DMA_Abort_IT+0x3d4>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d013      	beq.n	8006550 <HAL_DMA_Abort_IT+0x290>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a5a      	ldr	r2, [pc, #360]	; (8006698 <HAL_DMA_Abort_IT+0x3d8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d00e      	beq.n	8006550 <HAL_DMA_Abort_IT+0x290>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a59      	ldr	r2, [pc, #356]	; (800669c <HAL_DMA_Abort_IT+0x3dc>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d009      	beq.n	8006550 <HAL_DMA_Abort_IT+0x290>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a57      	ldr	r2, [pc, #348]	; (80066a0 <HAL_DMA_Abort_IT+0x3e0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d004      	beq.n	8006550 <HAL_DMA_Abort_IT+0x290>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a56      	ldr	r2, [pc, #344]	; (80066a4 <HAL_DMA_Abort_IT+0x3e4>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d108      	bne.n	8006562 <HAL_DMA_Abort_IT+0x2a2>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0201 	bic.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	e007      	b.n	8006572 <HAL_DMA_Abort_IT+0x2b2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f022 0201 	bic.w	r2, r2, #1
 8006570:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a3c      	ldr	r2, [pc, #240]	; (8006668 <HAL_DMA_Abort_IT+0x3a8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d072      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a3a      	ldr	r2, [pc, #232]	; (800666c <HAL_DMA_Abort_IT+0x3ac>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d06d      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a39      	ldr	r2, [pc, #228]	; (8006670 <HAL_DMA_Abort_IT+0x3b0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d068      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a37      	ldr	r2, [pc, #220]	; (8006674 <HAL_DMA_Abort_IT+0x3b4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d063      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a36      	ldr	r2, [pc, #216]	; (8006678 <HAL_DMA_Abort_IT+0x3b8>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d05e      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a34      	ldr	r2, [pc, #208]	; (800667c <HAL_DMA_Abort_IT+0x3bc>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d059      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a33      	ldr	r2, [pc, #204]	; (8006680 <HAL_DMA_Abort_IT+0x3c0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d054      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a31      	ldr	r2, [pc, #196]	; (8006684 <HAL_DMA_Abort_IT+0x3c4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d04f      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a30      	ldr	r2, [pc, #192]	; (8006688 <HAL_DMA_Abort_IT+0x3c8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d04a      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a2e      	ldr	r2, [pc, #184]	; (800668c <HAL_DMA_Abort_IT+0x3cc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d045      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a2d      	ldr	r2, [pc, #180]	; (8006690 <HAL_DMA_Abort_IT+0x3d0>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d040      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a2b      	ldr	r2, [pc, #172]	; (8006694 <HAL_DMA_Abort_IT+0x3d4>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d03b      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a2a      	ldr	r2, [pc, #168]	; (8006698 <HAL_DMA_Abort_IT+0x3d8>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d036      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a28      	ldr	r2, [pc, #160]	; (800669c <HAL_DMA_Abort_IT+0x3dc>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d031      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a27      	ldr	r2, [pc, #156]	; (80066a0 <HAL_DMA_Abort_IT+0x3e0>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d02c      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a25      	ldr	r2, [pc, #148]	; (80066a4 <HAL_DMA_Abort_IT+0x3e4>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d027      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a24      	ldr	r2, [pc, #144]	; (80066a8 <HAL_DMA_Abort_IT+0x3e8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d022      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a22      	ldr	r2, [pc, #136]	; (80066ac <HAL_DMA_Abort_IT+0x3ec>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d01d      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a21      	ldr	r2, [pc, #132]	; (80066b0 <HAL_DMA_Abort_IT+0x3f0>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d018      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a1f      	ldr	r2, [pc, #124]	; (80066b4 <HAL_DMA_Abort_IT+0x3f4>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d013      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a1e      	ldr	r2, [pc, #120]	; (80066b8 <HAL_DMA_Abort_IT+0x3f8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00e      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a1c      	ldr	r2, [pc, #112]	; (80066bc <HAL_DMA_Abort_IT+0x3fc>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d009      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a1b      	ldr	r2, [pc, #108]	; (80066c0 <HAL_DMA_Abort_IT+0x400>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d004      	beq.n	8006662 <HAL_DMA_Abort_IT+0x3a2>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a19      	ldr	r2, [pc, #100]	; (80066c4 <HAL_DMA_Abort_IT+0x404>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d132      	bne.n	80066c8 <HAL_DMA_Abort_IT+0x408>
 8006662:	2301      	movs	r3, #1
 8006664:	e031      	b.n	80066ca <HAL_DMA_Abort_IT+0x40a>
 8006666:	bf00      	nop
 8006668:	40020010 	.word	0x40020010
 800666c:	40020028 	.word	0x40020028
 8006670:	40020040 	.word	0x40020040
 8006674:	40020058 	.word	0x40020058
 8006678:	40020070 	.word	0x40020070
 800667c:	40020088 	.word	0x40020088
 8006680:	400200a0 	.word	0x400200a0
 8006684:	400200b8 	.word	0x400200b8
 8006688:	40020410 	.word	0x40020410
 800668c:	40020428 	.word	0x40020428
 8006690:	40020440 	.word	0x40020440
 8006694:	40020458 	.word	0x40020458
 8006698:	40020470 	.word	0x40020470
 800669c:	40020488 	.word	0x40020488
 80066a0:	400204a0 	.word	0x400204a0
 80066a4:	400204b8 	.word	0x400204b8
 80066a8:	58025408 	.word	0x58025408
 80066ac:	5802541c 	.word	0x5802541c
 80066b0:	58025430 	.word	0x58025430
 80066b4:	58025444 	.word	0x58025444
 80066b8:	58025458 	.word	0x58025458
 80066bc:	5802546c 	.word	0x5802546c
 80066c0:	58025480 	.word	0x58025480
 80066c4:	58025494 	.word	0x58025494
 80066c8:	2300      	movs	r3, #0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d028      	beq.n	8006720 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066dc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e8:	f003 031f 	and.w	r3, r3, #31
 80066ec:	2201      	movs	r2, #1
 80066ee:	409a      	lsls	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80066fc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00c      	beq.n	8006720 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006710:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006714:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800671e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop

0800674c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b08a      	sub	sp, #40	; 0x28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006758:	4b67      	ldr	r3, [pc, #412]	; (80068f8 <HAL_DMA_IRQHandler+0x1ac>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a67      	ldr	r2, [pc, #412]	; (80068fc <HAL_DMA_IRQHandler+0x1b0>)
 800675e:	fba2 2303 	umull	r2, r3, r2, r3
 8006762:	0a9b      	lsrs	r3, r3, #10
 8006764:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006770:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a5f      	ldr	r2, [pc, #380]	; (8006900 <HAL_DMA_IRQHandler+0x1b4>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d04a      	beq.n	800681e <HAL_DMA_IRQHandler+0xd2>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a5d      	ldr	r2, [pc, #372]	; (8006904 <HAL_DMA_IRQHandler+0x1b8>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d045      	beq.n	800681e <HAL_DMA_IRQHandler+0xd2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a5c      	ldr	r2, [pc, #368]	; (8006908 <HAL_DMA_IRQHandler+0x1bc>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d040      	beq.n	800681e <HAL_DMA_IRQHandler+0xd2>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a5a      	ldr	r2, [pc, #360]	; (800690c <HAL_DMA_IRQHandler+0x1c0>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d03b      	beq.n	800681e <HAL_DMA_IRQHandler+0xd2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a59      	ldr	r2, [pc, #356]	; (8006910 <HAL_DMA_IRQHandler+0x1c4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d036      	beq.n	800681e <HAL_DMA_IRQHandler+0xd2>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a57      	ldr	r2, [pc, #348]	; (8006914 <HAL_DMA_IRQHandler+0x1c8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d031      	beq.n	800681e <HAL_DMA_IRQHandler+0xd2>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a56      	ldr	r2, [pc, #344]	; (8006918 <HAL_DMA_IRQHandler+0x1cc>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d02c      	beq.n	800681e <HAL_DMA_IRQHandler+0xd2>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a54      	ldr	r2, [pc, #336]	; (800691c <HAL_DMA_IRQHandler+0x1d0>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d027      	beq.n	800681e <HAL_DMA_IRQHandler+0xd2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a53      	ldr	r2, [pc, #332]	; (8006920 <HAL_DMA_IRQHandler+0x1d4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d022      	beq.n	800681e <HAL_DMA_IRQHandler+0xd2>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a51      	ldr	r2, [pc, #324]	; (8006924 <HAL_DMA_IRQHandler+0x1d8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d01d      	beq.n	800681e <HAL_DMA_IRQHandler+0xd2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a50      	ldr	r2, [pc, #320]	; (8006928 <HAL_DMA_IRQHandler+0x1dc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d018      	beq.n	800681e <HAL_DMA_IRQHandler+0xd2>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a4e      	ldr	r2, [pc, #312]	; (800692c <HAL_DMA_IRQHandler+0x1e0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d013      	beq.n	800681e <HAL_DMA_IRQHandler+0xd2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a4d      	ldr	r2, [pc, #308]	; (8006930 <HAL_DMA_IRQHandler+0x1e4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00e      	beq.n	800681e <HAL_DMA_IRQHandler+0xd2>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a4b      	ldr	r2, [pc, #300]	; (8006934 <HAL_DMA_IRQHandler+0x1e8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d009      	beq.n	800681e <HAL_DMA_IRQHandler+0xd2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a4a      	ldr	r2, [pc, #296]	; (8006938 <HAL_DMA_IRQHandler+0x1ec>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d004      	beq.n	800681e <HAL_DMA_IRQHandler+0xd2>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a48      	ldr	r2, [pc, #288]	; (800693c <HAL_DMA_IRQHandler+0x1f0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d101      	bne.n	8006822 <HAL_DMA_IRQHandler+0xd6>
 800681e:	2301      	movs	r3, #1
 8006820:	e000      	b.n	8006824 <HAL_DMA_IRQHandler+0xd8>
 8006822:	2300      	movs	r3, #0
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 842b 	beq.w	8007080 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682e:	f003 031f 	and.w	r3, r3, #31
 8006832:	2208      	movs	r2, #8
 8006834:	409a      	lsls	r2, r3
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	4013      	ands	r3, r2
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 80a2 	beq.w	8006984 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a2e      	ldr	r2, [pc, #184]	; (8006900 <HAL_DMA_IRQHandler+0x1b4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d04a      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x194>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a2d      	ldr	r2, [pc, #180]	; (8006904 <HAL_DMA_IRQHandler+0x1b8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d045      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x194>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a2b      	ldr	r2, [pc, #172]	; (8006908 <HAL_DMA_IRQHandler+0x1bc>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d040      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x194>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a2a      	ldr	r2, [pc, #168]	; (800690c <HAL_DMA_IRQHandler+0x1c0>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d03b      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x194>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a28      	ldr	r2, [pc, #160]	; (8006910 <HAL_DMA_IRQHandler+0x1c4>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d036      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x194>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a27      	ldr	r2, [pc, #156]	; (8006914 <HAL_DMA_IRQHandler+0x1c8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d031      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x194>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a25      	ldr	r2, [pc, #148]	; (8006918 <HAL_DMA_IRQHandler+0x1cc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d02c      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x194>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a24      	ldr	r2, [pc, #144]	; (800691c <HAL_DMA_IRQHandler+0x1d0>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d027      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x194>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a22      	ldr	r2, [pc, #136]	; (8006920 <HAL_DMA_IRQHandler+0x1d4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d022      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x194>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a21      	ldr	r2, [pc, #132]	; (8006924 <HAL_DMA_IRQHandler+0x1d8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d01d      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x194>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1f      	ldr	r2, [pc, #124]	; (8006928 <HAL_DMA_IRQHandler+0x1dc>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d018      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x194>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1e      	ldr	r2, [pc, #120]	; (800692c <HAL_DMA_IRQHandler+0x1e0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d013      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x194>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a1c      	ldr	r2, [pc, #112]	; (8006930 <HAL_DMA_IRQHandler+0x1e4>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d00e      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x194>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a1b      	ldr	r2, [pc, #108]	; (8006934 <HAL_DMA_IRQHandler+0x1e8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d009      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x194>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a19      	ldr	r2, [pc, #100]	; (8006938 <HAL_DMA_IRQHandler+0x1ec>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d004      	beq.n	80068e0 <HAL_DMA_IRQHandler+0x194>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a18      	ldr	r2, [pc, #96]	; (800693c <HAL_DMA_IRQHandler+0x1f0>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d12f      	bne.n	8006940 <HAL_DMA_IRQHandler+0x1f4>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	bf14      	ite	ne
 80068ee:	2301      	movne	r3, #1
 80068f0:	2300      	moveq	r3, #0
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	e02e      	b.n	8006954 <HAL_DMA_IRQHandler+0x208>
 80068f6:	bf00      	nop
 80068f8:	24000400 	.word	0x24000400
 80068fc:	1b4e81b5 	.word	0x1b4e81b5
 8006900:	40020010 	.word	0x40020010
 8006904:	40020028 	.word	0x40020028
 8006908:	40020040 	.word	0x40020040
 800690c:	40020058 	.word	0x40020058
 8006910:	40020070 	.word	0x40020070
 8006914:	40020088 	.word	0x40020088
 8006918:	400200a0 	.word	0x400200a0
 800691c:	400200b8 	.word	0x400200b8
 8006920:	40020410 	.word	0x40020410
 8006924:	40020428 	.word	0x40020428
 8006928:	40020440 	.word	0x40020440
 800692c:	40020458 	.word	0x40020458
 8006930:	40020470 	.word	0x40020470
 8006934:	40020488 	.word	0x40020488
 8006938:	400204a0 	.word	0x400204a0
 800693c:	400204b8 	.word	0x400204b8
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0308 	and.w	r3, r3, #8
 800694a:	2b00      	cmp	r3, #0
 800694c:	bf14      	ite	ne
 800694e:	2301      	movne	r3, #1
 8006950:	2300      	moveq	r3, #0
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d015      	beq.n	8006984 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0204 	bic.w	r2, r2, #4
 8006966:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696c:	f003 031f 	and.w	r3, r3, #31
 8006970:	2208      	movs	r2, #8
 8006972:	409a      	lsls	r2, r3
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697c:	f043 0201 	orr.w	r2, r3, #1
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006988:	f003 031f 	and.w	r3, r3, #31
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	fa22 f303 	lsr.w	r3, r2, r3
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d06e      	beq.n	8006a78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a69      	ldr	r2, [pc, #420]	; (8006b44 <HAL_DMA_IRQHandler+0x3f8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d04a      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x2ee>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a67      	ldr	r2, [pc, #412]	; (8006b48 <HAL_DMA_IRQHandler+0x3fc>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d045      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x2ee>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a66      	ldr	r2, [pc, #408]	; (8006b4c <HAL_DMA_IRQHandler+0x400>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d040      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x2ee>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a64      	ldr	r2, [pc, #400]	; (8006b50 <HAL_DMA_IRQHandler+0x404>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d03b      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x2ee>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a63      	ldr	r2, [pc, #396]	; (8006b54 <HAL_DMA_IRQHandler+0x408>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d036      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x2ee>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a61      	ldr	r2, [pc, #388]	; (8006b58 <HAL_DMA_IRQHandler+0x40c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d031      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x2ee>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a60      	ldr	r2, [pc, #384]	; (8006b5c <HAL_DMA_IRQHandler+0x410>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d02c      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x2ee>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a5e      	ldr	r2, [pc, #376]	; (8006b60 <HAL_DMA_IRQHandler+0x414>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d027      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x2ee>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a5d      	ldr	r2, [pc, #372]	; (8006b64 <HAL_DMA_IRQHandler+0x418>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d022      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x2ee>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a5b      	ldr	r2, [pc, #364]	; (8006b68 <HAL_DMA_IRQHandler+0x41c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d01d      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x2ee>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a5a      	ldr	r2, [pc, #360]	; (8006b6c <HAL_DMA_IRQHandler+0x420>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d018      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x2ee>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a58      	ldr	r2, [pc, #352]	; (8006b70 <HAL_DMA_IRQHandler+0x424>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d013      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x2ee>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a57      	ldr	r2, [pc, #348]	; (8006b74 <HAL_DMA_IRQHandler+0x428>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d00e      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x2ee>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a55      	ldr	r2, [pc, #340]	; (8006b78 <HAL_DMA_IRQHandler+0x42c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d009      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x2ee>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a54      	ldr	r2, [pc, #336]	; (8006b7c <HAL_DMA_IRQHandler+0x430>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d004      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x2ee>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a52      	ldr	r2, [pc, #328]	; (8006b80 <HAL_DMA_IRQHandler+0x434>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d10a      	bne.n	8006a50 <HAL_DMA_IRQHandler+0x304>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	bf14      	ite	ne
 8006a48:	2301      	movne	r3, #1
 8006a4a:	2300      	moveq	r3, #0
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	e003      	b.n	8006a58 <HAL_DMA_IRQHandler+0x30c>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2300      	movs	r3, #0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00d      	beq.n	8006a78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a60:	f003 031f 	and.w	r3, r3, #31
 8006a64:	2201      	movs	r2, #1
 8006a66:	409a      	lsls	r2, r3
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a70:	f043 0202 	orr.w	r2, r3, #2
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7c:	f003 031f 	and.w	r3, r3, #31
 8006a80:	2204      	movs	r2, #4
 8006a82:	409a      	lsls	r2, r3
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	4013      	ands	r3, r2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f000 808f 	beq.w	8006bac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2c      	ldr	r2, [pc, #176]	; (8006b44 <HAL_DMA_IRQHandler+0x3f8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d04a      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x3e2>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a2a      	ldr	r2, [pc, #168]	; (8006b48 <HAL_DMA_IRQHandler+0x3fc>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d045      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x3e2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a29      	ldr	r2, [pc, #164]	; (8006b4c <HAL_DMA_IRQHandler+0x400>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d040      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x3e2>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a27      	ldr	r2, [pc, #156]	; (8006b50 <HAL_DMA_IRQHandler+0x404>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d03b      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x3e2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a26      	ldr	r2, [pc, #152]	; (8006b54 <HAL_DMA_IRQHandler+0x408>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d036      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x3e2>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a24      	ldr	r2, [pc, #144]	; (8006b58 <HAL_DMA_IRQHandler+0x40c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d031      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x3e2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a23      	ldr	r2, [pc, #140]	; (8006b5c <HAL_DMA_IRQHandler+0x410>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d02c      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x3e2>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a21      	ldr	r2, [pc, #132]	; (8006b60 <HAL_DMA_IRQHandler+0x414>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d027      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x3e2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a20      	ldr	r2, [pc, #128]	; (8006b64 <HAL_DMA_IRQHandler+0x418>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d022      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x3e2>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1e      	ldr	r2, [pc, #120]	; (8006b68 <HAL_DMA_IRQHandler+0x41c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d01d      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x3e2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1d      	ldr	r2, [pc, #116]	; (8006b6c <HAL_DMA_IRQHandler+0x420>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d018      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x3e2>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a1b      	ldr	r2, [pc, #108]	; (8006b70 <HAL_DMA_IRQHandler+0x424>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d013      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x3e2>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a1a      	ldr	r2, [pc, #104]	; (8006b74 <HAL_DMA_IRQHandler+0x428>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d00e      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x3e2>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a18      	ldr	r2, [pc, #96]	; (8006b78 <HAL_DMA_IRQHandler+0x42c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d009      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x3e2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a17      	ldr	r2, [pc, #92]	; (8006b7c <HAL_DMA_IRQHandler+0x430>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d004      	beq.n	8006b2e <HAL_DMA_IRQHandler+0x3e2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a15      	ldr	r2, [pc, #84]	; (8006b80 <HAL_DMA_IRQHandler+0x434>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d12a      	bne.n	8006b84 <HAL_DMA_IRQHandler+0x438>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	bf14      	ite	ne
 8006b3c:	2301      	movne	r3, #1
 8006b3e:	2300      	moveq	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	e023      	b.n	8006b8c <HAL_DMA_IRQHandler+0x440>
 8006b44:	40020010 	.word	0x40020010
 8006b48:	40020028 	.word	0x40020028
 8006b4c:	40020040 	.word	0x40020040
 8006b50:	40020058 	.word	0x40020058
 8006b54:	40020070 	.word	0x40020070
 8006b58:	40020088 	.word	0x40020088
 8006b5c:	400200a0 	.word	0x400200a0
 8006b60:	400200b8 	.word	0x400200b8
 8006b64:	40020410 	.word	0x40020410
 8006b68:	40020428 	.word	0x40020428
 8006b6c:	40020440 	.word	0x40020440
 8006b70:	40020458 	.word	0x40020458
 8006b74:	40020470 	.word	0x40020470
 8006b78:	40020488 	.word	0x40020488
 8006b7c:	400204a0 	.word	0x400204a0
 8006b80:	400204b8 	.word	0x400204b8
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00d      	beq.n	8006bac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b94:	f003 031f 	and.w	r3, r3, #31
 8006b98:	2204      	movs	r2, #4
 8006b9a:	409a      	lsls	r2, r3
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba4:	f043 0204 	orr.w	r2, r3, #4
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb0:	f003 031f 	and.w	r3, r3, #31
 8006bb4:	2210      	movs	r2, #16
 8006bb6:	409a      	lsls	r2, r3
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 80a6 	beq.w	8006d0e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a85      	ldr	r2, [pc, #532]	; (8006ddc <HAL_DMA_IRQHandler+0x690>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d04a      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x516>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a83      	ldr	r2, [pc, #524]	; (8006de0 <HAL_DMA_IRQHandler+0x694>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d045      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x516>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a82      	ldr	r2, [pc, #520]	; (8006de4 <HAL_DMA_IRQHandler+0x698>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d040      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x516>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a80      	ldr	r2, [pc, #512]	; (8006de8 <HAL_DMA_IRQHandler+0x69c>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d03b      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x516>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a7f      	ldr	r2, [pc, #508]	; (8006dec <HAL_DMA_IRQHandler+0x6a0>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d036      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x516>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a7d      	ldr	r2, [pc, #500]	; (8006df0 <HAL_DMA_IRQHandler+0x6a4>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d031      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x516>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a7c      	ldr	r2, [pc, #496]	; (8006df4 <HAL_DMA_IRQHandler+0x6a8>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d02c      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x516>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a7a      	ldr	r2, [pc, #488]	; (8006df8 <HAL_DMA_IRQHandler+0x6ac>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d027      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x516>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a79      	ldr	r2, [pc, #484]	; (8006dfc <HAL_DMA_IRQHandler+0x6b0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d022      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x516>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a77      	ldr	r2, [pc, #476]	; (8006e00 <HAL_DMA_IRQHandler+0x6b4>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d01d      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x516>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a76      	ldr	r2, [pc, #472]	; (8006e04 <HAL_DMA_IRQHandler+0x6b8>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d018      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x516>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a74      	ldr	r2, [pc, #464]	; (8006e08 <HAL_DMA_IRQHandler+0x6bc>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d013      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x516>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a73      	ldr	r2, [pc, #460]	; (8006e0c <HAL_DMA_IRQHandler+0x6c0>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d00e      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x516>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a71      	ldr	r2, [pc, #452]	; (8006e10 <HAL_DMA_IRQHandler+0x6c4>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d009      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x516>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a70      	ldr	r2, [pc, #448]	; (8006e14 <HAL_DMA_IRQHandler+0x6c8>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d004      	beq.n	8006c62 <HAL_DMA_IRQHandler+0x516>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a6e      	ldr	r2, [pc, #440]	; (8006e18 <HAL_DMA_IRQHandler+0x6cc>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d10a      	bne.n	8006c78 <HAL_DMA_IRQHandler+0x52c>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	bf14      	ite	ne
 8006c70:	2301      	movne	r3, #1
 8006c72:	2300      	moveq	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	e009      	b.n	8006c8c <HAL_DMA_IRQHandler+0x540>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0304 	and.w	r3, r3, #4
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	bf14      	ite	ne
 8006c86:	2301      	movne	r3, #1
 8006c88:	2300      	moveq	r3, #0
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d03e      	beq.n	8006d0e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	2210      	movs	r2, #16
 8006c9a:	409a      	lsls	r2, r3
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d018      	beq.n	8006ce0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d108      	bne.n	8006cce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d024      	beq.n	8006d0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	4798      	blx	r3
 8006ccc:	e01f      	b.n	8006d0e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d01b      	beq.n	8006d0e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	4798      	blx	r3
 8006cde:	e016      	b.n	8006d0e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d107      	bne.n	8006cfe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0208 	bic.w	r2, r2, #8
 8006cfc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d12:	f003 031f 	and.w	r3, r3, #31
 8006d16:	2220      	movs	r2, #32
 8006d18:	409a      	lsls	r2, r3
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 8110 	beq.w	8006f44 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a2c      	ldr	r2, [pc, #176]	; (8006ddc <HAL_DMA_IRQHandler+0x690>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d04a      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x678>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a2b      	ldr	r2, [pc, #172]	; (8006de0 <HAL_DMA_IRQHandler+0x694>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d045      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x678>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a29      	ldr	r2, [pc, #164]	; (8006de4 <HAL_DMA_IRQHandler+0x698>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d040      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x678>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a28      	ldr	r2, [pc, #160]	; (8006de8 <HAL_DMA_IRQHandler+0x69c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d03b      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x678>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a26      	ldr	r2, [pc, #152]	; (8006dec <HAL_DMA_IRQHandler+0x6a0>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d036      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x678>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a25      	ldr	r2, [pc, #148]	; (8006df0 <HAL_DMA_IRQHandler+0x6a4>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d031      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x678>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a23      	ldr	r2, [pc, #140]	; (8006df4 <HAL_DMA_IRQHandler+0x6a8>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d02c      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x678>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a22      	ldr	r2, [pc, #136]	; (8006df8 <HAL_DMA_IRQHandler+0x6ac>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d027      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x678>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a20      	ldr	r2, [pc, #128]	; (8006dfc <HAL_DMA_IRQHandler+0x6b0>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d022      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x678>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1f      	ldr	r2, [pc, #124]	; (8006e00 <HAL_DMA_IRQHandler+0x6b4>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d01d      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x678>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1d      	ldr	r2, [pc, #116]	; (8006e04 <HAL_DMA_IRQHandler+0x6b8>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d018      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x678>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a1c      	ldr	r2, [pc, #112]	; (8006e08 <HAL_DMA_IRQHandler+0x6bc>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d013      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x678>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1a      	ldr	r2, [pc, #104]	; (8006e0c <HAL_DMA_IRQHandler+0x6c0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d00e      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x678>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a19      	ldr	r2, [pc, #100]	; (8006e10 <HAL_DMA_IRQHandler+0x6c4>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d009      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x678>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a17      	ldr	r2, [pc, #92]	; (8006e14 <HAL_DMA_IRQHandler+0x6c8>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d004      	beq.n	8006dc4 <HAL_DMA_IRQHandler+0x678>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a16      	ldr	r2, [pc, #88]	; (8006e18 <HAL_DMA_IRQHandler+0x6cc>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d12b      	bne.n	8006e1c <HAL_DMA_IRQHandler+0x6d0>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	bf14      	ite	ne
 8006dd2:	2301      	movne	r3, #1
 8006dd4:	2300      	moveq	r3, #0
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	e02a      	b.n	8006e30 <HAL_DMA_IRQHandler+0x6e4>
 8006dda:	bf00      	nop
 8006ddc:	40020010 	.word	0x40020010
 8006de0:	40020028 	.word	0x40020028
 8006de4:	40020040 	.word	0x40020040
 8006de8:	40020058 	.word	0x40020058
 8006dec:	40020070 	.word	0x40020070
 8006df0:	40020088 	.word	0x40020088
 8006df4:	400200a0 	.word	0x400200a0
 8006df8:	400200b8 	.word	0x400200b8
 8006dfc:	40020410 	.word	0x40020410
 8006e00:	40020428 	.word	0x40020428
 8006e04:	40020440 	.word	0x40020440
 8006e08:	40020458 	.word	0x40020458
 8006e0c:	40020470 	.word	0x40020470
 8006e10:	40020488 	.word	0x40020488
 8006e14:	400204a0 	.word	0x400204a0
 8006e18:	400204b8 	.word	0x400204b8
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	bf14      	ite	ne
 8006e2a:	2301      	movne	r3, #1
 8006e2c:	2300      	moveq	r3, #0
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8087 	beq.w	8006f44 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	2220      	movs	r2, #32
 8006e40:	409a      	lsls	r2, r3
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d139      	bne.n	8006ec6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0216 	bic.w	r2, r2, #22
 8006e60:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	695a      	ldr	r2, [r3, #20]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e70:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d103      	bne.n	8006e82 <HAL_DMA_IRQHandler+0x736>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d007      	beq.n	8006e92 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0208 	bic.w	r2, r2, #8
 8006e90:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e96:	f003 031f 	and.w	r3, r3, #31
 8006e9a:	223f      	movs	r2, #63	; 0x3f
 8006e9c:	409a      	lsls	r2, r3
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 834a 	beq.w	8007550 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	4798      	blx	r3
          }
          return;
 8006ec4:	e344      	b.n	8007550 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d018      	beq.n	8006f06 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d108      	bne.n	8006ef4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d02c      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	4798      	blx	r3
 8006ef2:	e027      	b.n	8006f44 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d023      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	4798      	blx	r3
 8006f04:	e01e      	b.n	8006f44 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10f      	bne.n	8006f34 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0210 	bic.w	r2, r2, #16
 8006f22:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 8306 	beq.w	800755a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 8088 	beq.w	800706c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2204      	movs	r2, #4
 8006f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a7a      	ldr	r2, [pc, #488]	; (8007154 <HAL_DMA_IRQHandler+0xa08>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d04a      	beq.n	8007004 <HAL_DMA_IRQHandler+0x8b8>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a79      	ldr	r2, [pc, #484]	; (8007158 <HAL_DMA_IRQHandler+0xa0c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d045      	beq.n	8007004 <HAL_DMA_IRQHandler+0x8b8>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a77      	ldr	r2, [pc, #476]	; (800715c <HAL_DMA_IRQHandler+0xa10>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d040      	beq.n	8007004 <HAL_DMA_IRQHandler+0x8b8>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a76      	ldr	r2, [pc, #472]	; (8007160 <HAL_DMA_IRQHandler+0xa14>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d03b      	beq.n	8007004 <HAL_DMA_IRQHandler+0x8b8>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a74      	ldr	r2, [pc, #464]	; (8007164 <HAL_DMA_IRQHandler+0xa18>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d036      	beq.n	8007004 <HAL_DMA_IRQHandler+0x8b8>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a73      	ldr	r2, [pc, #460]	; (8007168 <HAL_DMA_IRQHandler+0xa1c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d031      	beq.n	8007004 <HAL_DMA_IRQHandler+0x8b8>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a71      	ldr	r2, [pc, #452]	; (800716c <HAL_DMA_IRQHandler+0xa20>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d02c      	beq.n	8007004 <HAL_DMA_IRQHandler+0x8b8>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a70      	ldr	r2, [pc, #448]	; (8007170 <HAL_DMA_IRQHandler+0xa24>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d027      	beq.n	8007004 <HAL_DMA_IRQHandler+0x8b8>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a6e      	ldr	r2, [pc, #440]	; (8007174 <HAL_DMA_IRQHandler+0xa28>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d022      	beq.n	8007004 <HAL_DMA_IRQHandler+0x8b8>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a6d      	ldr	r2, [pc, #436]	; (8007178 <HAL_DMA_IRQHandler+0xa2c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d01d      	beq.n	8007004 <HAL_DMA_IRQHandler+0x8b8>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a6b      	ldr	r2, [pc, #428]	; (800717c <HAL_DMA_IRQHandler+0xa30>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d018      	beq.n	8007004 <HAL_DMA_IRQHandler+0x8b8>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a6a      	ldr	r2, [pc, #424]	; (8007180 <HAL_DMA_IRQHandler+0xa34>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d013      	beq.n	8007004 <HAL_DMA_IRQHandler+0x8b8>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a68      	ldr	r2, [pc, #416]	; (8007184 <HAL_DMA_IRQHandler+0xa38>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00e      	beq.n	8007004 <HAL_DMA_IRQHandler+0x8b8>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a67      	ldr	r2, [pc, #412]	; (8007188 <HAL_DMA_IRQHandler+0xa3c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d009      	beq.n	8007004 <HAL_DMA_IRQHandler+0x8b8>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a65      	ldr	r2, [pc, #404]	; (800718c <HAL_DMA_IRQHandler+0xa40>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d004      	beq.n	8007004 <HAL_DMA_IRQHandler+0x8b8>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a64      	ldr	r2, [pc, #400]	; (8007190 <HAL_DMA_IRQHandler+0xa44>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d108      	bne.n	8007016 <HAL_DMA_IRQHandler+0x8ca>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 0201 	bic.w	r2, r2, #1
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	e007      	b.n	8007026 <HAL_DMA_IRQHandler+0x8da>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 0201 	bic.w	r2, r2, #1
 8007024:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3301      	adds	r3, #1
 800702a:	60fb      	str	r3, [r7, #12]
 800702c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800702e:	429a      	cmp	r2, r3
 8007030:	d307      	bcc.n	8007042 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1f2      	bne.n	8007026 <HAL_DMA_IRQHandler+0x8da>
 8007040:	e000      	b.n	8007044 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007042:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d004      	beq.n	800705c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2203      	movs	r2, #3
 8007056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800705a:	e003      	b.n	8007064 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8272 	beq.w	800755a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
 800707e:	e26c      	b.n	800755a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a43      	ldr	r2, [pc, #268]	; (8007194 <HAL_DMA_IRQHandler+0xa48>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d022      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x984>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a42      	ldr	r2, [pc, #264]	; (8007198 <HAL_DMA_IRQHandler+0xa4c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d01d      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x984>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a40      	ldr	r2, [pc, #256]	; (800719c <HAL_DMA_IRQHandler+0xa50>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d018      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x984>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a3f      	ldr	r2, [pc, #252]	; (80071a0 <HAL_DMA_IRQHandler+0xa54>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d013      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x984>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a3d      	ldr	r2, [pc, #244]	; (80071a4 <HAL_DMA_IRQHandler+0xa58>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d00e      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x984>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a3c      	ldr	r2, [pc, #240]	; (80071a8 <HAL_DMA_IRQHandler+0xa5c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d009      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x984>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a3a      	ldr	r2, [pc, #232]	; (80071ac <HAL_DMA_IRQHandler+0xa60>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d004      	beq.n	80070d0 <HAL_DMA_IRQHandler+0x984>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a39      	ldr	r2, [pc, #228]	; (80071b0 <HAL_DMA_IRQHandler+0xa64>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d101      	bne.n	80070d4 <HAL_DMA_IRQHandler+0x988>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e000      	b.n	80070d6 <HAL_DMA_IRQHandler+0x98a>
 80070d4:	2300      	movs	r3, #0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 823f 	beq.w	800755a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e8:	f003 031f 	and.w	r3, r3, #31
 80070ec:	2204      	movs	r2, #4
 80070ee:	409a      	lsls	r2, r3
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	4013      	ands	r3, r2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 80cd 	beq.w	8007294 <HAL_DMA_IRQHandler+0xb48>
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	f000 80c7 	beq.w	8007294 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800710a:	f003 031f 	and.w	r3, r3, #31
 800710e:	2204      	movs	r2, #4
 8007110:	409a      	lsls	r2, r3
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d049      	beq.n	80071b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d109      	bne.n	800713e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 8210 	beq.w	8007554 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800713c:	e20a      	b.n	8007554 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 8206 	beq.w	8007554 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007150:	e200      	b.n	8007554 <HAL_DMA_IRQHandler+0xe08>
 8007152:	bf00      	nop
 8007154:	40020010 	.word	0x40020010
 8007158:	40020028 	.word	0x40020028
 800715c:	40020040 	.word	0x40020040
 8007160:	40020058 	.word	0x40020058
 8007164:	40020070 	.word	0x40020070
 8007168:	40020088 	.word	0x40020088
 800716c:	400200a0 	.word	0x400200a0
 8007170:	400200b8 	.word	0x400200b8
 8007174:	40020410 	.word	0x40020410
 8007178:	40020428 	.word	0x40020428
 800717c:	40020440 	.word	0x40020440
 8007180:	40020458 	.word	0x40020458
 8007184:	40020470 	.word	0x40020470
 8007188:	40020488 	.word	0x40020488
 800718c:	400204a0 	.word	0x400204a0
 8007190:	400204b8 	.word	0x400204b8
 8007194:	58025408 	.word	0x58025408
 8007198:	5802541c 	.word	0x5802541c
 800719c:	58025430 	.word	0x58025430
 80071a0:	58025444 	.word	0x58025444
 80071a4:	58025458 	.word	0x58025458
 80071a8:	5802546c 	.word	0x5802546c
 80071ac:	58025480 	.word	0x58025480
 80071b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f003 0320 	and.w	r3, r3, #32
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d160      	bne.n	8007280 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a7f      	ldr	r2, [pc, #508]	; (80073c0 <HAL_DMA_IRQHandler+0xc74>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d04a      	beq.n	800725e <HAL_DMA_IRQHandler+0xb12>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a7d      	ldr	r2, [pc, #500]	; (80073c4 <HAL_DMA_IRQHandler+0xc78>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d045      	beq.n	800725e <HAL_DMA_IRQHandler+0xb12>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a7c      	ldr	r2, [pc, #496]	; (80073c8 <HAL_DMA_IRQHandler+0xc7c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d040      	beq.n	800725e <HAL_DMA_IRQHandler+0xb12>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a7a      	ldr	r2, [pc, #488]	; (80073cc <HAL_DMA_IRQHandler+0xc80>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d03b      	beq.n	800725e <HAL_DMA_IRQHandler+0xb12>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a79      	ldr	r2, [pc, #484]	; (80073d0 <HAL_DMA_IRQHandler+0xc84>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d036      	beq.n	800725e <HAL_DMA_IRQHandler+0xb12>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a77      	ldr	r2, [pc, #476]	; (80073d4 <HAL_DMA_IRQHandler+0xc88>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d031      	beq.n	800725e <HAL_DMA_IRQHandler+0xb12>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a76      	ldr	r2, [pc, #472]	; (80073d8 <HAL_DMA_IRQHandler+0xc8c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d02c      	beq.n	800725e <HAL_DMA_IRQHandler+0xb12>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a74      	ldr	r2, [pc, #464]	; (80073dc <HAL_DMA_IRQHandler+0xc90>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d027      	beq.n	800725e <HAL_DMA_IRQHandler+0xb12>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a73      	ldr	r2, [pc, #460]	; (80073e0 <HAL_DMA_IRQHandler+0xc94>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d022      	beq.n	800725e <HAL_DMA_IRQHandler+0xb12>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a71      	ldr	r2, [pc, #452]	; (80073e4 <HAL_DMA_IRQHandler+0xc98>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d01d      	beq.n	800725e <HAL_DMA_IRQHandler+0xb12>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a70      	ldr	r2, [pc, #448]	; (80073e8 <HAL_DMA_IRQHandler+0xc9c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d018      	beq.n	800725e <HAL_DMA_IRQHandler+0xb12>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a6e      	ldr	r2, [pc, #440]	; (80073ec <HAL_DMA_IRQHandler+0xca0>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d013      	beq.n	800725e <HAL_DMA_IRQHandler+0xb12>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a6d      	ldr	r2, [pc, #436]	; (80073f0 <HAL_DMA_IRQHandler+0xca4>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d00e      	beq.n	800725e <HAL_DMA_IRQHandler+0xb12>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a6b      	ldr	r2, [pc, #428]	; (80073f4 <HAL_DMA_IRQHandler+0xca8>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d009      	beq.n	800725e <HAL_DMA_IRQHandler+0xb12>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a6a      	ldr	r2, [pc, #424]	; (80073f8 <HAL_DMA_IRQHandler+0xcac>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d004      	beq.n	800725e <HAL_DMA_IRQHandler+0xb12>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a68      	ldr	r2, [pc, #416]	; (80073fc <HAL_DMA_IRQHandler+0xcb0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d108      	bne.n	8007270 <HAL_DMA_IRQHandler+0xb24>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0208 	bic.w	r2, r2, #8
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	e007      	b.n	8007280 <HAL_DMA_IRQHandler+0xb34>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0204 	bic.w	r2, r2, #4
 800727e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 8165 	beq.w	8007554 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007292:	e15f      	b.n	8007554 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007298:	f003 031f 	and.w	r3, r3, #31
 800729c:	2202      	movs	r2, #2
 800729e:	409a      	lsls	r2, r3
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	4013      	ands	r3, r2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 80c5 	beq.w	8007434 <HAL_DMA_IRQHandler+0xce8>
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 80bf 	beq.w	8007434 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ba:	f003 031f 	and.w	r3, r3, #31
 80072be:	2202      	movs	r2, #2
 80072c0:	409a      	lsls	r2, r3
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d018      	beq.n	8007302 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d109      	bne.n	80072ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 813a 	beq.w	8007558 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072ec:	e134      	b.n	8007558 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 8130 	beq.w	8007558 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007300:	e12a      	b.n	8007558 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f003 0320 	and.w	r3, r3, #32
 8007308:	2b00      	cmp	r3, #0
 800730a:	f040 8089 	bne.w	8007420 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a2b      	ldr	r2, [pc, #172]	; (80073c0 <HAL_DMA_IRQHandler+0xc74>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d04a      	beq.n	80073ae <HAL_DMA_IRQHandler+0xc62>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a29      	ldr	r2, [pc, #164]	; (80073c4 <HAL_DMA_IRQHandler+0xc78>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d045      	beq.n	80073ae <HAL_DMA_IRQHandler+0xc62>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a28      	ldr	r2, [pc, #160]	; (80073c8 <HAL_DMA_IRQHandler+0xc7c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d040      	beq.n	80073ae <HAL_DMA_IRQHandler+0xc62>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a26      	ldr	r2, [pc, #152]	; (80073cc <HAL_DMA_IRQHandler+0xc80>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d03b      	beq.n	80073ae <HAL_DMA_IRQHandler+0xc62>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a25      	ldr	r2, [pc, #148]	; (80073d0 <HAL_DMA_IRQHandler+0xc84>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d036      	beq.n	80073ae <HAL_DMA_IRQHandler+0xc62>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a23      	ldr	r2, [pc, #140]	; (80073d4 <HAL_DMA_IRQHandler+0xc88>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d031      	beq.n	80073ae <HAL_DMA_IRQHandler+0xc62>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a22      	ldr	r2, [pc, #136]	; (80073d8 <HAL_DMA_IRQHandler+0xc8c>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d02c      	beq.n	80073ae <HAL_DMA_IRQHandler+0xc62>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a20      	ldr	r2, [pc, #128]	; (80073dc <HAL_DMA_IRQHandler+0xc90>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d027      	beq.n	80073ae <HAL_DMA_IRQHandler+0xc62>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a1f      	ldr	r2, [pc, #124]	; (80073e0 <HAL_DMA_IRQHandler+0xc94>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d022      	beq.n	80073ae <HAL_DMA_IRQHandler+0xc62>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a1d      	ldr	r2, [pc, #116]	; (80073e4 <HAL_DMA_IRQHandler+0xc98>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d01d      	beq.n	80073ae <HAL_DMA_IRQHandler+0xc62>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a1c      	ldr	r2, [pc, #112]	; (80073e8 <HAL_DMA_IRQHandler+0xc9c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d018      	beq.n	80073ae <HAL_DMA_IRQHandler+0xc62>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a1a      	ldr	r2, [pc, #104]	; (80073ec <HAL_DMA_IRQHandler+0xca0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d013      	beq.n	80073ae <HAL_DMA_IRQHandler+0xc62>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a19      	ldr	r2, [pc, #100]	; (80073f0 <HAL_DMA_IRQHandler+0xca4>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d00e      	beq.n	80073ae <HAL_DMA_IRQHandler+0xc62>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a17      	ldr	r2, [pc, #92]	; (80073f4 <HAL_DMA_IRQHandler+0xca8>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d009      	beq.n	80073ae <HAL_DMA_IRQHandler+0xc62>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a16      	ldr	r2, [pc, #88]	; (80073f8 <HAL_DMA_IRQHandler+0xcac>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d004      	beq.n	80073ae <HAL_DMA_IRQHandler+0xc62>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a14      	ldr	r2, [pc, #80]	; (80073fc <HAL_DMA_IRQHandler+0xcb0>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d128      	bne.n	8007400 <HAL_DMA_IRQHandler+0xcb4>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0214 	bic.w	r2, r2, #20
 80073bc:	601a      	str	r2, [r3, #0]
 80073be:	e027      	b.n	8007410 <HAL_DMA_IRQHandler+0xcc4>
 80073c0:	40020010 	.word	0x40020010
 80073c4:	40020028 	.word	0x40020028
 80073c8:	40020040 	.word	0x40020040
 80073cc:	40020058 	.word	0x40020058
 80073d0:	40020070 	.word	0x40020070
 80073d4:	40020088 	.word	0x40020088
 80073d8:	400200a0 	.word	0x400200a0
 80073dc:	400200b8 	.word	0x400200b8
 80073e0:	40020410 	.word	0x40020410
 80073e4:	40020428 	.word	0x40020428
 80073e8:	40020440 	.word	0x40020440
 80073ec:	40020458 	.word	0x40020458
 80073f0:	40020470 	.word	0x40020470
 80073f4:	40020488 	.word	0x40020488
 80073f8:	400204a0 	.word	0x400204a0
 80073fc:	400204b8 	.word	0x400204b8
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 020a 	bic.w	r2, r2, #10
 800740e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 8097 	beq.w	8007558 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007432:	e091      	b.n	8007558 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007438:	f003 031f 	and.w	r3, r3, #31
 800743c:	2208      	movs	r2, #8
 800743e:	409a      	lsls	r2, r3
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	4013      	ands	r3, r2
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 8088 	beq.w	800755a <HAL_DMA_IRQHandler+0xe0e>
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f003 0308 	and.w	r3, r3, #8
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 8082 	beq.w	800755a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a41      	ldr	r2, [pc, #260]	; (8007560 <HAL_DMA_IRQHandler+0xe14>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d04a      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xdaa>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a3f      	ldr	r2, [pc, #252]	; (8007564 <HAL_DMA_IRQHandler+0xe18>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d045      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xdaa>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a3e      	ldr	r2, [pc, #248]	; (8007568 <HAL_DMA_IRQHandler+0xe1c>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d040      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xdaa>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a3c      	ldr	r2, [pc, #240]	; (800756c <HAL_DMA_IRQHandler+0xe20>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d03b      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xdaa>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a3b      	ldr	r2, [pc, #236]	; (8007570 <HAL_DMA_IRQHandler+0xe24>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d036      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xdaa>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a39      	ldr	r2, [pc, #228]	; (8007574 <HAL_DMA_IRQHandler+0xe28>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d031      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xdaa>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a38      	ldr	r2, [pc, #224]	; (8007578 <HAL_DMA_IRQHandler+0xe2c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d02c      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xdaa>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a36      	ldr	r2, [pc, #216]	; (800757c <HAL_DMA_IRQHandler+0xe30>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d027      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xdaa>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a35      	ldr	r2, [pc, #212]	; (8007580 <HAL_DMA_IRQHandler+0xe34>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d022      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xdaa>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a33      	ldr	r2, [pc, #204]	; (8007584 <HAL_DMA_IRQHandler+0xe38>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d01d      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xdaa>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a32      	ldr	r2, [pc, #200]	; (8007588 <HAL_DMA_IRQHandler+0xe3c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d018      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xdaa>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a30      	ldr	r2, [pc, #192]	; (800758c <HAL_DMA_IRQHandler+0xe40>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d013      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xdaa>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a2f      	ldr	r2, [pc, #188]	; (8007590 <HAL_DMA_IRQHandler+0xe44>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00e      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xdaa>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a2d      	ldr	r2, [pc, #180]	; (8007594 <HAL_DMA_IRQHandler+0xe48>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d009      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xdaa>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a2c      	ldr	r2, [pc, #176]	; (8007598 <HAL_DMA_IRQHandler+0xe4c>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d004      	beq.n	80074f6 <HAL_DMA_IRQHandler+0xdaa>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a2a      	ldr	r2, [pc, #168]	; (800759c <HAL_DMA_IRQHandler+0xe50>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d108      	bne.n	8007508 <HAL_DMA_IRQHandler+0xdbc>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 021c 	bic.w	r2, r2, #28
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	e007      	b.n	8007518 <HAL_DMA_IRQHandler+0xdcc>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f022 020e 	bic.w	r2, r2, #14
 8007516:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800751c:	f003 031f 	and.w	r3, r3, #31
 8007520:	2201      	movs	r2, #1
 8007522:	409a      	lsls	r2, r3
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007542:	2b00      	cmp	r3, #0
 8007544:	d009      	beq.n	800755a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	4798      	blx	r3
 800754e:	e004      	b.n	800755a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007550:	bf00      	nop
 8007552:	e002      	b.n	800755a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007554:	bf00      	nop
 8007556:	e000      	b.n	800755a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007558:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800755a:	3728      	adds	r7, #40	; 0x28
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	40020010 	.word	0x40020010
 8007564:	40020028 	.word	0x40020028
 8007568:	40020040 	.word	0x40020040
 800756c:	40020058 	.word	0x40020058
 8007570:	40020070 	.word	0x40020070
 8007574:	40020088 	.word	0x40020088
 8007578:	400200a0 	.word	0x400200a0
 800757c:	400200b8 	.word	0x400200b8
 8007580:	40020410 	.word	0x40020410
 8007584:	40020428 	.word	0x40020428
 8007588:	40020440 	.word	0x40020440
 800758c:	40020458 	.word	0x40020458
 8007590:	40020470 	.word	0x40020470
 8007594:	40020488 	.word	0x40020488
 8007598:	400204a0 	.word	0x400204a0
 800759c:	400204b8 	.word	0x400204b8

080075a0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a7f      	ldr	r2, [pc, #508]	; (80077d4 <DMA_SetConfig+0x21c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d072      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a7d      	ldr	r2, [pc, #500]	; (80077d8 <DMA_SetConfig+0x220>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d06d      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a7c      	ldr	r2, [pc, #496]	; (80077dc <DMA_SetConfig+0x224>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d068      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a7a      	ldr	r2, [pc, #488]	; (80077e0 <DMA_SetConfig+0x228>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d063      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a79      	ldr	r2, [pc, #484]	; (80077e4 <DMA_SetConfig+0x22c>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d05e      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a77      	ldr	r2, [pc, #476]	; (80077e8 <DMA_SetConfig+0x230>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d059      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a76      	ldr	r2, [pc, #472]	; (80077ec <DMA_SetConfig+0x234>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d054      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a74      	ldr	r2, [pc, #464]	; (80077f0 <DMA_SetConfig+0x238>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d04f      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a73      	ldr	r2, [pc, #460]	; (80077f4 <DMA_SetConfig+0x23c>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d04a      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a71      	ldr	r2, [pc, #452]	; (80077f8 <DMA_SetConfig+0x240>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d045      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a70      	ldr	r2, [pc, #448]	; (80077fc <DMA_SetConfig+0x244>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d040      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a6e      	ldr	r2, [pc, #440]	; (8007800 <DMA_SetConfig+0x248>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d03b      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a6d      	ldr	r2, [pc, #436]	; (8007804 <DMA_SetConfig+0x24c>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d036      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a6b      	ldr	r2, [pc, #428]	; (8007808 <DMA_SetConfig+0x250>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d031      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a6a      	ldr	r2, [pc, #424]	; (800780c <DMA_SetConfig+0x254>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d02c      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a68      	ldr	r2, [pc, #416]	; (8007810 <DMA_SetConfig+0x258>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d027      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a67      	ldr	r2, [pc, #412]	; (8007814 <DMA_SetConfig+0x25c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d022      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a65      	ldr	r2, [pc, #404]	; (8007818 <DMA_SetConfig+0x260>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d01d      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a64      	ldr	r2, [pc, #400]	; (800781c <DMA_SetConfig+0x264>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d018      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a62      	ldr	r2, [pc, #392]	; (8007820 <DMA_SetConfig+0x268>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d013      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a61      	ldr	r2, [pc, #388]	; (8007824 <DMA_SetConfig+0x26c>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d00e      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a5f      	ldr	r2, [pc, #380]	; (8007828 <DMA_SetConfig+0x270>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d009      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a5e      	ldr	r2, [pc, #376]	; (800782c <DMA_SetConfig+0x274>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d004      	beq.n	80076c2 <DMA_SetConfig+0x10a>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a5c      	ldr	r2, [pc, #368]	; (8007830 <DMA_SetConfig+0x278>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d101      	bne.n	80076c6 <DMA_SetConfig+0x10e>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e000      	b.n	80076c8 <DMA_SetConfig+0x110>
 80076c6:	2300      	movs	r3, #0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00d      	beq.n	80076e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80076d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d004      	beq.n	80076e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80076e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a39      	ldr	r2, [pc, #228]	; (80077d4 <DMA_SetConfig+0x21c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d04a      	beq.n	8007788 <DMA_SetConfig+0x1d0>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a38      	ldr	r2, [pc, #224]	; (80077d8 <DMA_SetConfig+0x220>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d045      	beq.n	8007788 <DMA_SetConfig+0x1d0>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a36      	ldr	r2, [pc, #216]	; (80077dc <DMA_SetConfig+0x224>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d040      	beq.n	8007788 <DMA_SetConfig+0x1d0>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a35      	ldr	r2, [pc, #212]	; (80077e0 <DMA_SetConfig+0x228>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d03b      	beq.n	8007788 <DMA_SetConfig+0x1d0>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a33      	ldr	r2, [pc, #204]	; (80077e4 <DMA_SetConfig+0x22c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d036      	beq.n	8007788 <DMA_SetConfig+0x1d0>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a32      	ldr	r2, [pc, #200]	; (80077e8 <DMA_SetConfig+0x230>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d031      	beq.n	8007788 <DMA_SetConfig+0x1d0>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a30      	ldr	r2, [pc, #192]	; (80077ec <DMA_SetConfig+0x234>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d02c      	beq.n	8007788 <DMA_SetConfig+0x1d0>
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a2f      	ldr	r2, [pc, #188]	; (80077f0 <DMA_SetConfig+0x238>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d027      	beq.n	8007788 <DMA_SetConfig+0x1d0>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a2d      	ldr	r2, [pc, #180]	; (80077f4 <DMA_SetConfig+0x23c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d022      	beq.n	8007788 <DMA_SetConfig+0x1d0>
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a2c      	ldr	r2, [pc, #176]	; (80077f8 <DMA_SetConfig+0x240>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d01d      	beq.n	8007788 <DMA_SetConfig+0x1d0>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a2a      	ldr	r2, [pc, #168]	; (80077fc <DMA_SetConfig+0x244>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d018      	beq.n	8007788 <DMA_SetConfig+0x1d0>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a29      	ldr	r2, [pc, #164]	; (8007800 <DMA_SetConfig+0x248>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d013      	beq.n	8007788 <DMA_SetConfig+0x1d0>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a27      	ldr	r2, [pc, #156]	; (8007804 <DMA_SetConfig+0x24c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d00e      	beq.n	8007788 <DMA_SetConfig+0x1d0>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a26      	ldr	r2, [pc, #152]	; (8007808 <DMA_SetConfig+0x250>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d009      	beq.n	8007788 <DMA_SetConfig+0x1d0>
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a24      	ldr	r2, [pc, #144]	; (800780c <DMA_SetConfig+0x254>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d004      	beq.n	8007788 <DMA_SetConfig+0x1d0>
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a23      	ldr	r2, [pc, #140]	; (8007810 <DMA_SetConfig+0x258>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d101      	bne.n	800778c <DMA_SetConfig+0x1d4>
 8007788:	2301      	movs	r3, #1
 800778a:	e000      	b.n	800778e <DMA_SetConfig+0x1d6>
 800778c:	2300      	movs	r3, #0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d059      	beq.n	8007846 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007796:	f003 031f 	and.w	r3, r3, #31
 800779a:	223f      	movs	r2, #63	; 0x3f
 800779c:	409a      	lsls	r2, r3
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80077b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	2b40      	cmp	r3, #64	; 0x40
 80077c0:	d138      	bne.n	8007834 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80077d2:	e086      	b.n	80078e2 <DMA_SetConfig+0x32a>
 80077d4:	40020010 	.word	0x40020010
 80077d8:	40020028 	.word	0x40020028
 80077dc:	40020040 	.word	0x40020040
 80077e0:	40020058 	.word	0x40020058
 80077e4:	40020070 	.word	0x40020070
 80077e8:	40020088 	.word	0x40020088
 80077ec:	400200a0 	.word	0x400200a0
 80077f0:	400200b8 	.word	0x400200b8
 80077f4:	40020410 	.word	0x40020410
 80077f8:	40020428 	.word	0x40020428
 80077fc:	40020440 	.word	0x40020440
 8007800:	40020458 	.word	0x40020458
 8007804:	40020470 	.word	0x40020470
 8007808:	40020488 	.word	0x40020488
 800780c:	400204a0 	.word	0x400204a0
 8007810:	400204b8 	.word	0x400204b8
 8007814:	58025408 	.word	0x58025408
 8007818:	5802541c 	.word	0x5802541c
 800781c:	58025430 	.word	0x58025430
 8007820:	58025444 	.word	0x58025444
 8007824:	58025458 	.word	0x58025458
 8007828:	5802546c 	.word	0x5802546c
 800782c:	58025480 	.word	0x58025480
 8007830:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	60da      	str	r2, [r3, #12]
}
 8007844:	e04d      	b.n	80078e2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a29      	ldr	r2, [pc, #164]	; (80078f0 <DMA_SetConfig+0x338>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d022      	beq.n	8007896 <DMA_SetConfig+0x2de>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a27      	ldr	r2, [pc, #156]	; (80078f4 <DMA_SetConfig+0x33c>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d01d      	beq.n	8007896 <DMA_SetConfig+0x2de>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a26      	ldr	r2, [pc, #152]	; (80078f8 <DMA_SetConfig+0x340>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d018      	beq.n	8007896 <DMA_SetConfig+0x2de>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a24      	ldr	r2, [pc, #144]	; (80078fc <DMA_SetConfig+0x344>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d013      	beq.n	8007896 <DMA_SetConfig+0x2de>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a23      	ldr	r2, [pc, #140]	; (8007900 <DMA_SetConfig+0x348>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d00e      	beq.n	8007896 <DMA_SetConfig+0x2de>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a21      	ldr	r2, [pc, #132]	; (8007904 <DMA_SetConfig+0x34c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d009      	beq.n	8007896 <DMA_SetConfig+0x2de>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a20      	ldr	r2, [pc, #128]	; (8007908 <DMA_SetConfig+0x350>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d004      	beq.n	8007896 <DMA_SetConfig+0x2de>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a1e      	ldr	r2, [pc, #120]	; (800790c <DMA_SetConfig+0x354>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d101      	bne.n	800789a <DMA_SetConfig+0x2e2>
 8007896:	2301      	movs	r3, #1
 8007898:	e000      	b.n	800789c <DMA_SetConfig+0x2e4>
 800789a:	2300      	movs	r3, #0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d020      	beq.n	80078e2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a4:	f003 031f 	and.w	r3, r3, #31
 80078a8:	2201      	movs	r2, #1
 80078aa:	409a      	lsls	r2, r3
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	683a      	ldr	r2, [r7, #0]
 80078b6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2b40      	cmp	r3, #64	; 0x40
 80078be:	d108      	bne.n	80078d2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	60da      	str	r2, [r3, #12]
}
 80078d0:	e007      	b.n	80078e2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	60da      	str	r2, [r3, #12]
}
 80078e2:	bf00      	nop
 80078e4:	371c      	adds	r7, #28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	58025408 	.word	0x58025408
 80078f4:	5802541c 	.word	0x5802541c
 80078f8:	58025430 	.word	0x58025430
 80078fc:	58025444 	.word	0x58025444
 8007900:	58025458 	.word	0x58025458
 8007904:	5802546c 	.word	0x5802546c
 8007908:	58025480 	.word	0x58025480
 800790c:	58025494 	.word	0x58025494

08007910 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a42      	ldr	r2, [pc, #264]	; (8007a28 <DMA_CalcBaseAndBitshift+0x118>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d04a      	beq.n	80079b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a41      	ldr	r2, [pc, #260]	; (8007a2c <DMA_CalcBaseAndBitshift+0x11c>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d045      	beq.n	80079b8 <DMA_CalcBaseAndBitshift+0xa8>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a3f      	ldr	r2, [pc, #252]	; (8007a30 <DMA_CalcBaseAndBitshift+0x120>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d040      	beq.n	80079b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a3e      	ldr	r2, [pc, #248]	; (8007a34 <DMA_CalcBaseAndBitshift+0x124>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d03b      	beq.n	80079b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a3c      	ldr	r2, [pc, #240]	; (8007a38 <DMA_CalcBaseAndBitshift+0x128>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d036      	beq.n	80079b8 <DMA_CalcBaseAndBitshift+0xa8>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a3b      	ldr	r2, [pc, #236]	; (8007a3c <DMA_CalcBaseAndBitshift+0x12c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d031      	beq.n	80079b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a39      	ldr	r2, [pc, #228]	; (8007a40 <DMA_CalcBaseAndBitshift+0x130>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d02c      	beq.n	80079b8 <DMA_CalcBaseAndBitshift+0xa8>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a38      	ldr	r2, [pc, #224]	; (8007a44 <DMA_CalcBaseAndBitshift+0x134>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d027      	beq.n	80079b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a36      	ldr	r2, [pc, #216]	; (8007a48 <DMA_CalcBaseAndBitshift+0x138>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d022      	beq.n	80079b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a35      	ldr	r2, [pc, #212]	; (8007a4c <DMA_CalcBaseAndBitshift+0x13c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d01d      	beq.n	80079b8 <DMA_CalcBaseAndBitshift+0xa8>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a33      	ldr	r2, [pc, #204]	; (8007a50 <DMA_CalcBaseAndBitshift+0x140>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d018      	beq.n	80079b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a32      	ldr	r2, [pc, #200]	; (8007a54 <DMA_CalcBaseAndBitshift+0x144>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d013      	beq.n	80079b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a30      	ldr	r2, [pc, #192]	; (8007a58 <DMA_CalcBaseAndBitshift+0x148>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00e      	beq.n	80079b8 <DMA_CalcBaseAndBitshift+0xa8>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a2f      	ldr	r2, [pc, #188]	; (8007a5c <DMA_CalcBaseAndBitshift+0x14c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d009      	beq.n	80079b8 <DMA_CalcBaseAndBitshift+0xa8>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a2d      	ldr	r2, [pc, #180]	; (8007a60 <DMA_CalcBaseAndBitshift+0x150>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d004      	beq.n	80079b8 <DMA_CalcBaseAndBitshift+0xa8>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a2c      	ldr	r2, [pc, #176]	; (8007a64 <DMA_CalcBaseAndBitshift+0x154>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d101      	bne.n	80079bc <DMA_CalcBaseAndBitshift+0xac>
 80079b8:	2301      	movs	r3, #1
 80079ba:	e000      	b.n	80079be <DMA_CalcBaseAndBitshift+0xae>
 80079bc:	2300      	movs	r3, #0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d024      	beq.n	8007a0c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	3b10      	subs	r3, #16
 80079ca:	4a27      	ldr	r2, [pc, #156]	; (8007a68 <DMA_CalcBaseAndBitshift+0x158>)
 80079cc:	fba2 2303 	umull	r2, r3, r2, r3
 80079d0:	091b      	lsrs	r3, r3, #4
 80079d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f003 0307 	and.w	r3, r3, #7
 80079da:	4a24      	ldr	r2, [pc, #144]	; (8007a6c <DMA_CalcBaseAndBitshift+0x15c>)
 80079dc:	5cd3      	ldrb	r3, [r2, r3]
 80079de:	461a      	mov	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2b03      	cmp	r3, #3
 80079e8:	d908      	bls.n	80079fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	4b1f      	ldr	r3, [pc, #124]	; (8007a70 <DMA_CalcBaseAndBitshift+0x160>)
 80079f2:	4013      	ands	r3, r2
 80079f4:	1d1a      	adds	r2, r3, #4
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	659a      	str	r2, [r3, #88]	; 0x58
 80079fa:	e00d      	b.n	8007a18 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	461a      	mov	r2, r3
 8007a02:	4b1b      	ldr	r3, [pc, #108]	; (8007a70 <DMA_CalcBaseAndBitshift+0x160>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	6593      	str	r3, [r2, #88]	; 0x58
 8007a0a:	e005      	b.n	8007a18 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	40020010 	.word	0x40020010
 8007a2c:	40020028 	.word	0x40020028
 8007a30:	40020040 	.word	0x40020040
 8007a34:	40020058 	.word	0x40020058
 8007a38:	40020070 	.word	0x40020070
 8007a3c:	40020088 	.word	0x40020088
 8007a40:	400200a0 	.word	0x400200a0
 8007a44:	400200b8 	.word	0x400200b8
 8007a48:	40020410 	.word	0x40020410
 8007a4c:	40020428 	.word	0x40020428
 8007a50:	40020440 	.word	0x40020440
 8007a54:	40020458 	.word	0x40020458
 8007a58:	40020470 	.word	0x40020470
 8007a5c:	40020488 	.word	0x40020488
 8007a60:	400204a0 	.word	0x400204a0
 8007a64:	400204b8 	.word	0x400204b8
 8007a68:	aaaaaaab 	.word	0xaaaaaaab
 8007a6c:	080123e8 	.word	0x080123e8
 8007a70:	fffffc00 	.word	0xfffffc00

08007a74 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d120      	bne.n	8007aca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d858      	bhi.n	8007b42 <DMA_CheckFifoParam+0xce>
 8007a90:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <DMA_CheckFifoParam+0x24>)
 8007a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a96:	bf00      	nop
 8007a98:	08007aa9 	.word	0x08007aa9
 8007a9c:	08007abb 	.word	0x08007abb
 8007aa0:	08007aa9 	.word	0x08007aa9
 8007aa4:	08007b43 	.word	0x08007b43
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d048      	beq.n	8007b46 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ab8:	e045      	b.n	8007b46 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ac2:	d142      	bne.n	8007b4a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007ac8:	e03f      	b.n	8007b4a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ad2:	d123      	bne.n	8007b1c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d838      	bhi.n	8007b4e <DMA_CheckFifoParam+0xda>
 8007adc:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <DMA_CheckFifoParam+0x70>)
 8007ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae2:	bf00      	nop
 8007ae4:	08007af5 	.word	0x08007af5
 8007ae8:	08007afb 	.word	0x08007afb
 8007aec:	08007af5 	.word	0x08007af5
 8007af0:	08007b0d 	.word	0x08007b0d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	73fb      	strb	r3, [r7, #15]
        break;
 8007af8:	e030      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d025      	beq.n	8007b52 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b0a:	e022      	b.n	8007b52 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b14:	d11f      	bne.n	8007b56 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007b1a:	e01c      	b.n	8007b56 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b20:	2b02      	cmp	r3, #2
 8007b22:	d902      	bls.n	8007b2a <DMA_CheckFifoParam+0xb6>
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d003      	beq.n	8007b30 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007b28:	e018      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	73fb      	strb	r3, [r7, #15]
        break;
 8007b2e:	e015      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00e      	beq.n	8007b5a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b40:	e00b      	b.n	8007b5a <DMA_CheckFifoParam+0xe6>
        break;
 8007b42:	bf00      	nop
 8007b44:	e00a      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
        break;
 8007b46:	bf00      	nop
 8007b48:	e008      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
        break;
 8007b4a:	bf00      	nop
 8007b4c:	e006      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
        break;
 8007b4e:	bf00      	nop
 8007b50:	e004      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
        break;
 8007b52:	bf00      	nop
 8007b54:	e002      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
        break;
 8007b56:	bf00      	nop
 8007b58:	e000      	b.n	8007b5c <DMA_CheckFifoParam+0xe8>
    break;
 8007b5a:	bf00      	nop
    }
  }

  return status;
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop

08007b6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a38      	ldr	r2, [pc, #224]	; (8007c60 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d022      	beq.n	8007bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a36      	ldr	r2, [pc, #216]	; (8007c64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d01d      	beq.n	8007bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a35      	ldr	r2, [pc, #212]	; (8007c68 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d018      	beq.n	8007bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a33      	ldr	r2, [pc, #204]	; (8007c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d013      	beq.n	8007bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a32      	ldr	r2, [pc, #200]	; (8007c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d00e      	beq.n	8007bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a30      	ldr	r2, [pc, #192]	; (8007c74 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d009      	beq.n	8007bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a2f      	ldr	r2, [pc, #188]	; (8007c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d004      	beq.n	8007bca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a2d      	ldr	r2, [pc, #180]	; (8007c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d101      	bne.n	8007bce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e000      	b.n	8007bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d01a      	beq.n	8007c0a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	3b08      	subs	r3, #8
 8007bdc:	4a28      	ldr	r2, [pc, #160]	; (8007c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007bde:	fba2 2303 	umull	r2, r3, r2, r3
 8007be2:	091b      	lsrs	r3, r3, #4
 8007be4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4b26      	ldr	r3, [pc, #152]	; (8007c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007bea:	4413      	add	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	461a      	mov	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a24      	ldr	r2, [pc, #144]	; (8007c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007bf8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f003 031f 	and.w	r3, r3, #31
 8007c00:	2201      	movs	r2, #1
 8007c02:	409a      	lsls	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007c08:	e024      	b.n	8007c54 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	3b10      	subs	r3, #16
 8007c12:	4a1e      	ldr	r2, [pc, #120]	; (8007c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007c14:	fba2 2303 	umull	r2, r3, r2, r3
 8007c18:	091b      	lsrs	r3, r3, #4
 8007c1a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	4a1c      	ldr	r2, [pc, #112]	; (8007c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d806      	bhi.n	8007c32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	4a1b      	ldr	r2, [pc, #108]	; (8007c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d902      	bls.n	8007c32 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3308      	adds	r3, #8
 8007c30:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	4b18      	ldr	r3, [pc, #96]	; (8007c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a16      	ldr	r2, [pc, #88]	; (8007c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007c44:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f003 031f 	and.w	r3, r3, #31
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	409a      	lsls	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007c54:	bf00      	nop
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	58025408 	.word	0x58025408
 8007c64:	5802541c 	.word	0x5802541c
 8007c68:	58025430 	.word	0x58025430
 8007c6c:	58025444 	.word	0x58025444
 8007c70:	58025458 	.word	0x58025458
 8007c74:	5802546c 	.word	0x5802546c
 8007c78:	58025480 	.word	0x58025480
 8007c7c:	58025494 	.word	0x58025494
 8007c80:	cccccccd 	.word	0xcccccccd
 8007c84:	16009600 	.word	0x16009600
 8007c88:	58025880 	.word	0x58025880
 8007c8c:	aaaaaaab 	.word	0xaaaaaaab
 8007c90:	400204b8 	.word	0x400204b8
 8007c94:	4002040f 	.word	0x4002040f
 8007c98:	10008200 	.word	0x10008200
 8007c9c:	40020880 	.word	0x40020880

08007ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d04a      	beq.n	8007d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d847      	bhi.n	8007d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a25      	ldr	r2, [pc, #148]	; (8007d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d022      	beq.n	8007d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a24      	ldr	r2, [pc, #144]	; (8007d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d01d      	beq.n	8007d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a22      	ldr	r2, [pc, #136]	; (8007d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d018      	beq.n	8007d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a21      	ldr	r2, [pc, #132]	; (8007d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d013      	beq.n	8007d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a1f      	ldr	r2, [pc, #124]	; (8007d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00e      	beq.n	8007d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a1e      	ldr	r2, [pc, #120]	; (8007d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d009      	beq.n	8007d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a1c      	ldr	r2, [pc, #112]	; (8007d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d004      	beq.n	8007d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a1b      	ldr	r2, [pc, #108]	; (8007d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d101      	bne.n	8007d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e000      	b.n	8007d12 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007d10:	2300      	movs	r3, #0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00a      	beq.n	8007d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	4b17      	ldr	r3, [pc, #92]	; (8007d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007d1a:	4413      	add	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	461a      	mov	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a15      	ldr	r2, [pc, #84]	; (8007d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007d28:	671a      	str	r2, [r3, #112]	; 0x70
 8007d2a:	e009      	b.n	8007d40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	4b14      	ldr	r3, [pc, #80]	; (8007d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	461a      	mov	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a11      	ldr	r2, [pc, #68]	; (8007d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007d3e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	2201      	movs	r2, #1
 8007d46:	409a      	lsls	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007d4c:	bf00      	nop
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	58025408 	.word	0x58025408
 8007d5c:	5802541c 	.word	0x5802541c
 8007d60:	58025430 	.word	0x58025430
 8007d64:	58025444 	.word	0x58025444
 8007d68:	58025458 	.word	0x58025458
 8007d6c:	5802546c 	.word	0x5802546c
 8007d70:	58025480 	.word	0x58025480
 8007d74:	58025494 	.word	0x58025494
 8007d78:	1600963f 	.word	0x1600963f
 8007d7c:	58025940 	.word	0x58025940
 8007d80:	1000823f 	.word	0x1000823f
 8007d84:	40020940 	.word	0x40020940

08007d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b089      	sub	sp, #36	; 0x24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d96:	4b89      	ldr	r3, [pc, #548]	; (8007fbc <HAL_GPIO_Init+0x234>)
 8007d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d9a:	e194      	b.n	80080c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	2101      	movs	r1, #1
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	fa01 f303 	lsl.w	r3, r1, r3
 8007da8:	4013      	ands	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 8186 	beq.w	80080c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	f003 0303 	and.w	r3, r3, #3
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d005      	beq.n	8007dcc <HAL_GPIO_Init+0x44>
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f003 0303 	and.w	r3, r3, #3
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d130      	bne.n	8007e2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ddc:	43db      	mvns	r3, r3
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	4013      	ands	r3, r2
 8007de2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	fa02 f303 	lsl.w	r3, r2, r3
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	69ba      	ldr	r2, [r7, #24]
 8007dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e02:	2201      	movs	r2, #1
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0a:	43db      	mvns	r3, r3
 8007e0c:	69ba      	ldr	r2, [r7, #24]
 8007e0e:	4013      	ands	r3, r2
 8007e10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	091b      	lsrs	r3, r3, #4
 8007e18:	f003 0201 	and.w	r2, r3, #1
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e22:	69ba      	ldr	r2, [r7, #24]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	69ba      	ldr	r2, [r7, #24]
 8007e2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	2b03      	cmp	r3, #3
 8007e38:	d017      	beq.n	8007e6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e40:	69fb      	ldr	r3, [r7, #28]
 8007e42:	005b      	lsls	r3, r3, #1
 8007e44:	2203      	movs	r2, #3
 8007e46:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4a:	43db      	mvns	r3, r3
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	689a      	ldr	r2, [r3, #8]
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5e:	69ba      	ldr	r2, [r7, #24]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	69ba      	ldr	r2, [r7, #24]
 8007e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f003 0303 	and.w	r3, r3, #3
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d123      	bne.n	8007ebe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	08da      	lsrs	r2, r3, #3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	3208      	adds	r2, #8
 8007e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	f003 0307 	and.w	r3, r3, #7
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	220f      	movs	r2, #15
 8007e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e92:	43db      	mvns	r3, r3
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	4013      	ands	r3, r2
 8007e98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	691a      	ldr	r2, [r3, #16]
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	f003 0307 	and.w	r3, r3, #7
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	08da      	lsrs	r2, r3, #3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	3208      	adds	r2, #8
 8007eb8:	69b9      	ldr	r1, [r7, #24]
 8007eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	005b      	lsls	r3, r3, #1
 8007ec8:	2203      	movs	r2, #3
 8007eca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ece:	43db      	mvns	r3, r3
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f003 0203 	and.w	r2, r3, #3
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 80e0 	beq.w	80080c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f00:	4b2f      	ldr	r3, [pc, #188]	; (8007fc0 <HAL_GPIO_Init+0x238>)
 8007f02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f06:	4a2e      	ldr	r2, [pc, #184]	; (8007fc0 <HAL_GPIO_Init+0x238>)
 8007f08:	f043 0302 	orr.w	r3, r3, #2
 8007f0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007f10:	4b2b      	ldr	r3, [pc, #172]	; (8007fc0 <HAL_GPIO_Init+0x238>)
 8007f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f16:	f003 0302 	and.w	r3, r3, #2
 8007f1a:	60fb      	str	r3, [r7, #12]
 8007f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f1e:	4a29      	ldr	r2, [pc, #164]	; (8007fc4 <HAL_GPIO_Init+0x23c>)
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	089b      	lsrs	r3, r3, #2
 8007f24:	3302      	adds	r3, #2
 8007f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	220f      	movs	r2, #15
 8007f36:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3a:	43db      	mvns	r3, r3
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	4013      	ands	r3, r2
 8007f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a20      	ldr	r2, [pc, #128]	; (8007fc8 <HAL_GPIO_Init+0x240>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d052      	beq.n	8007ff0 <HAL_GPIO_Init+0x268>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a1f      	ldr	r2, [pc, #124]	; (8007fcc <HAL_GPIO_Init+0x244>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d031      	beq.n	8007fb6 <HAL_GPIO_Init+0x22e>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a1e      	ldr	r2, [pc, #120]	; (8007fd0 <HAL_GPIO_Init+0x248>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d02b      	beq.n	8007fb2 <HAL_GPIO_Init+0x22a>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a1d      	ldr	r2, [pc, #116]	; (8007fd4 <HAL_GPIO_Init+0x24c>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d025      	beq.n	8007fae <HAL_GPIO_Init+0x226>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a1c      	ldr	r2, [pc, #112]	; (8007fd8 <HAL_GPIO_Init+0x250>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d01f      	beq.n	8007faa <HAL_GPIO_Init+0x222>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a1b      	ldr	r2, [pc, #108]	; (8007fdc <HAL_GPIO_Init+0x254>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d019      	beq.n	8007fa6 <HAL_GPIO_Init+0x21e>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a1a      	ldr	r2, [pc, #104]	; (8007fe0 <HAL_GPIO_Init+0x258>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d013      	beq.n	8007fa2 <HAL_GPIO_Init+0x21a>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a19      	ldr	r2, [pc, #100]	; (8007fe4 <HAL_GPIO_Init+0x25c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00d      	beq.n	8007f9e <HAL_GPIO_Init+0x216>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a18      	ldr	r2, [pc, #96]	; (8007fe8 <HAL_GPIO_Init+0x260>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d007      	beq.n	8007f9a <HAL_GPIO_Init+0x212>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a17      	ldr	r2, [pc, #92]	; (8007fec <HAL_GPIO_Init+0x264>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d101      	bne.n	8007f96 <HAL_GPIO_Init+0x20e>
 8007f92:	2309      	movs	r3, #9
 8007f94:	e02d      	b.n	8007ff2 <HAL_GPIO_Init+0x26a>
 8007f96:	230a      	movs	r3, #10
 8007f98:	e02b      	b.n	8007ff2 <HAL_GPIO_Init+0x26a>
 8007f9a:	2308      	movs	r3, #8
 8007f9c:	e029      	b.n	8007ff2 <HAL_GPIO_Init+0x26a>
 8007f9e:	2307      	movs	r3, #7
 8007fa0:	e027      	b.n	8007ff2 <HAL_GPIO_Init+0x26a>
 8007fa2:	2306      	movs	r3, #6
 8007fa4:	e025      	b.n	8007ff2 <HAL_GPIO_Init+0x26a>
 8007fa6:	2305      	movs	r3, #5
 8007fa8:	e023      	b.n	8007ff2 <HAL_GPIO_Init+0x26a>
 8007faa:	2304      	movs	r3, #4
 8007fac:	e021      	b.n	8007ff2 <HAL_GPIO_Init+0x26a>
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e01f      	b.n	8007ff2 <HAL_GPIO_Init+0x26a>
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	e01d      	b.n	8007ff2 <HAL_GPIO_Init+0x26a>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e01b      	b.n	8007ff2 <HAL_GPIO_Init+0x26a>
 8007fba:	bf00      	nop
 8007fbc:	58000080 	.word	0x58000080
 8007fc0:	58024400 	.word	0x58024400
 8007fc4:	58000400 	.word	0x58000400
 8007fc8:	58020000 	.word	0x58020000
 8007fcc:	58020400 	.word	0x58020400
 8007fd0:	58020800 	.word	0x58020800
 8007fd4:	58020c00 	.word	0x58020c00
 8007fd8:	58021000 	.word	0x58021000
 8007fdc:	58021400 	.word	0x58021400
 8007fe0:	58021800 	.word	0x58021800
 8007fe4:	58021c00 	.word	0x58021c00
 8007fe8:	58022000 	.word	0x58022000
 8007fec:	58022400 	.word	0x58022400
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	f002 0203 	and.w	r2, r2, #3
 8007ff8:	0092      	lsls	r2, r2, #2
 8007ffa:	4093      	lsls	r3, r2
 8007ffc:	69ba      	ldr	r2, [r7, #24]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008002:	4938      	ldr	r1, [pc, #224]	; (80080e4 <HAL_GPIO_Init+0x35c>)
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	089b      	lsrs	r3, r3, #2
 8008008:	3302      	adds	r3, #2
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	43db      	mvns	r3, r3
 800801c:	69ba      	ldr	r2, [r7, #24]
 800801e:	4013      	ands	r3, r2
 8008020:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d003      	beq.n	8008036 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	4313      	orrs	r3, r2
 8008034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800803e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	43db      	mvns	r3, r3
 800804a:	69ba      	ldr	r2, [r7, #24]
 800804c:	4013      	ands	r3, r2
 800804e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d003      	beq.n	8008064 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	4313      	orrs	r3, r2
 8008062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008068:	69bb      	ldr	r3, [r7, #24]
 800806a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	43db      	mvns	r3, r3
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	4013      	ands	r3, r2
 800807a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d003      	beq.n	8008090 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008088:	69ba      	ldr	r2, [r7, #24]
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	4313      	orrs	r3, r2
 800808e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	43db      	mvns	r3, r3
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	4013      	ands	r3, r2
 80080a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80080b2:	69ba      	ldr	r2, [r7, #24]
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	69ba      	ldr	r2, [r7, #24]
 80080be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	3301      	adds	r3, #1
 80080c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	fa22 f303 	lsr.w	r3, r2, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f47f ae63 	bne.w	8007d9c <HAL_GPIO_Init+0x14>
  }
}
 80080d6:	bf00      	nop
 80080d8:	bf00      	nop
 80080da:	3724      	adds	r7, #36	; 0x24
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	58000400 	.word	0x58000400

080080e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	807b      	strh	r3, [r7, #2]
 80080f4:	4613      	mov	r3, r2
 80080f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080f8:	787b      	ldrb	r3, [r7, #1]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080fe:	887a      	ldrh	r2, [r7, #2]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008104:	e003      	b.n	800810e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008106:	887b      	ldrh	r3, [r7, #2]
 8008108:	041a      	lsls	r2, r3, #16
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	619a      	str	r2, [r3, #24]
}
 800810e:	bf00      	nop
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800811a:	b480      	push	{r7}
 800811c:	b085      	sub	sp, #20
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	460b      	mov	r3, r1
 8008124:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800812c:	887a      	ldrh	r2, [r7, #2]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4013      	ands	r3, r2
 8008132:	041a      	lsls	r2, r3, #16
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	43d9      	mvns	r1, r3
 8008138:	887b      	ldrh	r3, [r7, #2]
 800813a:	400b      	ands	r3, r1
 800813c:	431a      	orrs	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	619a      	str	r2, [r3, #24]
}
 8008142:	bf00      	nop
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800814e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008150:	b08f      	sub	sp, #60	; 0x3c
 8008152:	af0a      	add	r7, sp, #40	; 0x28
 8008154:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e054      	b.n	800820a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d106      	bne.n	8008180 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7fa fff8 	bl	8003170 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2203      	movs	r2, #3
 8008184:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800818c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008190:	2b00      	cmp	r3, #0
 8008192:	d102      	bne.n	800819a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4618      	mov	r0, r3
 80081a0:	f009 f914 	bl	80113cc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	603b      	str	r3, [r7, #0]
 80081aa:	687e      	ldr	r6, [r7, #4]
 80081ac:	466d      	mov	r5, sp
 80081ae:	f106 0410 	add.w	r4, r6, #16
 80081b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80081be:	e885 0003 	stmia.w	r5, {r0, r1}
 80081c2:	1d33      	adds	r3, r6, #4
 80081c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081c6:	6838      	ldr	r0, [r7, #0]
 80081c8:	f009 f892 	bl	80112f0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2101      	movs	r1, #1
 80081d2:	4618      	mov	r0, r3
 80081d4:	f009 f90b 	bl	80113ee <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	603b      	str	r3, [r7, #0]
 80081de:	687e      	ldr	r6, [r7, #4]
 80081e0:	466d      	mov	r5, sp
 80081e2:	f106 0410 	add.w	r4, r6, #16
 80081e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80081ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80081ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80081f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80081f6:	1d33      	adds	r3, r6, #4
 80081f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081fa:	6838      	ldr	r0, [r7, #0]
 80081fc:	f009 f9ea 	bl	80115d4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3714      	adds	r7, #20
 800820e:	46bd      	mov	sp, r7
 8008210:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008214 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e0bf      	b.n	80083a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d106      	bne.n	8008240 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7f8 fcac 	bl	8000b98 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699a      	ldr	r2, [r3, #24]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008256:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6999      	ldr	r1, [r3, #24]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800826c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	430a      	orrs	r2, r1
 800827a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6899      	ldr	r1, [r3, #8]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	4b4a      	ldr	r3, [pc, #296]	; (80083b0 <HAL_LTDC_Init+0x19c>)
 8008288:	400b      	ands	r3, r1
 800828a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	041b      	lsls	r3, r3, #16
 8008292:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6899      	ldr	r1, [r3, #8]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	699a      	ldr	r2, [r3, #24]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68d9      	ldr	r1, [r3, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	4b3e      	ldr	r3, [pc, #248]	; (80083b0 <HAL_LTDC_Init+0x19c>)
 80082b6:	400b      	ands	r3, r1
 80082b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	041b      	lsls	r3, r3, #16
 80082c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68d9      	ldr	r1, [r3, #12]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a1a      	ldr	r2, [r3, #32]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	431a      	orrs	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	430a      	orrs	r2, r1
 80082d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6919      	ldr	r1, [r3, #16]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	4b33      	ldr	r3, [pc, #204]	; (80083b0 <HAL_LTDC_Init+0x19c>)
 80082e4:	400b      	ands	r3, r1
 80082e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	041b      	lsls	r3, r3, #16
 80082ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6919      	ldr	r1, [r3, #16]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	431a      	orrs	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6959      	ldr	r1, [r3, #20]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	4b27      	ldr	r3, [pc, #156]	; (80083b0 <HAL_LTDC_Init+0x19c>)
 8008312:	400b      	ands	r3, r1
 8008314:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831a:	041b      	lsls	r3, r3, #16
 800831c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	6959      	ldr	r1, [r3, #20]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	431a      	orrs	r2, r3
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	430a      	orrs	r2, r1
 8008332:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800833a:	021b      	lsls	r3, r3, #8
 800833c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008344:	041b      	lsls	r3, r3, #16
 8008346:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008356:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4313      	orrs	r3, r2
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	430a      	orrs	r2, r1
 8008372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f042 0206 	orr.w	r2, r2, #6
 8008382:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0201 	orr.w	r2, r2, #1
 8008392:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	f000f800 	.word	0xf000f800

080083b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80083b4:	b5b0      	push	{r4, r5, r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d101      	bne.n	80083ce <HAL_LTDC_ConfigLayer+0x1a>
 80083ca:	2302      	movs	r3, #2
 80083cc:	e02c      	b.n	8008428 <HAL_LTDC_ConfigLayer+0x74>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2202      	movs	r2, #2
 80083da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2134      	movs	r1, #52	; 0x34
 80083e4:	fb01 f303 	mul.w	r3, r1, r3
 80083e8:	4413      	add	r3, r2
 80083ea:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	4614      	mov	r4, r2
 80083f2:	461d      	mov	r5, r3
 80083f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008400:	682b      	ldr	r3, [r5, #0]
 8008402:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	68b9      	ldr	r1, [r7, #8]
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f811 	bl	8008430 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2201      	movs	r2, #1
 8008414:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bdb0      	pop	{r4, r5, r7, pc}

08008430 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008430:	b480      	push	{r7}
 8008432:	b089      	sub	sp, #36	; 0x24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	0c1b      	lsrs	r3, r3, #16
 8008448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800844c:	4413      	add	r3, r2
 800844e:	041b      	lsls	r3, r3, #16
 8008450:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	01db      	lsls	r3, r3, #7
 800845c:	4413      	add	r3, r2
 800845e:	3384      	adds	r3, #132	; 0x84
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	6812      	ldr	r2, [r2, #0]
 8008466:	4611      	mov	r1, r2
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	01d2      	lsls	r2, r2, #7
 800846c:	440a      	add	r2, r1
 800846e:	3284      	adds	r2, #132	; 0x84
 8008470:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008474:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	0c1b      	lsrs	r3, r3, #16
 8008482:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008486:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008488:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4619      	mov	r1, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	01db      	lsls	r3, r3, #7
 8008494:	440b      	add	r3, r1
 8008496:	3384      	adds	r3, #132	; 0x84
 8008498:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800849e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	68da      	ldr	r2, [r3, #12]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084ae:	4413      	add	r3, r2
 80084b0:	041b      	lsls	r3, r3, #16
 80084b2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	461a      	mov	r2, r3
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	01db      	lsls	r3, r3, #7
 80084be:	4413      	add	r3, r2
 80084c0:	3384      	adds	r3, #132	; 0x84
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	6812      	ldr	r2, [r2, #0]
 80084c8:	4611      	mov	r1, r2
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	01d2      	lsls	r2, r2, #7
 80084ce:	440a      	add	r2, r1
 80084d0:	3284      	adds	r2, #132	; 0x84
 80084d2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80084d6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084e6:	4413      	add	r3, r2
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4619      	mov	r1, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	01db      	lsls	r3, r3, #7
 80084f4:	440b      	add	r3, r1
 80084f6:	3384      	adds	r3, #132	; 0x84
 80084f8:	4619      	mov	r1, r3
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	461a      	mov	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	01db      	lsls	r3, r3, #7
 800850a:	4413      	add	r3, r2
 800850c:	3384      	adds	r3, #132	; 0x84
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	6812      	ldr	r2, [r2, #0]
 8008514:	4611      	mov	r1, r2
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	01d2      	lsls	r2, r2, #7
 800851a:	440a      	add	r2, r1
 800851c:	3284      	adds	r2, #132	; 0x84
 800851e:	f023 0307 	bic.w	r3, r3, #7
 8008522:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	461a      	mov	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	01db      	lsls	r3, r3, #7
 800852e:	4413      	add	r3, r2
 8008530:	3384      	adds	r3, #132	; 0x84
 8008532:	461a      	mov	r2, r3
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008540:	021b      	lsls	r3, r3, #8
 8008542:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800854a:	041b      	lsls	r3, r3, #16
 800854c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	061b      	lsls	r3, r3, #24
 8008554:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	01db      	lsls	r3, r3, #7
 8008560:	4413      	add	r3, r2
 8008562:	3384      	adds	r3, #132	; 0x84
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	01db      	lsls	r3, r3, #7
 8008570:	4413      	add	r3, r2
 8008572:	3384      	adds	r3, #132	; 0x84
 8008574:	461a      	mov	r2, r3
 8008576:	2300      	movs	r3, #0
 8008578:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008580:	461a      	mov	r2, r3
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	431a      	orrs	r2, r3
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	431a      	orrs	r2, r3
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4619      	mov	r1, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	01db      	lsls	r3, r3, #7
 8008594:	440b      	add	r3, r1
 8008596:	3384      	adds	r3, #132	; 0x84
 8008598:	4619      	mov	r1, r3
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	4313      	orrs	r3, r2
 800859e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	461a      	mov	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	01db      	lsls	r3, r3, #7
 80085aa:	4413      	add	r3, r2
 80085ac:	3384      	adds	r3, #132	; 0x84
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	6812      	ldr	r2, [r2, #0]
 80085b4:	4611      	mov	r1, r2
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	01d2      	lsls	r2, r2, #7
 80085ba:	440a      	add	r2, r1
 80085bc:	3284      	adds	r2, #132	; 0x84
 80085be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80085c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	461a      	mov	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	01db      	lsls	r3, r3, #7
 80085ce:	4413      	add	r3, r2
 80085d0:	3384      	adds	r3, #132	; 0x84
 80085d2:	461a      	mov	r2, r3
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	01db      	lsls	r3, r3, #7
 80085e4:	4413      	add	r3, r2
 80085e6:	3384      	adds	r3, #132	; 0x84
 80085e8:	69da      	ldr	r2, [r3, #28]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	4619      	mov	r1, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	01db      	lsls	r3, r3, #7
 80085f4:	440b      	add	r3, r1
 80085f6:	3384      	adds	r3, #132	; 0x84
 80085f8:	4619      	mov	r1, r3
 80085fa:	4b58      	ldr	r3, [pc, #352]	; (800875c <LTDC_SetConfig+0x32c>)
 80085fc:	4013      	ands	r3, r2
 80085fe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	69da      	ldr	r2, [r3, #28]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	6a1b      	ldr	r3, [r3, #32]
 8008608:	68f9      	ldr	r1, [r7, #12]
 800860a:	6809      	ldr	r1, [r1, #0]
 800860c:	4608      	mov	r0, r1
 800860e:	6879      	ldr	r1, [r7, #4]
 8008610:	01c9      	lsls	r1, r1, #7
 8008612:	4401      	add	r1, r0
 8008614:	3184      	adds	r1, #132	; 0x84
 8008616:	4313      	orrs	r3, r2
 8008618:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	461a      	mov	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	01db      	lsls	r3, r3, #7
 8008624:	4413      	add	r3, r2
 8008626:	3384      	adds	r3, #132	; 0x84
 8008628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	01db      	lsls	r3, r3, #7
 8008634:	4413      	add	r3, r2
 8008636:	3384      	adds	r3, #132	; 0x84
 8008638:	461a      	mov	r2, r3
 800863a:	2300      	movs	r3, #0
 800863c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	01db      	lsls	r3, r3, #7
 8008648:	4413      	add	r3, r2
 800864a:	3384      	adds	r3, #132	; 0x84
 800864c:	461a      	mov	r2, r3
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008652:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	691b      	ldr	r3, [r3, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d102      	bne.n	8008662 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800865c:	2304      	movs	r3, #4
 800865e:	61fb      	str	r3, [r7, #28]
 8008660:	e01b      	b.n	800869a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	2b01      	cmp	r3, #1
 8008668:	d102      	bne.n	8008670 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800866a:	2303      	movs	r3, #3
 800866c:	61fb      	str	r3, [r7, #28]
 800866e:	e014      	b.n	800869a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	2b04      	cmp	r3, #4
 8008676:	d00b      	beq.n	8008690 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800867c:	2b02      	cmp	r3, #2
 800867e:	d007      	beq.n	8008690 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008684:	2b03      	cmp	r3, #3
 8008686:	d003      	beq.n	8008690 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800868c:	2b07      	cmp	r3, #7
 800868e:	d102      	bne.n	8008696 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008690:	2302      	movs	r3, #2
 8008692:	61fb      	str	r3, [r7, #28]
 8008694:	e001      	b.n	800869a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008696:	2301      	movs	r3, #1
 8008698:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	01db      	lsls	r3, r3, #7
 80086a4:	4413      	add	r3, r2
 80086a6:	3384      	adds	r3, #132	; 0x84
 80086a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086aa:	68fa      	ldr	r2, [r7, #12]
 80086ac:	6812      	ldr	r2, [r2, #0]
 80086ae:	4611      	mov	r1, r2
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	01d2      	lsls	r2, r2, #7
 80086b4:	440a      	add	r2, r1
 80086b6:	3284      	adds	r2, #132	; 0x84
 80086b8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80086bc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c2:	69fa      	ldr	r2, [r7, #28]
 80086c4:	fb02 f303 	mul.w	r3, r2, r3
 80086c8:	041a      	lsls	r2, r3, #16
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	6859      	ldr	r1, [r3, #4]
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	1acb      	subs	r3, r1, r3
 80086d4:	69f9      	ldr	r1, [r7, #28]
 80086d6:	fb01 f303 	mul.w	r3, r1, r3
 80086da:	3307      	adds	r3, #7
 80086dc:	68f9      	ldr	r1, [r7, #12]
 80086de:	6809      	ldr	r1, [r1, #0]
 80086e0:	4608      	mov	r0, r1
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	01c9      	lsls	r1, r1, #7
 80086e6:	4401      	add	r1, r0
 80086e8:	3184      	adds	r1, #132	; 0x84
 80086ea:	4313      	orrs	r3, r2
 80086ec:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	461a      	mov	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	01db      	lsls	r3, r3, #7
 80086f8:	4413      	add	r3, r2
 80086fa:	3384      	adds	r3, #132	; 0x84
 80086fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4619      	mov	r1, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	01db      	lsls	r3, r3, #7
 8008708:	440b      	add	r3, r1
 800870a:	3384      	adds	r3, #132	; 0x84
 800870c:	4619      	mov	r1, r3
 800870e:	4b14      	ldr	r3, [pc, #80]	; (8008760 <LTDC_SetConfig+0x330>)
 8008710:	4013      	ands	r3, r2
 8008712:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	01db      	lsls	r3, r3, #7
 800871e:	4413      	add	r3, r2
 8008720:	3384      	adds	r3, #132	; 0x84
 8008722:	461a      	mov	r2, r3
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	01db      	lsls	r3, r3, #7
 8008734:	4413      	add	r3, r2
 8008736:	3384      	adds	r3, #132	; 0x84
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	6812      	ldr	r2, [r2, #0]
 800873e:	4611      	mov	r1, r2
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	01d2      	lsls	r2, r2, #7
 8008744:	440a      	add	r2, r1
 8008746:	3284      	adds	r2, #132	; 0x84
 8008748:	f043 0301 	orr.w	r3, r3, #1
 800874c:	6013      	str	r3, [r2, #0]
}
 800874e:	bf00      	nop
 8008750:	3724      	adds	r7, #36	; 0x24
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	fffff8f8 	.word	0xfffff8f8
 8008760:	fffff800 	.word	0xfffff800

08008764 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800876c:	4b19      	ldr	r3, [pc, #100]	; (80087d4 <HAL_PWREx_ConfigSupply+0x70>)
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f003 0304 	and.w	r3, r3, #4
 8008774:	2b04      	cmp	r3, #4
 8008776:	d00a      	beq.n	800878e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008778:	4b16      	ldr	r3, [pc, #88]	; (80087d4 <HAL_PWREx_ConfigSupply+0x70>)
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f003 0307 	and.w	r3, r3, #7
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	429a      	cmp	r2, r3
 8008784:	d001      	beq.n	800878a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e01f      	b.n	80087ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	e01d      	b.n	80087ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800878e:	4b11      	ldr	r3, [pc, #68]	; (80087d4 <HAL_PWREx_ConfigSupply+0x70>)
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	f023 0207 	bic.w	r2, r3, #7
 8008796:	490f      	ldr	r1, [pc, #60]	; (80087d4 <HAL_PWREx_ConfigSupply+0x70>)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4313      	orrs	r3, r2
 800879c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800879e:	f7fa fde3 	bl	8003368 <HAL_GetTick>
 80087a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087a4:	e009      	b.n	80087ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80087a6:	f7fa fddf 	bl	8003368 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087b4:	d901      	bls.n	80087ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e007      	b.n	80087ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087ba:	4b06      	ldr	r3, [pc, #24]	; (80087d4 <HAL_PWREx_ConfigSupply+0x70>)
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087c6:	d1ee      	bne.n	80087a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3710      	adds	r7, #16
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	58024800 	.word	0x58024800

080087d8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80087d8:	b480      	push	{r7}
 80087da:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80087dc:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	4a04      	ldr	r2, [pc, #16]	; (80087f4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80087e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087e6:	60d3      	str	r3, [r2, #12]
}
 80087e8:	bf00      	nop
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	58024800 	.word	0x58024800

080087f8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8008800:	f7fa fdb2 	bl	8003368 <HAL_GetTick>
 8008804:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e05f      	b.n	80088d0 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008816:	b2db      	uxtb	r3, r3
 8008818:	2b00      	cmp	r3, #0
 800881a:	d107      	bne.n	800882c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f7f9 fdcf 	bl	80023c0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8008822:	f241 3188 	movw	r1, #5000	; 0x1388
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f85a 	bl	80088e0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	3b01      	subs	r3, #1
 800883c:	021a      	lsls	r2, r3, #8
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	430a      	orrs	r2, r1
 8008844:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	2120      	movs	r1, #32
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f852 	bl	80088fc <QSPI_WaitFlagStateUntilTimeout>
 8008858:	4603      	mov	r3, r0
 800885a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800885c:	7afb      	ldrb	r3, [r7, #11]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d135      	bne.n	80088ce <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	4b1b      	ldr	r3, [pc, #108]	; (80088d8 <HAL_QSPI_Init+0xe0>)
 800886a:	4013      	ands	r3, r2
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	6852      	ldr	r2, [r2, #4]
 8008870:	0611      	lsls	r1, r2, #24
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	68d2      	ldr	r2, [r2, #12]
 8008876:	4311      	orrs	r1, r2
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	69d2      	ldr	r2, [r2, #28]
 800887c:	4311      	orrs	r1, r2
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6a12      	ldr	r2, [r2, #32]
 8008882:	4311      	orrs	r1, r2
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	6812      	ldr	r2, [r2, #0]
 8008888:	430b      	orrs	r3, r1
 800888a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	4b12      	ldr	r3, [pc, #72]	; (80088dc <HAL_QSPI_Init+0xe4>)
 8008894:	4013      	ands	r3, r2
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6912      	ldr	r2, [r2, #16]
 800889a:	0411      	lsls	r1, r2, #16
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	6952      	ldr	r2, [r2, #20]
 80088a0:	4311      	orrs	r1, r2
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	6992      	ldr	r2, [r2, #24]
 80088a6:	4311      	orrs	r1, r2
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	6812      	ldr	r2, [r2, #0]
 80088ac:	430b      	orrs	r3, r1
 80088ae:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f042 0201 	orr.w	r2, r2, #1
 80088be:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80088ce:	7afb      	ldrb	r3, [r7, #11]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	00ffff2f 	.word	0x00ffff2f
 80088dc:	ffe0f8fe 	.word	0xffe0f8fe

080088e0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	649a      	str	r2, [r3, #72]	; 0x48
}
 80088f0:	bf00      	nop
 80088f2:	370c      	adds	r7, #12
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	603b      	str	r3, [r7, #0]
 8008908:	4613      	mov	r3, r2
 800890a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800890c:	e01a      	b.n	8008944 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008914:	d016      	beq.n	8008944 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008916:	f7fa fd27 	bl	8003368 <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	429a      	cmp	r2, r3
 8008924:	d302      	bcc.n	800892c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d10b      	bne.n	8008944 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2204      	movs	r2, #4
 8008930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008938:	f043 0201 	orr.w	r2, r3, #1
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	e00e      	b.n	8008962 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689a      	ldr	r2, [r3, #8]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	4013      	ands	r3, r2
 800894e:	2b00      	cmp	r3, #0
 8008950:	bf14      	ite	ne
 8008952:	2301      	movne	r3, #1
 8008954:	2300      	moveq	r3, #0
 8008956:	b2db      	uxtb	r3, r3
 8008958:	461a      	mov	r2, r3
 800895a:	79fb      	ldrb	r3, [r7, #7]
 800895c:	429a      	cmp	r2, r3
 800895e:	d1d6      	bne.n	800890e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b08c      	sub	sp, #48	; 0x30
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d102      	bne.n	8008980 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	f000 bc1d 	b.w	80091ba <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 8087 	beq.w	8008a9c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800898e:	4b99      	ldr	r3, [pc, #612]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008996:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008998:	4b96      	ldr	r3, [pc, #600]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 800899a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800899e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a0:	2b10      	cmp	r3, #16
 80089a2:	d007      	beq.n	80089b4 <HAL_RCC_OscConfig+0x48>
 80089a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a6:	2b18      	cmp	r3, #24
 80089a8:	d110      	bne.n	80089cc <HAL_RCC_OscConfig+0x60>
 80089aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ac:	f003 0303 	and.w	r3, r3, #3
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d10b      	bne.n	80089cc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089b4:	4b8f      	ldr	r3, [pc, #572]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d06c      	beq.n	8008a9a <HAL_RCC_OscConfig+0x12e>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d168      	bne.n	8008a9a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e3f6      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089d4:	d106      	bne.n	80089e4 <HAL_RCC_OscConfig+0x78>
 80089d6:	4b87      	ldr	r3, [pc, #540]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a86      	ldr	r2, [pc, #536]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 80089dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089e0:	6013      	str	r3, [r2, #0]
 80089e2:	e02e      	b.n	8008a42 <HAL_RCC_OscConfig+0xd6>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10c      	bne.n	8008a06 <HAL_RCC_OscConfig+0x9a>
 80089ec:	4b81      	ldr	r3, [pc, #516]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a80      	ldr	r2, [pc, #512]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 80089f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089f6:	6013      	str	r3, [r2, #0]
 80089f8:	4b7e      	ldr	r3, [pc, #504]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a7d      	ldr	r2, [pc, #500]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 80089fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a02:	6013      	str	r3, [r2, #0]
 8008a04:	e01d      	b.n	8008a42 <HAL_RCC_OscConfig+0xd6>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a0e:	d10c      	bne.n	8008a2a <HAL_RCC_OscConfig+0xbe>
 8008a10:	4b78      	ldr	r3, [pc, #480]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a77      	ldr	r2, [pc, #476]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008a16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	4b75      	ldr	r3, [pc, #468]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a74      	ldr	r2, [pc, #464]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	e00b      	b.n	8008a42 <HAL_RCC_OscConfig+0xd6>
 8008a2a:	4b72      	ldr	r3, [pc, #456]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a71      	ldr	r2, [pc, #452]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a34:	6013      	str	r3, [r2, #0]
 8008a36:	4b6f      	ldr	r3, [pc, #444]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a6e      	ldr	r2, [pc, #440]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d013      	beq.n	8008a72 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a4a:	f7fa fc8d 	bl	8003368 <HAL_GetTick>
 8008a4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a50:	e008      	b.n	8008a64 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a52:	f7fa fc89 	bl	8003368 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b64      	cmp	r3, #100	; 0x64
 8008a5e:	d901      	bls.n	8008a64 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e3aa      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008a64:	4b63      	ldr	r3, [pc, #396]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0f0      	beq.n	8008a52 <HAL_RCC_OscConfig+0xe6>
 8008a70:	e014      	b.n	8008a9c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a72:	f7fa fc79 	bl	8003368 <HAL_GetTick>
 8008a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008a78:	e008      	b.n	8008a8c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a7a:	f7fa fc75 	bl	8003368 <HAL_GetTick>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a82:	1ad3      	subs	r3, r2, r3
 8008a84:	2b64      	cmp	r3, #100	; 0x64
 8008a86:	d901      	bls.n	8008a8c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e396      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008a8c:	4b59      	ldr	r3, [pc, #356]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d1f0      	bne.n	8008a7a <HAL_RCC_OscConfig+0x10e>
 8008a98:	e000      	b.n	8008a9c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a9a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0302 	and.w	r3, r3, #2
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 80cb 	beq.w	8008c40 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008aaa:	4b52      	ldr	r3, [pc, #328]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ab2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ab4:	4b4f      	ldr	r3, [pc, #316]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d007      	beq.n	8008ad0 <HAL_RCC_OscConfig+0x164>
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	2b18      	cmp	r3, #24
 8008ac4:	d156      	bne.n	8008b74 <HAL_RCC_OscConfig+0x208>
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	f003 0303 	and.w	r3, r3, #3
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d151      	bne.n	8008b74 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ad0:	4b48      	ldr	r3, [pc, #288]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0304 	and.w	r3, r3, #4
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d005      	beq.n	8008ae8 <HAL_RCC_OscConfig+0x17c>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d101      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e368      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ae8:	4b42      	ldr	r3, [pc, #264]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f023 0219 	bic.w	r2, r3, #25
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	493f      	ldr	r1, [pc, #252]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008af6:	4313      	orrs	r3, r2
 8008af8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008afa:	f7fa fc35 	bl	8003368 <HAL_GetTick>
 8008afe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b00:	e008      	b.n	8008b14 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b02:	f7fa fc31 	bl	8003368 <HAL_GetTick>
 8008b06:	4602      	mov	r2, r0
 8008b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	2b02      	cmp	r3, #2
 8008b0e:	d901      	bls.n	8008b14 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e352      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b14:	4b37      	ldr	r3, [pc, #220]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d0f0      	beq.n	8008b02 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b20:	f7fa fc52 	bl	80033c8 <HAL_GetREVID>
 8008b24:	4603      	mov	r3, r0
 8008b26:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d817      	bhi.n	8008b5e <HAL_RCC_OscConfig+0x1f2>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	2b40      	cmp	r3, #64	; 0x40
 8008b34:	d108      	bne.n	8008b48 <HAL_RCC_OscConfig+0x1dc>
 8008b36:	4b2f      	ldr	r3, [pc, #188]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008b3e:	4a2d      	ldr	r2, [pc, #180]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b44:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b46:	e07b      	b.n	8008c40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b48:	4b2a      	ldr	r3, [pc, #168]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	031b      	lsls	r3, r3, #12
 8008b56:	4927      	ldr	r1, [pc, #156]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b5c:	e070      	b.n	8008c40 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b5e:	4b25      	ldr	r3, [pc, #148]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	061b      	lsls	r3, r3, #24
 8008b6c:	4921      	ldr	r1, [pc, #132]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b72:	e065      	b.n	8008c40 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d048      	beq.n	8008c0e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008b7c:	4b1d      	ldr	r3, [pc, #116]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f023 0219 	bic.w	r2, r3, #25
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	491a      	ldr	r1, [pc, #104]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b8e:	f7fa fbeb 	bl	8003368 <HAL_GetTick>
 8008b92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b94:	e008      	b.n	8008ba8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b96:	f7fa fbe7 	bl	8003368 <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d901      	bls.n	8008ba8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e308      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ba8:	4b12      	ldr	r3, [pc, #72]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0304 	and.w	r3, r3, #4
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d0f0      	beq.n	8008b96 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bb4:	f7fa fc08 	bl	80033c8 <HAL_GetREVID>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	f241 0203 	movw	r2, #4099	; 0x1003
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d81a      	bhi.n	8008bf8 <HAL_RCC_OscConfig+0x28c>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	2b40      	cmp	r3, #64	; 0x40
 8008bc8:	d108      	bne.n	8008bdc <HAL_RCC_OscConfig+0x270>
 8008bca:	4b0a      	ldr	r3, [pc, #40]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008bd2:	4a08      	ldr	r2, [pc, #32]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bd8:	6053      	str	r3, [r2, #4]
 8008bda:	e031      	b.n	8008c40 <HAL_RCC_OscConfig+0x2d4>
 8008bdc:	4b05      	ldr	r3, [pc, #20]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	031b      	lsls	r3, r3, #12
 8008bea:	4902      	ldr	r1, [pc, #8]	; (8008bf4 <HAL_RCC_OscConfig+0x288>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	604b      	str	r3, [r1, #4]
 8008bf0:	e026      	b.n	8008c40 <HAL_RCC_OscConfig+0x2d4>
 8008bf2:	bf00      	nop
 8008bf4:	58024400 	.word	0x58024400
 8008bf8:	4b9a      	ldr	r3, [pc, #616]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	061b      	lsls	r3, r3, #24
 8008c06:	4997      	ldr	r1, [pc, #604]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	604b      	str	r3, [r1, #4]
 8008c0c:	e018      	b.n	8008c40 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c0e:	4b95      	ldr	r3, [pc, #596]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a94      	ldr	r2, [pc, #592]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008c14:	f023 0301 	bic.w	r3, r3, #1
 8008c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c1a:	f7fa fba5 	bl	8003368 <HAL_GetTick>
 8008c1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008c20:	e008      	b.n	8008c34 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c22:	f7fa fba1 	bl	8003368 <HAL_GetTick>
 8008c26:	4602      	mov	r2, r0
 8008c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2a:	1ad3      	subs	r3, r2, r3
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	d901      	bls.n	8008c34 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008c30:	2303      	movs	r3, #3
 8008c32:	e2c2      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008c34:	4b8b      	ldr	r3, [pc, #556]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0304 	and.w	r3, r3, #4
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1f0      	bne.n	8008c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0310 	and.w	r3, r3, #16
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 80a9 	beq.w	8008da0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c4e:	4b85      	ldr	r3, [pc, #532]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c56:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c58:	4b82      	ldr	r3, [pc, #520]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	d007      	beq.n	8008c74 <HAL_RCC_OscConfig+0x308>
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	2b18      	cmp	r3, #24
 8008c68:	d13a      	bne.n	8008ce0 <HAL_RCC_OscConfig+0x374>
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	f003 0303 	and.w	r3, r3, #3
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d135      	bne.n	8008ce0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008c74:	4b7b      	ldr	r3, [pc, #492]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d005      	beq.n	8008c8c <HAL_RCC_OscConfig+0x320>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	2b80      	cmp	r3, #128	; 0x80
 8008c86:	d001      	beq.n	8008c8c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e296      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008c8c:	f7fa fb9c 	bl	80033c8 <HAL_GetREVID>
 8008c90:	4603      	mov	r3, r0
 8008c92:	f241 0203 	movw	r2, #4099	; 0x1003
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d817      	bhi.n	8008cca <HAL_RCC_OscConfig+0x35e>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	2b20      	cmp	r3, #32
 8008ca0:	d108      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x348>
 8008ca2:	4b70      	ldr	r3, [pc, #448]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008caa:	4a6e      	ldr	r2, [pc, #440]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008cac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cb0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008cb2:	e075      	b.n	8008da0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008cb4:	4b6b      	ldr	r3, [pc, #428]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a1b      	ldr	r3, [r3, #32]
 8008cc0:	069b      	lsls	r3, r3, #26
 8008cc2:	4968      	ldr	r1, [pc, #416]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008cc8:	e06a      	b.n	8008da0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008cca:	4b66      	ldr	r3, [pc, #408]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	061b      	lsls	r3, r3, #24
 8008cd8:	4962      	ldr	r1, [pc, #392]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008cde:	e05f      	b.n	8008da0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d042      	beq.n	8008d6e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008ce8:	4b5e      	ldr	r3, [pc, #376]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a5d      	ldr	r2, [pc, #372]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf4:	f7fa fb38 	bl	8003368 <HAL_GetTick>
 8008cf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008cfa:	e008      	b.n	8008d0e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008cfc:	f7fa fb34 	bl	8003368 <HAL_GetTick>
 8008d00:	4602      	mov	r2, r0
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d901      	bls.n	8008d0e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	e255      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d0e:	4b55      	ldr	r3, [pc, #340]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0f0      	beq.n	8008cfc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d1a:	f7fa fb55 	bl	80033c8 <HAL_GetREVID>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	f241 0203 	movw	r2, #4099	; 0x1003
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d817      	bhi.n	8008d58 <HAL_RCC_OscConfig+0x3ec>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a1b      	ldr	r3, [r3, #32]
 8008d2c:	2b20      	cmp	r3, #32
 8008d2e:	d108      	bne.n	8008d42 <HAL_RCC_OscConfig+0x3d6>
 8008d30:	4b4c      	ldr	r3, [pc, #304]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008d38:	4a4a      	ldr	r2, [pc, #296]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008d3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d3e:	6053      	str	r3, [r2, #4]
 8008d40:	e02e      	b.n	8008da0 <HAL_RCC_OscConfig+0x434>
 8008d42:	4b48      	ldr	r3, [pc, #288]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	069b      	lsls	r3, r3, #26
 8008d50:	4944      	ldr	r1, [pc, #272]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	604b      	str	r3, [r1, #4]
 8008d56:	e023      	b.n	8008da0 <HAL_RCC_OscConfig+0x434>
 8008d58:	4b42      	ldr	r3, [pc, #264]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a1b      	ldr	r3, [r3, #32]
 8008d64:	061b      	lsls	r3, r3, #24
 8008d66:	493f      	ldr	r1, [pc, #252]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	60cb      	str	r3, [r1, #12]
 8008d6c:	e018      	b.n	8008da0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008d6e:	4b3d      	ldr	r3, [pc, #244]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a3c      	ldr	r2, [pc, #240]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d7a:	f7fa faf5 	bl	8003368 <HAL_GetTick>
 8008d7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008d80:	e008      	b.n	8008d94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008d82:	f7fa faf1 	bl	8003368 <HAL_GetTick>
 8008d86:	4602      	mov	r2, r0
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d901      	bls.n	8008d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e212      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008d94:	4b33      	ldr	r3, [pc, #204]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1f0      	bne.n	8008d82 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0308 	and.w	r3, r3, #8
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d036      	beq.n	8008e1a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d019      	beq.n	8008de8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008db4:	4b2b      	ldr	r3, [pc, #172]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008db8:	4a2a      	ldr	r2, [pc, #168]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008dba:	f043 0301 	orr.w	r3, r3, #1
 8008dbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dc0:	f7fa fad2 	bl	8003368 <HAL_GetTick>
 8008dc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008dc6:	e008      	b.n	8008dda <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008dc8:	f7fa face 	bl	8003368 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d901      	bls.n	8008dda <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	e1ef      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008dda:	4b22      	ldr	r3, [pc, #136]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dde:	f003 0302 	and.w	r3, r3, #2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d0f0      	beq.n	8008dc8 <HAL_RCC_OscConfig+0x45c>
 8008de6:	e018      	b.n	8008e1a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008de8:	4b1e      	ldr	r3, [pc, #120]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dec:	4a1d      	ldr	r2, [pc, #116]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008dee:	f023 0301 	bic.w	r3, r3, #1
 8008df2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008df4:	f7fa fab8 	bl	8003368 <HAL_GetTick>
 8008df8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008dfa:	e008      	b.n	8008e0e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008dfc:	f7fa fab4 	bl	8003368 <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d901      	bls.n	8008e0e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e1d5      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e0e:	4b15      	ldr	r3, [pc, #84]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e12:	f003 0302 	and.w	r3, r3, #2
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1f0      	bne.n	8008dfc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 0320 	and.w	r3, r3, #32
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d039      	beq.n	8008e9a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d01c      	beq.n	8008e68 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a0c      	ldr	r2, [pc, #48]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008e3a:	f7fa fa95 	bl	8003368 <HAL_GetTick>
 8008e3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008e40:	e008      	b.n	8008e54 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008e42:	f7fa fa91 	bl	8003368 <HAL_GetTick>
 8008e46:	4602      	mov	r2, r0
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	2b02      	cmp	r3, #2
 8008e4e:	d901      	bls.n	8008e54 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e1b2      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008e54:	4b03      	ldr	r3, [pc, #12]	; (8008e64 <HAL_RCC_OscConfig+0x4f8>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d0f0      	beq.n	8008e42 <HAL_RCC_OscConfig+0x4d6>
 8008e60:	e01b      	b.n	8008e9a <HAL_RCC_OscConfig+0x52e>
 8008e62:	bf00      	nop
 8008e64:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e68:	4b9b      	ldr	r3, [pc, #620]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a9a      	ldr	r2, [pc, #616]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008e6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008e74:	f7fa fa78 	bl	8003368 <HAL_GetTick>
 8008e78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008e7a:	e008      	b.n	8008e8e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008e7c:	f7fa fa74 	bl	8003368 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d901      	bls.n	8008e8e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e195      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008e8e:	4b92      	ldr	r3, [pc, #584]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1f0      	bne.n	8008e7c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0304 	and.w	r3, r3, #4
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 8081 	beq.w	8008faa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008ea8:	4b8c      	ldr	r3, [pc, #560]	; (80090dc <HAL_RCC_OscConfig+0x770>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a8b      	ldr	r2, [pc, #556]	; (80090dc <HAL_RCC_OscConfig+0x770>)
 8008eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008eb4:	f7fa fa58 	bl	8003368 <HAL_GetTick>
 8008eb8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008eba:	e008      	b.n	8008ece <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008ebc:	f7fa fa54 	bl	8003368 <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	2b64      	cmp	r3, #100	; 0x64
 8008ec8:	d901      	bls.n	8008ece <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	e175      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ece:	4b83      	ldr	r3, [pc, #524]	; (80090dc <HAL_RCC_OscConfig+0x770>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d0f0      	beq.n	8008ebc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d106      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x584>
 8008ee2:	4b7d      	ldr	r3, [pc, #500]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee6:	4a7c      	ldr	r2, [pc, #496]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008ee8:	f043 0301 	orr.w	r3, r3, #1
 8008eec:	6713      	str	r3, [r2, #112]	; 0x70
 8008eee:	e02d      	b.n	8008f4c <HAL_RCC_OscConfig+0x5e0>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10c      	bne.n	8008f12 <HAL_RCC_OscConfig+0x5a6>
 8008ef8:	4b77      	ldr	r3, [pc, #476]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efc:	4a76      	ldr	r2, [pc, #472]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008efe:	f023 0301 	bic.w	r3, r3, #1
 8008f02:	6713      	str	r3, [r2, #112]	; 0x70
 8008f04:	4b74      	ldr	r3, [pc, #464]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f08:	4a73      	ldr	r2, [pc, #460]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008f0a:	f023 0304 	bic.w	r3, r3, #4
 8008f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8008f10:	e01c      	b.n	8008f4c <HAL_RCC_OscConfig+0x5e0>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	2b05      	cmp	r3, #5
 8008f18:	d10c      	bne.n	8008f34 <HAL_RCC_OscConfig+0x5c8>
 8008f1a:	4b6f      	ldr	r3, [pc, #444]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f1e:	4a6e      	ldr	r2, [pc, #440]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008f20:	f043 0304 	orr.w	r3, r3, #4
 8008f24:	6713      	str	r3, [r2, #112]	; 0x70
 8008f26:	4b6c      	ldr	r3, [pc, #432]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f2a:	4a6b      	ldr	r2, [pc, #428]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008f2c:	f043 0301 	orr.w	r3, r3, #1
 8008f30:	6713      	str	r3, [r2, #112]	; 0x70
 8008f32:	e00b      	b.n	8008f4c <HAL_RCC_OscConfig+0x5e0>
 8008f34:	4b68      	ldr	r3, [pc, #416]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f38:	4a67      	ldr	r2, [pc, #412]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008f3a:	f023 0301 	bic.w	r3, r3, #1
 8008f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8008f40:	4b65      	ldr	r3, [pc, #404]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f44:	4a64      	ldr	r2, [pc, #400]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008f46:	f023 0304 	bic.w	r3, r3, #4
 8008f4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d015      	beq.n	8008f80 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f54:	f7fa fa08 	bl	8003368 <HAL_GetTick>
 8008f58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f5a:	e00a      	b.n	8008f72 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f5c:	f7fa fa04 	bl	8003368 <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d901      	bls.n	8008f72 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e123      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f72:	4b59      	ldr	r3, [pc, #356]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f76:	f003 0302 	and.w	r3, r3, #2
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d0ee      	beq.n	8008f5c <HAL_RCC_OscConfig+0x5f0>
 8008f7e:	e014      	b.n	8008faa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f80:	f7fa f9f2 	bl	8003368 <HAL_GetTick>
 8008f84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008f86:	e00a      	b.n	8008f9e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f88:	f7fa f9ee 	bl	8003368 <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d901      	bls.n	8008f9e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e10d      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008f9e:	4b4e      	ldr	r3, [pc, #312]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa2:	f003 0302 	and.w	r3, r3, #2
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1ee      	bne.n	8008f88 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f000 8102 	beq.w	80091b8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008fb4:	4b48      	ldr	r3, [pc, #288]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fbc:	2b18      	cmp	r3, #24
 8008fbe:	f000 80bd 	beq.w	800913c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	f040 809e 	bne.w	8009108 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fcc:	4b42      	ldr	r3, [pc, #264]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4a41      	ldr	r2, [pc, #260]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd8:	f7fa f9c6 	bl	8003368 <HAL_GetTick>
 8008fdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fde:	e008      	b.n	8008ff2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fe0:	f7fa f9c2 	bl	8003368 <HAL_GetTick>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d901      	bls.n	8008ff2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008fee:	2303      	movs	r3, #3
 8008ff0:	e0e3      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ff2:	4b39      	ldr	r3, [pc, #228]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1f0      	bne.n	8008fe0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ffe:	4b36      	ldr	r3, [pc, #216]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8009000:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009002:	4b37      	ldr	r3, [pc, #220]	; (80090e0 <HAL_RCC_OscConfig+0x774>)
 8009004:	4013      	ands	r3, r2
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800900e:	0112      	lsls	r2, r2, #4
 8009010:	430a      	orrs	r2, r1
 8009012:	4931      	ldr	r1, [pc, #196]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8009014:	4313      	orrs	r3, r2
 8009016:	628b      	str	r3, [r1, #40]	; 0x28
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901c:	3b01      	subs	r3, #1
 800901e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009026:	3b01      	subs	r3, #1
 8009028:	025b      	lsls	r3, r3, #9
 800902a:	b29b      	uxth	r3, r3
 800902c:	431a      	orrs	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009032:	3b01      	subs	r3, #1
 8009034:	041b      	lsls	r3, r3, #16
 8009036:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800903a:	431a      	orrs	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009040:	3b01      	subs	r3, #1
 8009042:	061b      	lsls	r3, r3, #24
 8009044:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009048:	4923      	ldr	r1, [pc, #140]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 800904a:	4313      	orrs	r3, r2
 800904c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800904e:	4b22      	ldr	r3, [pc, #136]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8009050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009052:	4a21      	ldr	r2, [pc, #132]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8009054:	f023 0301 	bic.w	r3, r3, #1
 8009058:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800905a:	4b1f      	ldr	r3, [pc, #124]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 800905c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800905e:	4b21      	ldr	r3, [pc, #132]	; (80090e4 <HAL_RCC_OscConfig+0x778>)
 8009060:	4013      	ands	r3, r2
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009066:	00d2      	lsls	r2, r2, #3
 8009068:	491b      	ldr	r1, [pc, #108]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 800906a:	4313      	orrs	r3, r2
 800906c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800906e:	4b1a      	ldr	r3, [pc, #104]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8009070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009072:	f023 020c 	bic.w	r2, r3, #12
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907a:	4917      	ldr	r1, [pc, #92]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 800907c:	4313      	orrs	r3, r2
 800907e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009080:	4b15      	ldr	r3, [pc, #84]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8009082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009084:	f023 0202 	bic.w	r2, r3, #2
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800908c:	4912      	ldr	r1, [pc, #72]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 800908e:	4313      	orrs	r3, r2
 8009090:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009092:	4b11      	ldr	r3, [pc, #68]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8009094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009096:	4a10      	ldr	r2, [pc, #64]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 8009098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800909c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800909e:	4b0e      	ldr	r3, [pc, #56]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 80090a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a2:	4a0d      	ldr	r2, [pc, #52]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 80090a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80090aa:	4b0b      	ldr	r3, [pc, #44]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 80090ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ae:	4a0a      	ldr	r2, [pc, #40]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 80090b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80090b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80090b6:	4b08      	ldr	r3, [pc, #32]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 80090b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ba:	4a07      	ldr	r2, [pc, #28]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 80090bc:	f043 0301 	orr.w	r3, r3, #1
 80090c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090c2:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a04      	ldr	r2, [pc, #16]	; (80090d8 <HAL_RCC_OscConfig+0x76c>)
 80090c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090ce:	f7fa f94b 	bl	8003368 <HAL_GetTick>
 80090d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80090d4:	e011      	b.n	80090fa <HAL_RCC_OscConfig+0x78e>
 80090d6:	bf00      	nop
 80090d8:	58024400 	.word	0x58024400
 80090dc:	58024800 	.word	0x58024800
 80090e0:	fffffc0c 	.word	0xfffffc0c
 80090e4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090e8:	f7fa f93e 	bl	8003368 <HAL_GetTick>
 80090ec:	4602      	mov	r2, r0
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	2b02      	cmp	r3, #2
 80090f4:	d901      	bls.n	80090fa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e05f      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80090fa:	4b32      	ldr	r3, [pc, #200]	; (80091c4 <HAL_RCC_OscConfig+0x858>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0f0      	beq.n	80090e8 <HAL_RCC_OscConfig+0x77c>
 8009106:	e057      	b.n	80091b8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009108:	4b2e      	ldr	r3, [pc, #184]	; (80091c4 <HAL_RCC_OscConfig+0x858>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a2d      	ldr	r2, [pc, #180]	; (80091c4 <HAL_RCC_OscConfig+0x858>)
 800910e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009114:	f7fa f928 	bl	8003368 <HAL_GetTick>
 8009118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800911a:	e008      	b.n	800912e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800911c:	f7fa f924 	bl	8003368 <HAL_GetTick>
 8009120:	4602      	mov	r2, r0
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	2b02      	cmp	r3, #2
 8009128:	d901      	bls.n	800912e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e045      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800912e:	4b25      	ldr	r3, [pc, #148]	; (80091c4 <HAL_RCC_OscConfig+0x858>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1f0      	bne.n	800911c <HAL_RCC_OscConfig+0x7b0>
 800913a:	e03d      	b.n	80091b8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800913c:	4b21      	ldr	r3, [pc, #132]	; (80091c4 <HAL_RCC_OscConfig+0x858>)
 800913e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009140:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009142:	4b20      	ldr	r3, [pc, #128]	; (80091c4 <HAL_RCC_OscConfig+0x858>)
 8009144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009146:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914c:	2b01      	cmp	r3, #1
 800914e:	d031      	beq.n	80091b4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	f003 0203 	and.w	r2, r3, #3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800915a:	429a      	cmp	r2, r3
 800915c:	d12a      	bne.n	80091b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	091b      	lsrs	r3, r3, #4
 8009162:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800916a:	429a      	cmp	r2, r3
 800916c:	d122      	bne.n	80091b4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009178:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800917a:	429a      	cmp	r2, r3
 800917c:	d11a      	bne.n	80091b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	0a5b      	lsrs	r3, r3, #9
 8009182:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800918a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800918c:	429a      	cmp	r2, r3
 800918e:	d111      	bne.n	80091b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	0c1b      	lsrs	r3, r3, #16
 8009194:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800919e:	429a      	cmp	r2, r3
 80091a0:	d108      	bne.n	80091b4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	0e1b      	lsrs	r3, r3, #24
 80091a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d001      	beq.n	80091b8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	e000      	b.n	80091ba <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3730      	adds	r7, #48	; 0x30
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	58024400 	.word	0x58024400

080091c8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d101      	bne.n	80091dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e19c      	b.n	8009516 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80091dc:	4b8a      	ldr	r3, [pc, #552]	; (8009408 <HAL_RCC_ClockConfig+0x240>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 030f 	and.w	r3, r3, #15
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d910      	bls.n	800920c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091ea:	4b87      	ldr	r3, [pc, #540]	; (8009408 <HAL_RCC_ClockConfig+0x240>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f023 020f 	bic.w	r2, r3, #15
 80091f2:	4985      	ldr	r1, [pc, #532]	; (8009408 <HAL_RCC_ClockConfig+0x240>)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091fa:	4b83      	ldr	r3, [pc, #524]	; (8009408 <HAL_RCC_ClockConfig+0x240>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 030f 	and.w	r3, r3, #15
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	429a      	cmp	r2, r3
 8009206:	d001      	beq.n	800920c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	e184      	b.n	8009516 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0304 	and.w	r3, r3, #4
 8009214:	2b00      	cmp	r3, #0
 8009216:	d010      	beq.n	800923a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	691a      	ldr	r2, [r3, #16]
 800921c:	4b7b      	ldr	r3, [pc, #492]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009224:	429a      	cmp	r2, r3
 8009226:	d908      	bls.n	800923a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009228:	4b78      	ldr	r3, [pc, #480]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	4975      	ldr	r1, [pc, #468]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 8009236:	4313      	orrs	r3, r2
 8009238:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0308 	and.w	r3, r3, #8
 8009242:	2b00      	cmp	r3, #0
 8009244:	d010      	beq.n	8009268 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	695a      	ldr	r2, [r3, #20]
 800924a:	4b70      	ldr	r3, [pc, #448]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009252:	429a      	cmp	r2, r3
 8009254:	d908      	bls.n	8009268 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009256:	4b6d      	ldr	r3, [pc, #436]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 8009258:	69db      	ldr	r3, [r3, #28]
 800925a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	695b      	ldr	r3, [r3, #20]
 8009262:	496a      	ldr	r1, [pc, #424]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 8009264:	4313      	orrs	r3, r2
 8009266:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0310 	and.w	r3, r3, #16
 8009270:	2b00      	cmp	r3, #0
 8009272:	d010      	beq.n	8009296 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	699a      	ldr	r2, [r3, #24]
 8009278:	4b64      	ldr	r3, [pc, #400]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009280:	429a      	cmp	r2, r3
 8009282:	d908      	bls.n	8009296 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009284:	4b61      	ldr	r3, [pc, #388]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	495e      	ldr	r1, [pc, #376]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 8009292:	4313      	orrs	r3, r2
 8009294:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d010      	beq.n	80092c4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	69da      	ldr	r2, [r3, #28]
 80092a6:	4b59      	ldr	r3, [pc, #356]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d908      	bls.n	80092c4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80092b2:	4b56      	ldr	r3, [pc, #344]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	4953      	ldr	r1, [pc, #332]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0302 	and.w	r3, r3, #2
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d010      	beq.n	80092f2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	68da      	ldr	r2, [r3, #12]
 80092d4:	4b4d      	ldr	r3, [pc, #308]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 80092d6:	699b      	ldr	r3, [r3, #24]
 80092d8:	f003 030f 	and.w	r3, r3, #15
 80092dc:	429a      	cmp	r2, r3
 80092de:	d908      	bls.n	80092f2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092e0:	4b4a      	ldr	r3, [pc, #296]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	f023 020f 	bic.w	r2, r3, #15
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	4947      	ldr	r1, [pc, #284]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d055      	beq.n	80093aa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80092fe:	4b43      	ldr	r3, [pc, #268]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	4940      	ldr	r1, [pc, #256]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 800930c:	4313      	orrs	r3, r2
 800930e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	2b02      	cmp	r3, #2
 8009316:	d107      	bne.n	8009328 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009318:	4b3c      	ldr	r3, [pc, #240]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d121      	bne.n	8009368 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e0f6      	b.n	8009516 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	2b03      	cmp	r3, #3
 800932e:	d107      	bne.n	8009340 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009330:	4b36      	ldr	r3, [pc, #216]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d115      	bne.n	8009368 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	e0ea      	b.n	8009516 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d107      	bne.n	8009358 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009348:	4b30      	ldr	r3, [pc, #192]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009350:	2b00      	cmp	r3, #0
 8009352:	d109      	bne.n	8009368 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	e0de      	b.n	8009516 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009358:	4b2c      	ldr	r3, [pc, #176]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b00      	cmp	r3, #0
 8009362:	d101      	bne.n	8009368 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e0d6      	b.n	8009516 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009368:	4b28      	ldr	r3, [pc, #160]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	f023 0207 	bic.w	r2, r3, #7
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	4925      	ldr	r1, [pc, #148]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 8009376:	4313      	orrs	r3, r2
 8009378:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800937a:	f7f9 fff5 	bl	8003368 <HAL_GetTick>
 800937e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009380:	e00a      	b.n	8009398 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009382:	f7f9 fff1 	bl	8003368 <HAL_GetTick>
 8009386:	4602      	mov	r2, r0
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	1ad3      	subs	r3, r2, r3
 800938c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009390:	4293      	cmp	r3, r2
 8009392:	d901      	bls.n	8009398 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009394:	2303      	movs	r3, #3
 8009396:	e0be      	b.n	8009516 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009398:	4b1c      	ldr	r3, [pc, #112]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	00db      	lsls	r3, r3, #3
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d1eb      	bne.n	8009382 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d010      	beq.n	80093d8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68da      	ldr	r2, [r3, #12]
 80093ba:	4b14      	ldr	r3, [pc, #80]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	f003 030f 	and.w	r3, r3, #15
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d208      	bcs.n	80093d8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093c6:	4b11      	ldr	r3, [pc, #68]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 80093c8:	699b      	ldr	r3, [r3, #24]
 80093ca:	f023 020f 	bic.w	r2, r3, #15
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	490e      	ldr	r1, [pc, #56]	; (800940c <HAL_RCC_ClockConfig+0x244>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80093d8:	4b0b      	ldr	r3, [pc, #44]	; (8009408 <HAL_RCC_ClockConfig+0x240>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f003 030f 	and.w	r3, r3, #15
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d214      	bcs.n	8009410 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093e6:	4b08      	ldr	r3, [pc, #32]	; (8009408 <HAL_RCC_ClockConfig+0x240>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f023 020f 	bic.w	r2, r3, #15
 80093ee:	4906      	ldr	r1, [pc, #24]	; (8009408 <HAL_RCC_ClockConfig+0x240>)
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093f6:	4b04      	ldr	r3, [pc, #16]	; (8009408 <HAL_RCC_ClockConfig+0x240>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 030f 	and.w	r3, r3, #15
 80093fe:	683a      	ldr	r2, [r7, #0]
 8009400:	429a      	cmp	r2, r3
 8009402:	d005      	beq.n	8009410 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e086      	b.n	8009516 <HAL_RCC_ClockConfig+0x34e>
 8009408:	52002000 	.word	0x52002000
 800940c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0304 	and.w	r3, r3, #4
 8009418:	2b00      	cmp	r3, #0
 800941a:	d010      	beq.n	800943e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	691a      	ldr	r2, [r3, #16]
 8009420:	4b3f      	ldr	r3, [pc, #252]	; (8009520 <HAL_RCC_ClockConfig+0x358>)
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009428:	429a      	cmp	r2, r3
 800942a:	d208      	bcs.n	800943e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800942c:	4b3c      	ldr	r3, [pc, #240]	; (8009520 <HAL_RCC_ClockConfig+0x358>)
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	4939      	ldr	r1, [pc, #228]	; (8009520 <HAL_RCC_ClockConfig+0x358>)
 800943a:	4313      	orrs	r3, r2
 800943c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 0308 	and.w	r3, r3, #8
 8009446:	2b00      	cmp	r3, #0
 8009448:	d010      	beq.n	800946c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	695a      	ldr	r2, [r3, #20]
 800944e:	4b34      	ldr	r3, [pc, #208]	; (8009520 <HAL_RCC_ClockConfig+0x358>)
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009456:	429a      	cmp	r2, r3
 8009458:	d208      	bcs.n	800946c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800945a:	4b31      	ldr	r3, [pc, #196]	; (8009520 <HAL_RCC_ClockConfig+0x358>)
 800945c:	69db      	ldr	r3, [r3, #28]
 800945e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	695b      	ldr	r3, [r3, #20]
 8009466:	492e      	ldr	r1, [pc, #184]	; (8009520 <HAL_RCC_ClockConfig+0x358>)
 8009468:	4313      	orrs	r3, r2
 800946a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 0310 	and.w	r3, r3, #16
 8009474:	2b00      	cmp	r3, #0
 8009476:	d010      	beq.n	800949a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	699a      	ldr	r2, [r3, #24]
 800947c:	4b28      	ldr	r3, [pc, #160]	; (8009520 <HAL_RCC_ClockConfig+0x358>)
 800947e:	69db      	ldr	r3, [r3, #28]
 8009480:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009484:	429a      	cmp	r2, r3
 8009486:	d208      	bcs.n	800949a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009488:	4b25      	ldr	r3, [pc, #148]	; (8009520 <HAL_RCC_ClockConfig+0x358>)
 800948a:	69db      	ldr	r3, [r3, #28]
 800948c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	4922      	ldr	r1, [pc, #136]	; (8009520 <HAL_RCC_ClockConfig+0x358>)
 8009496:	4313      	orrs	r3, r2
 8009498:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0320 	and.w	r3, r3, #32
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d010      	beq.n	80094c8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	69da      	ldr	r2, [r3, #28]
 80094aa:	4b1d      	ldr	r3, [pc, #116]	; (8009520 <HAL_RCC_ClockConfig+0x358>)
 80094ac:	6a1b      	ldr	r3, [r3, #32]
 80094ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d208      	bcs.n	80094c8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80094b6:	4b1a      	ldr	r3, [pc, #104]	; (8009520 <HAL_RCC_ClockConfig+0x358>)
 80094b8:	6a1b      	ldr	r3, [r3, #32]
 80094ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	4917      	ldr	r1, [pc, #92]	; (8009520 <HAL_RCC_ClockConfig+0x358>)
 80094c4:	4313      	orrs	r3, r2
 80094c6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80094c8:	f000 f834 	bl	8009534 <HAL_RCC_GetSysClockFreq>
 80094cc:	4602      	mov	r2, r0
 80094ce:	4b14      	ldr	r3, [pc, #80]	; (8009520 <HAL_RCC_ClockConfig+0x358>)
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	0a1b      	lsrs	r3, r3, #8
 80094d4:	f003 030f 	and.w	r3, r3, #15
 80094d8:	4912      	ldr	r1, [pc, #72]	; (8009524 <HAL_RCC_ClockConfig+0x35c>)
 80094da:	5ccb      	ldrb	r3, [r1, r3]
 80094dc:	f003 031f 	and.w	r3, r3, #31
 80094e0:	fa22 f303 	lsr.w	r3, r2, r3
 80094e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80094e6:	4b0e      	ldr	r3, [pc, #56]	; (8009520 <HAL_RCC_ClockConfig+0x358>)
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	f003 030f 	and.w	r3, r3, #15
 80094ee:	4a0d      	ldr	r2, [pc, #52]	; (8009524 <HAL_RCC_ClockConfig+0x35c>)
 80094f0:	5cd3      	ldrb	r3, [r2, r3]
 80094f2:	f003 031f 	and.w	r3, r3, #31
 80094f6:	693a      	ldr	r2, [r7, #16]
 80094f8:	fa22 f303 	lsr.w	r3, r2, r3
 80094fc:	4a0a      	ldr	r2, [pc, #40]	; (8009528 <HAL_RCC_ClockConfig+0x360>)
 80094fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009500:	4a0a      	ldr	r2, [pc, #40]	; (800952c <HAL_RCC_ClockConfig+0x364>)
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009506:	4b0a      	ldr	r3, [pc, #40]	; (8009530 <HAL_RCC_ClockConfig+0x368>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4618      	mov	r0, r3
 800950c:	f7f9 fee2 	bl	80032d4 <HAL_InitTick>
 8009510:	4603      	mov	r3, r0
 8009512:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009514:	7bfb      	ldrb	r3, [r7, #15]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3718      	adds	r7, #24
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	58024400 	.word	0x58024400
 8009524:	080123d8 	.word	0x080123d8
 8009528:	24000404 	.word	0x24000404
 800952c:	24000400 	.word	0x24000400
 8009530:	24000408 	.word	0x24000408

08009534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009534:	b480      	push	{r7}
 8009536:	b089      	sub	sp, #36	; 0x24
 8009538:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800953a:	4bb3      	ldr	r3, [pc, #716]	; (8009808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009542:	2b18      	cmp	r3, #24
 8009544:	f200 8155 	bhi.w	80097f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009548:	a201      	add	r2, pc, #4	; (adr r2, 8009550 <HAL_RCC_GetSysClockFreq+0x1c>)
 800954a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954e:	bf00      	nop
 8009550:	080095b5 	.word	0x080095b5
 8009554:	080097f3 	.word	0x080097f3
 8009558:	080097f3 	.word	0x080097f3
 800955c:	080097f3 	.word	0x080097f3
 8009560:	080097f3 	.word	0x080097f3
 8009564:	080097f3 	.word	0x080097f3
 8009568:	080097f3 	.word	0x080097f3
 800956c:	080097f3 	.word	0x080097f3
 8009570:	080095db 	.word	0x080095db
 8009574:	080097f3 	.word	0x080097f3
 8009578:	080097f3 	.word	0x080097f3
 800957c:	080097f3 	.word	0x080097f3
 8009580:	080097f3 	.word	0x080097f3
 8009584:	080097f3 	.word	0x080097f3
 8009588:	080097f3 	.word	0x080097f3
 800958c:	080097f3 	.word	0x080097f3
 8009590:	080095e1 	.word	0x080095e1
 8009594:	080097f3 	.word	0x080097f3
 8009598:	080097f3 	.word	0x080097f3
 800959c:	080097f3 	.word	0x080097f3
 80095a0:	080097f3 	.word	0x080097f3
 80095a4:	080097f3 	.word	0x080097f3
 80095a8:	080097f3 	.word	0x080097f3
 80095ac:	080097f3 	.word	0x080097f3
 80095b0:	080095e7 	.word	0x080095e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095b4:	4b94      	ldr	r3, [pc, #592]	; (8009808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0320 	and.w	r3, r3, #32
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d009      	beq.n	80095d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80095c0:	4b91      	ldr	r3, [pc, #580]	; (8009808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	08db      	lsrs	r3, r3, #3
 80095c6:	f003 0303 	and.w	r3, r3, #3
 80095ca:	4a90      	ldr	r2, [pc, #576]	; (800980c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80095cc:	fa22 f303 	lsr.w	r3, r2, r3
 80095d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80095d2:	e111      	b.n	80097f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80095d4:	4b8d      	ldr	r3, [pc, #564]	; (800980c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80095d6:	61bb      	str	r3, [r7, #24]
    break;
 80095d8:	e10e      	b.n	80097f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80095da:	4b8d      	ldr	r3, [pc, #564]	; (8009810 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80095dc:	61bb      	str	r3, [r7, #24]
    break;
 80095de:	e10b      	b.n	80097f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80095e0:	4b8c      	ldr	r3, [pc, #560]	; (8009814 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80095e2:	61bb      	str	r3, [r7, #24]
    break;
 80095e4:	e108      	b.n	80097f8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095e6:	4b88      	ldr	r3, [pc, #544]	; (8009808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ea:	f003 0303 	and.w	r3, r3, #3
 80095ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80095f0:	4b85      	ldr	r3, [pc, #532]	; (8009808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f4:	091b      	lsrs	r3, r3, #4
 80095f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80095fc:	4b82      	ldr	r3, [pc, #520]	; (8009808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009606:	4b80      	ldr	r3, [pc, #512]	; (8009808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960a:	08db      	lsrs	r3, r3, #3
 800960c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	fb02 f303 	mul.w	r3, r2, r3
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800961e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 80e1 	beq.w	80097ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	2b02      	cmp	r3, #2
 800962e:	f000 8083 	beq.w	8009738 <HAL_RCC_GetSysClockFreq+0x204>
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	2b02      	cmp	r3, #2
 8009636:	f200 80a1 	bhi.w	800977c <HAL_RCC_GetSysClockFreq+0x248>
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d003      	beq.n	8009648 <HAL_RCC_GetSysClockFreq+0x114>
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d056      	beq.n	80096f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009646:	e099      	b.n	800977c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009648:	4b6f      	ldr	r3, [pc, #444]	; (8009808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 0320 	and.w	r3, r3, #32
 8009650:	2b00      	cmp	r3, #0
 8009652:	d02d      	beq.n	80096b0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009654:	4b6c      	ldr	r3, [pc, #432]	; (8009808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	08db      	lsrs	r3, r3, #3
 800965a:	f003 0303 	and.w	r3, r3, #3
 800965e:	4a6b      	ldr	r2, [pc, #428]	; (800980c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009660:	fa22 f303 	lsr.w	r3, r2, r3
 8009664:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	ee07 3a90 	vmov	s15, r3
 800966c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	ee07 3a90 	vmov	s15, r3
 8009676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800967e:	4b62      	ldr	r3, [pc, #392]	; (8009808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009686:	ee07 3a90 	vmov	s15, r3
 800968a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800968e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009692:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009818 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800969a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800969e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80096ae:	e087      	b.n	80097c0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	ee07 3a90 	vmov	s15, r3
 80096b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 800981c <HAL_RCC_GetSysClockFreq+0x2e8>
 80096be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096c2:	4b51      	ldr	r3, [pc, #324]	; (8009808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80096d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009818 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096f2:	e065      	b.n	80097c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	ee07 3a90 	vmov	s15, r3
 80096fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009820 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009706:	4b40      	ldr	r3, [pc, #256]	; (8009808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800970e:	ee07 3a90 	vmov	s15, r3
 8009712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009716:	ed97 6a02 	vldr	s12, [r7, #8]
 800971a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009818 <HAL_RCC_GetSysClockFreq+0x2e4>
 800971e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800972a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800972e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009736:	e043      	b.n	80097c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	ee07 3a90 	vmov	s15, r3
 800973e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009742:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009824 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800974a:	4b2f      	ldr	r3, [pc, #188]	; (8009808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800974c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009752:	ee07 3a90 	vmov	s15, r3
 8009756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800975a:	ed97 6a02 	vldr	s12, [r7, #8]
 800975e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009818 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800976a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800976e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800977a:	e021      	b.n	80097c0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	ee07 3a90 	vmov	s15, r3
 8009782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009786:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009820 <HAL_RCC_GetSysClockFreq+0x2ec>
 800978a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800978e:	4b1e      	ldr	r3, [pc, #120]	; (8009808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009796:	ee07 3a90 	vmov	s15, r3
 800979a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800979e:	ed97 6a02 	vldr	s12, [r7, #8]
 80097a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009818 <HAL_RCC_GetSysClockFreq+0x2e4>
 80097a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097be:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80097c0:	4b11      	ldr	r3, [pc, #68]	; (8009808 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c4:	0a5b      	lsrs	r3, r3, #9
 80097c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ca:	3301      	adds	r3, #1
 80097cc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	ee07 3a90 	vmov	s15, r3
 80097d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80097d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80097dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097e4:	ee17 3a90 	vmov	r3, s15
 80097e8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80097ea:	e005      	b.n	80097f8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80097ec:	2300      	movs	r3, #0
 80097ee:	61bb      	str	r3, [r7, #24]
    break;
 80097f0:	e002      	b.n	80097f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80097f2:	4b07      	ldr	r3, [pc, #28]	; (8009810 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80097f4:	61bb      	str	r3, [r7, #24]
    break;
 80097f6:	bf00      	nop
  }

  return sysclockfreq;
 80097f8:	69bb      	ldr	r3, [r7, #24]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3724      	adds	r7, #36	; 0x24
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	58024400 	.word	0x58024400
 800980c:	03d09000 	.word	0x03d09000
 8009810:	003d0900 	.word	0x003d0900
 8009814:	017d7840 	.word	0x017d7840
 8009818:	46000000 	.word	0x46000000
 800981c:	4c742400 	.word	0x4c742400
 8009820:	4a742400 	.word	0x4a742400
 8009824:	4bbebc20 	.word	0x4bbebc20

08009828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800982e:	f7ff fe81 	bl	8009534 <HAL_RCC_GetSysClockFreq>
 8009832:	4602      	mov	r2, r0
 8009834:	4b10      	ldr	r3, [pc, #64]	; (8009878 <HAL_RCC_GetHCLKFreq+0x50>)
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	0a1b      	lsrs	r3, r3, #8
 800983a:	f003 030f 	and.w	r3, r3, #15
 800983e:	490f      	ldr	r1, [pc, #60]	; (800987c <HAL_RCC_GetHCLKFreq+0x54>)
 8009840:	5ccb      	ldrb	r3, [r1, r3]
 8009842:	f003 031f 	and.w	r3, r3, #31
 8009846:	fa22 f303 	lsr.w	r3, r2, r3
 800984a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800984c:	4b0a      	ldr	r3, [pc, #40]	; (8009878 <HAL_RCC_GetHCLKFreq+0x50>)
 800984e:	699b      	ldr	r3, [r3, #24]
 8009850:	f003 030f 	and.w	r3, r3, #15
 8009854:	4a09      	ldr	r2, [pc, #36]	; (800987c <HAL_RCC_GetHCLKFreq+0x54>)
 8009856:	5cd3      	ldrb	r3, [r2, r3]
 8009858:	f003 031f 	and.w	r3, r3, #31
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	fa22 f303 	lsr.w	r3, r2, r3
 8009862:	4a07      	ldr	r2, [pc, #28]	; (8009880 <HAL_RCC_GetHCLKFreq+0x58>)
 8009864:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009866:	4a07      	ldr	r2, [pc, #28]	; (8009884 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800986c:	4b04      	ldr	r3, [pc, #16]	; (8009880 <HAL_RCC_GetHCLKFreq+0x58>)
 800986e:	681b      	ldr	r3, [r3, #0]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	58024400 	.word	0x58024400
 800987c:	080123d8 	.word	0x080123d8
 8009880:	24000404 	.word	0x24000404
 8009884:	24000400 	.word	0x24000400

08009888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800988c:	f7ff ffcc 	bl	8009828 <HAL_RCC_GetHCLKFreq>
 8009890:	4602      	mov	r2, r0
 8009892:	4b06      	ldr	r3, [pc, #24]	; (80098ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8009894:	69db      	ldr	r3, [r3, #28]
 8009896:	091b      	lsrs	r3, r3, #4
 8009898:	f003 0307 	and.w	r3, r3, #7
 800989c:	4904      	ldr	r1, [pc, #16]	; (80098b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800989e:	5ccb      	ldrb	r3, [r1, r3]
 80098a0:	f003 031f 	and.w	r3, r3, #31
 80098a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	58024400 	.word	0x58024400
 80098b0:	080123d8 	.word	0x080123d8

080098b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80098b8:	f7ff ffb6 	bl	8009828 <HAL_RCC_GetHCLKFreq>
 80098bc:	4602      	mov	r2, r0
 80098be:	4b06      	ldr	r3, [pc, #24]	; (80098d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	0a1b      	lsrs	r3, r3, #8
 80098c4:	f003 0307 	and.w	r3, r3, #7
 80098c8:	4904      	ldr	r1, [pc, #16]	; (80098dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80098ca:	5ccb      	ldrb	r3, [r1, r3]
 80098cc:	f003 031f 	and.w	r3, r3, #31
 80098d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	58024400 	.word	0x58024400
 80098dc:	080123d8 	.word	0x080123d8

080098e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80098e8:	2300      	movs	r3, #0
 80098ea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80098ec:	2300      	movs	r3, #0
 80098ee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d03f      	beq.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009904:	d02a      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009906:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800990a:	d824      	bhi.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800990c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009910:	d018      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009916:	d81e      	bhi.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009918:	2b00      	cmp	r3, #0
 800991a:	d003      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800991c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009920:	d007      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009922:	e018      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009924:	4ba3      	ldr	r3, [pc, #652]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009928:	4aa2      	ldr	r2, [pc, #648]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800992a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800992e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009930:	e015      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	3304      	adds	r3, #4
 8009936:	2102      	movs	r1, #2
 8009938:	4618      	mov	r0, r3
 800993a:	f001 fff9 	bl	800b930 <RCCEx_PLL2_Config>
 800993e:	4603      	mov	r3, r0
 8009940:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009942:	e00c      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	3324      	adds	r3, #36	; 0x24
 8009948:	2102      	movs	r1, #2
 800994a:	4618      	mov	r0, r3
 800994c:	f002 f8a2 	bl	800ba94 <RCCEx_PLL3_Config>
 8009950:	4603      	mov	r3, r0
 8009952:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009954:	e003      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	75fb      	strb	r3, [r7, #23]
      break;
 800995a:	e000      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800995c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800995e:	7dfb      	ldrb	r3, [r7, #23]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d109      	bne.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009964:	4b93      	ldr	r3, [pc, #588]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009968:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009970:	4990      	ldr	r1, [pc, #576]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009972:	4313      	orrs	r3, r2
 8009974:	650b      	str	r3, [r1, #80]	; 0x50
 8009976:	e001      	b.n	800997c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009978:	7dfb      	ldrb	r3, [r7, #23]
 800997a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009984:	2b00      	cmp	r3, #0
 8009986:	d03d      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800998c:	2b04      	cmp	r3, #4
 800998e:	d826      	bhi.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009990:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009996:	bf00      	nop
 8009998:	080099ad 	.word	0x080099ad
 800999c:	080099bb 	.word	0x080099bb
 80099a0:	080099cd 	.word	0x080099cd
 80099a4:	080099e5 	.word	0x080099e5
 80099a8:	080099e5 	.word	0x080099e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099ac:	4b81      	ldr	r3, [pc, #516]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80099ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b0:	4a80      	ldr	r2, [pc, #512]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80099b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80099b8:	e015      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	3304      	adds	r3, #4
 80099be:	2100      	movs	r1, #0
 80099c0:	4618      	mov	r0, r3
 80099c2:	f001 ffb5 	bl	800b930 <RCCEx_PLL2_Config>
 80099c6:	4603      	mov	r3, r0
 80099c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80099ca:	e00c      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	3324      	adds	r3, #36	; 0x24
 80099d0:	2100      	movs	r1, #0
 80099d2:	4618      	mov	r0, r3
 80099d4:	f002 f85e 	bl	800ba94 <RCCEx_PLL3_Config>
 80099d8:	4603      	mov	r3, r0
 80099da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80099dc:	e003      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	75fb      	strb	r3, [r7, #23]
      break;
 80099e2:	e000      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80099e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099e6:	7dfb      	ldrb	r3, [r7, #23]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d109      	bne.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80099ec:	4b71      	ldr	r3, [pc, #452]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80099ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099f0:	f023 0207 	bic.w	r2, r3, #7
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f8:	496e      	ldr	r1, [pc, #440]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80099fa:	4313      	orrs	r3, r2
 80099fc:	650b      	str	r3, [r1, #80]	; 0x50
 80099fe:	e001      	b.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a00:	7dfb      	ldrb	r3, [r7, #23]
 8009a02:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d042      	beq.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a18:	d02b      	beq.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a1e:	d825      	bhi.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009a20:	2bc0      	cmp	r3, #192	; 0xc0
 8009a22:	d028      	beq.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009a24:	2bc0      	cmp	r3, #192	; 0xc0
 8009a26:	d821      	bhi.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009a28:	2b80      	cmp	r3, #128	; 0x80
 8009a2a:	d016      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009a2c:	2b80      	cmp	r3, #128	; 0x80
 8009a2e:	d81d      	bhi.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d002      	beq.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009a34:	2b40      	cmp	r3, #64	; 0x40
 8009a36:	d007      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009a38:	e018      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a3a:	4b5e      	ldr	r3, [pc, #376]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3e:	4a5d      	ldr	r2, [pc, #372]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009a46:	e017      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f001 ff6e 	bl	800b930 <RCCEx_PLL2_Config>
 8009a54:	4603      	mov	r3, r0
 8009a56:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009a58:	e00e      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	3324      	adds	r3, #36	; 0x24
 8009a5e:	2100      	movs	r1, #0
 8009a60:	4618      	mov	r0, r3
 8009a62:	f002 f817 	bl	800ba94 <RCCEx_PLL3_Config>
 8009a66:	4603      	mov	r3, r0
 8009a68:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009a6a:	e005      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a70:	e002      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009a72:	bf00      	nop
 8009a74:	e000      	b.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d109      	bne.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009a7e:	4b4d      	ldr	r3, [pc, #308]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a82:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a8a:	494a      	ldr	r1, [pc, #296]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	650b      	str	r3, [r1, #80]	; 0x50
 8009a90:	e001      	b.n	8009a96 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
 8009a94:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d049      	beq.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009aa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009aac:	d030      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009aae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ab2:	d82a      	bhi.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009ab4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ab8:	d02c      	beq.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009aba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009abe:	d824      	bhi.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009ac0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ac4:	d018      	beq.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009aca:	d81e      	bhi.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d003      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009ad0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ad4:	d007      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009ad6:	e018      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ad8:	4b36      	ldr	r3, [pc, #216]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009adc:	4a35      	ldr	r2, [pc, #212]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ae4:	e017      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	3304      	adds	r3, #4
 8009aea:	2100      	movs	r1, #0
 8009aec:	4618      	mov	r0, r3
 8009aee:	f001 ff1f 	bl	800b930 <RCCEx_PLL2_Config>
 8009af2:	4603      	mov	r3, r0
 8009af4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009af6:	e00e      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	3324      	adds	r3, #36	; 0x24
 8009afc:	2100      	movs	r1, #0
 8009afe:	4618      	mov	r0, r3
 8009b00:	f001 ffc8 	bl	800ba94 <RCCEx_PLL3_Config>
 8009b04:	4603      	mov	r3, r0
 8009b06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b08:	e005      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b0e:	e002      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009b10:	bf00      	nop
 8009b12:	e000      	b.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b16:	7dfb      	ldrb	r3, [r7, #23]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10a      	bne.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009b1c:	4b25      	ldr	r3, [pc, #148]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b20:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b2a:	4922      	ldr	r1, [pc, #136]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	658b      	str	r3, [r1, #88]	; 0x58
 8009b30:	e001      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b32:	7dfb      	ldrb	r3, [r7, #23]
 8009b34:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d04b      	beq.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009b48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b4c:	d030      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009b4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b52:	d82a      	bhi.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009b54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b58:	d02e      	beq.n	8009bb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009b5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b5e:	d824      	bhi.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009b60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b64:	d018      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009b66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b6a:	d81e      	bhi.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b74:	d007      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009b76:	e018      	b.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b78:	4b0e      	ldr	r3, [pc, #56]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7c:	4a0d      	ldr	r2, [pc, #52]	; (8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b84:	e019      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	3304      	adds	r3, #4
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f001 fecf 	bl	800b930 <RCCEx_PLL2_Config>
 8009b92:	4603      	mov	r3, r0
 8009b94:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009b96:	e010      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3324      	adds	r3, #36	; 0x24
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f001 ff78 	bl	800ba94 <RCCEx_PLL3_Config>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ba8:	e007      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	75fb      	strb	r3, [r7, #23]
      break;
 8009bae:	e004      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009bb0:	bf00      	nop
 8009bb2:	e002      	b.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009bb4:	58024400 	.word	0x58024400
      break;
 8009bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bba:	7dfb      	ldrb	r3, [r7, #23]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10a      	bne.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009bc0:	4b99      	ldr	r3, [pc, #612]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009bce:	4996      	ldr	r1, [pc, #600]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	658b      	str	r3, [r1, #88]	; 0x58
 8009bd4:	e001      	b.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d032      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bea:	2b30      	cmp	r3, #48	; 0x30
 8009bec:	d01c      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8009bee:	2b30      	cmp	r3, #48	; 0x30
 8009bf0:	d817      	bhi.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009bf2:	2b20      	cmp	r3, #32
 8009bf4:	d00c      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8009bf6:	2b20      	cmp	r3, #32
 8009bf8:	d813      	bhi.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d016      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009bfe:	2b10      	cmp	r3, #16
 8009c00:	d10f      	bne.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c02:	4b89      	ldr	r3, [pc, #548]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c06:	4a88      	ldr	r2, [pc, #544]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009c0e:	e00e      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	3304      	adds	r3, #4
 8009c14:	2102      	movs	r1, #2
 8009c16:	4618      	mov	r0, r3
 8009c18:	f001 fe8a 	bl	800b930 <RCCEx_PLL2_Config>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009c20:	e005      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	75fb      	strb	r3, [r7, #23]
      break;
 8009c26:	e002      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009c28:	bf00      	nop
 8009c2a:	e000      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c2e:	7dfb      	ldrb	r3, [r7, #23]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d109      	bne.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009c34:	4b7c      	ldr	r3, [pc, #496]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c40:	4979      	ldr	r1, [pc, #484]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009c46:	e001      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d047      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c60:	d030      	beq.n	8009cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009c62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c66:	d82a      	bhi.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009c68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c6c:	d02c      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009c6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c72:	d824      	bhi.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c78:	d018      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c7e:	d81e      	bhi.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d003      	beq.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c88:	d007      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009c8a:	e018      	b.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c8c:	4b66      	ldr	r3, [pc, #408]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c90:	4a65      	ldr	r2, [pc, #404]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009c98:	e017      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f001 fe45 	bl	800b930 <RCCEx_PLL2_Config>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009caa:	e00e      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	3324      	adds	r3, #36	; 0x24
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f001 feee 	bl	800ba94 <RCCEx_PLL3_Config>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009cbc:	e005      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8009cc2:	e002      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009cc4:	bf00      	nop
 8009cc6:	e000      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cca:	7dfb      	ldrb	r3, [r7, #23]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d109      	bne.n	8009ce4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009cd0:	4b55      	ldr	r3, [pc, #340]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cd4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cdc:	4952      	ldr	r1, [pc, #328]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	650b      	str	r3, [r1, #80]	; 0x50
 8009ce2:	e001      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce4:	7dfb      	ldrb	r3, [r7, #23]
 8009ce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d049      	beq.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009cfc:	d02e      	beq.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009cfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d02:	d828      	bhi.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009d04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d08:	d02a      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009d0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d0e:	d822      	bhi.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009d10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d14:	d026      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009d16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d1a:	d81c      	bhi.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d20:	d010      	beq.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009d22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d26:	d816      	bhi.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d01d      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d30:	d111      	bne.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3304      	adds	r3, #4
 8009d36:	2101      	movs	r1, #1
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f001 fdf9 	bl	800b930 <RCCEx_PLL2_Config>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009d42:	e012      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	3324      	adds	r3, #36	; 0x24
 8009d48:	2101      	movs	r1, #1
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f001 fea2 	bl	800ba94 <RCCEx_PLL3_Config>
 8009d50:	4603      	mov	r3, r0
 8009d52:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009d54:	e009      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	75fb      	strb	r3, [r7, #23]
      break;
 8009d5a:	e006      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009d5c:	bf00      	nop
 8009d5e:	e004      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009d60:	bf00      	nop
 8009d62:	e002      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009d64:	bf00      	nop
 8009d66:	e000      	b.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d109      	bne.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009d70:	4b2d      	ldr	r3, [pc, #180]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d74:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d7c:	492a      	ldr	r1, [pc, #168]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	650b      	str	r3, [r1, #80]	; 0x50
 8009d82:	e001      	b.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d04d      	beq.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d9e:	d02e      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009da4:	d828      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009daa:	d02a      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009db0:	d822      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009db2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009db6:	d026      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009db8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009dbc:	d81c      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dc2:	d010      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dc8:	d816      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d01d      	beq.n	8009e0a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dd2:	d111      	bne.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	2101      	movs	r1, #1
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f001 fda8 	bl	800b930 <RCCEx_PLL2_Config>
 8009de0:	4603      	mov	r3, r0
 8009de2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009de4:	e012      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3324      	adds	r3, #36	; 0x24
 8009dea:	2101      	movs	r1, #1
 8009dec:	4618      	mov	r0, r3
 8009dee:	f001 fe51 	bl	800ba94 <RCCEx_PLL3_Config>
 8009df2:	4603      	mov	r3, r0
 8009df4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009df6:	e009      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8009dfc:	e006      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009dfe:	bf00      	nop
 8009e00:	e004      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009e02:	bf00      	nop
 8009e04:	e002      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009e06:	bf00      	nop
 8009e08:	e000      	b.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e0c:	7dfb      	ldrb	r3, [r7, #23]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d10c      	bne.n	8009e2c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009e12:	4b05      	ldr	r3, [pc, #20]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e16:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e20:	4901      	ldr	r1, [pc, #4]	; (8009e28 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009e22:	4313      	orrs	r3, r2
 8009e24:	658b      	str	r3, [r1, #88]	; 0x58
 8009e26:	e003      	b.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009e28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e2c:	7dfb      	ldrb	r3, [r7, #23]
 8009e2e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d02f      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e44:	d00e      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e4a:	d814      	bhi.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d015      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009e50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e54:	d10f      	bne.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e56:	4baf      	ldr	r3, [pc, #700]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5a:	4aae      	ldr	r2, [pc, #696]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009e62:	e00c      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3304      	adds	r3, #4
 8009e68:	2101      	movs	r1, #1
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f001 fd60 	bl	800b930 <RCCEx_PLL2_Config>
 8009e70:	4603      	mov	r3, r0
 8009e72:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009e74:	e003      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	75fb      	strb	r3, [r7, #23]
      break;
 8009e7a:	e000      	b.n	8009e7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d109      	bne.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e84:	4ba3      	ldr	r3, [pc, #652]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e88:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e90:	49a0      	ldr	r1, [pc, #640]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009e92:	4313      	orrs	r3, r2
 8009e94:	650b      	str	r3, [r1, #80]	; 0x50
 8009e96:	e001      	b.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e98:	7dfb      	ldrb	r3, [r7, #23]
 8009e9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d032      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eac:	2b03      	cmp	r3, #3
 8009eae:	d81b      	bhi.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009eb0:	a201      	add	r2, pc, #4	; (adr r2, 8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb6:	bf00      	nop
 8009eb8:	08009eef 	.word	0x08009eef
 8009ebc:	08009ec9 	.word	0x08009ec9
 8009ec0:	08009ed7 	.word	0x08009ed7
 8009ec4:	08009eef 	.word	0x08009eef
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec8:	4b92      	ldr	r3, [pc, #584]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ecc:	4a91      	ldr	r2, [pc, #580]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009ed4:	e00c      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	3304      	adds	r3, #4
 8009eda:	2102      	movs	r1, #2
 8009edc:	4618      	mov	r0, r3
 8009ede:	f001 fd27 	bl	800b930 <RCCEx_PLL2_Config>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009ee6:	e003      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	75fb      	strb	r3, [r7, #23]
      break;
 8009eec:	e000      	b.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ef0:	7dfb      	ldrb	r3, [r7, #23]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d109      	bne.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009ef6:	4b87      	ldr	r3, [pc, #540]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009efa:	f023 0203 	bic.w	r2, r3, #3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f02:	4984      	ldr	r1, [pc, #528]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f08:	e001      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f0a:	7dfb      	ldrb	r3, [r7, #23]
 8009f0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f000 8086 	beq.w	800a028 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f1c:	4b7e      	ldr	r3, [pc, #504]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a7d      	ldr	r2, [pc, #500]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f28:	f7f9 fa1e 	bl	8003368 <HAL_GetTick>
 8009f2c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f2e:	e009      	b.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f30:	f7f9 fa1a 	bl	8003368 <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	2b64      	cmp	r3, #100	; 0x64
 8009f3c:	d902      	bls.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	75fb      	strb	r3, [r7, #23]
        break;
 8009f42:	e005      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f44:	4b74      	ldr	r3, [pc, #464]	; (800a118 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d0ef      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009f50:	7dfb      	ldrb	r3, [r7, #23]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d166      	bne.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009f56:	4b6f      	ldr	r3, [pc, #444]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009f58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f60:	4053      	eors	r3, r2
 8009f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d013      	beq.n	8009f92 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f6a:	4b6a      	ldr	r3, [pc, #424]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f72:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f74:	4b67      	ldr	r3, [pc, #412]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f78:	4a66      	ldr	r2, [pc, #408]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f7e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f80:	4b64      	ldr	r3, [pc, #400]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f84:	4a63      	ldr	r2, [pc, #396]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f8a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009f8c:	4a61      	ldr	r2, [pc, #388]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f9c:	d115      	bne.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f9e:	f7f9 f9e3 	bl	8003368 <HAL_GetTick>
 8009fa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fa4:	e00b      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fa6:	f7f9 f9df 	bl	8003368 <HAL_GetTick>
 8009faa:	4602      	mov	r2, r0
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d902      	bls.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	75fb      	strb	r3, [r7, #23]
            break;
 8009fbc:	e005      	b.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fbe:	4b55      	ldr	r3, [pc, #340]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fc2:	f003 0302 	and.w	r3, r3, #2
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d0ed      	beq.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8009fca:	7dfb      	ldrb	r3, [r7, #23]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d126      	bne.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fde:	d10d      	bne.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009fe0:	4b4c      	ldr	r3, [pc, #304]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009fee:	0919      	lsrs	r1, r3, #4
 8009ff0:	4b4a      	ldr	r3, [pc, #296]	; (800a11c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8009ff2:	400b      	ands	r3, r1
 8009ff4:	4947      	ldr	r1, [pc, #284]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	610b      	str	r3, [r1, #16]
 8009ffa:	e005      	b.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009ffc:	4b45      	ldr	r3, [pc, #276]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	4a44      	ldr	r2, [pc, #272]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a002:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a006:	6113      	str	r3, [r2, #16]
 800a008:	4b42      	ldr	r3, [pc, #264]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a00a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a016:	493f      	ldr	r1, [pc, #252]	; (800a114 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a018:	4313      	orrs	r3, r2
 800a01a:	670b      	str	r3, [r1, #112]	; 0x70
 800a01c:	e004      	b.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	75bb      	strb	r3, [r7, #22]
 800a022:	e001      	b.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a024:	7dfb      	ldrb	r3, [r7, #23]
 800a026:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b00      	cmp	r3, #0
 800a032:	f000 8085 	beq.w	800a140 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a03a:	2b28      	cmp	r3, #40	; 0x28
 800a03c:	d866      	bhi.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a03e:	a201      	add	r2, pc, #4	; (adr r2, 800a044 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a044:	0800a121 	.word	0x0800a121
 800a048:	0800a10d 	.word	0x0800a10d
 800a04c:	0800a10d 	.word	0x0800a10d
 800a050:	0800a10d 	.word	0x0800a10d
 800a054:	0800a10d 	.word	0x0800a10d
 800a058:	0800a10d 	.word	0x0800a10d
 800a05c:	0800a10d 	.word	0x0800a10d
 800a060:	0800a10d 	.word	0x0800a10d
 800a064:	0800a0e9 	.word	0x0800a0e9
 800a068:	0800a10d 	.word	0x0800a10d
 800a06c:	0800a10d 	.word	0x0800a10d
 800a070:	0800a10d 	.word	0x0800a10d
 800a074:	0800a10d 	.word	0x0800a10d
 800a078:	0800a10d 	.word	0x0800a10d
 800a07c:	0800a10d 	.word	0x0800a10d
 800a080:	0800a10d 	.word	0x0800a10d
 800a084:	0800a0fb 	.word	0x0800a0fb
 800a088:	0800a10d 	.word	0x0800a10d
 800a08c:	0800a10d 	.word	0x0800a10d
 800a090:	0800a10d 	.word	0x0800a10d
 800a094:	0800a10d 	.word	0x0800a10d
 800a098:	0800a10d 	.word	0x0800a10d
 800a09c:	0800a10d 	.word	0x0800a10d
 800a0a0:	0800a10d 	.word	0x0800a10d
 800a0a4:	0800a121 	.word	0x0800a121
 800a0a8:	0800a10d 	.word	0x0800a10d
 800a0ac:	0800a10d 	.word	0x0800a10d
 800a0b0:	0800a10d 	.word	0x0800a10d
 800a0b4:	0800a10d 	.word	0x0800a10d
 800a0b8:	0800a10d 	.word	0x0800a10d
 800a0bc:	0800a10d 	.word	0x0800a10d
 800a0c0:	0800a10d 	.word	0x0800a10d
 800a0c4:	0800a121 	.word	0x0800a121
 800a0c8:	0800a10d 	.word	0x0800a10d
 800a0cc:	0800a10d 	.word	0x0800a10d
 800a0d0:	0800a10d 	.word	0x0800a10d
 800a0d4:	0800a10d 	.word	0x0800a10d
 800a0d8:	0800a10d 	.word	0x0800a10d
 800a0dc:	0800a10d 	.word	0x0800a10d
 800a0e0:	0800a10d 	.word	0x0800a10d
 800a0e4:	0800a121 	.word	0x0800a121
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	2101      	movs	r1, #1
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f001 fc1e 	bl	800b930 <RCCEx_PLL2_Config>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a0f8:	e013      	b.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	3324      	adds	r3, #36	; 0x24
 800a0fe:	2101      	movs	r1, #1
 800a100:	4618      	mov	r0, r3
 800a102:	f001 fcc7 	bl	800ba94 <RCCEx_PLL3_Config>
 800a106:	4603      	mov	r3, r0
 800a108:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a10a:	e00a      	b.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	75fb      	strb	r3, [r7, #23]
      break;
 800a110:	e007      	b.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800a112:	bf00      	nop
 800a114:	58024400 	.word	0x58024400
 800a118:	58024800 	.word	0x58024800
 800a11c:	00ffffcf 	.word	0x00ffffcf
      break;
 800a120:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a122:	7dfb      	ldrb	r3, [r7, #23]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d109      	bne.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a128:	4b96      	ldr	r3, [pc, #600]	; (800a384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a12a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a134:	4993      	ldr	r1, [pc, #588]	; (800a384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a136:	4313      	orrs	r3, r2
 800a138:	654b      	str	r3, [r1, #84]	; 0x54
 800a13a:	e001      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
 800a13e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f003 0302 	and.w	r3, r3, #2
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d038      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a150:	2b05      	cmp	r3, #5
 800a152:	d821      	bhi.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800a154:	a201      	add	r2, pc, #4	; (adr r2, 800a15c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800a156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a15a:	bf00      	nop
 800a15c:	0800a19f 	.word	0x0800a19f
 800a160:	0800a175 	.word	0x0800a175
 800a164:	0800a187 	.word	0x0800a187
 800a168:	0800a19f 	.word	0x0800a19f
 800a16c:	0800a19f 	.word	0x0800a19f
 800a170:	0800a19f 	.word	0x0800a19f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	3304      	adds	r3, #4
 800a178:	2101      	movs	r1, #1
 800a17a:	4618      	mov	r0, r3
 800a17c:	f001 fbd8 	bl	800b930 <RCCEx_PLL2_Config>
 800a180:	4603      	mov	r3, r0
 800a182:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a184:	e00c      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	3324      	adds	r3, #36	; 0x24
 800a18a:	2101      	movs	r1, #1
 800a18c:	4618      	mov	r0, r3
 800a18e:	f001 fc81 	bl	800ba94 <RCCEx_PLL3_Config>
 800a192:	4603      	mov	r3, r0
 800a194:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a196:	e003      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	75fb      	strb	r3, [r7, #23]
      break;
 800a19c:	e000      	b.n	800a1a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800a19e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1a0:	7dfb      	ldrb	r3, [r7, #23]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d109      	bne.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a1a6:	4b77      	ldr	r3, [pc, #476]	; (800a384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1aa:	f023 0207 	bic.w	r2, r3, #7
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1b2:	4974      	ldr	r1, [pc, #464]	; (800a384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	654b      	str	r3, [r1, #84]	; 0x54
 800a1b8:	e001      	b.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ba:	7dfb      	ldrb	r3, [r7, #23]
 800a1bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 0304 	and.w	r3, r3, #4
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d03a      	beq.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1d0:	2b05      	cmp	r3, #5
 800a1d2:	d821      	bhi.n	800a218 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800a1d4:	a201      	add	r2, pc, #4	; (adr r2, 800a1dc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800a1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1da:	bf00      	nop
 800a1dc:	0800a21f 	.word	0x0800a21f
 800a1e0:	0800a1f5 	.word	0x0800a1f5
 800a1e4:	0800a207 	.word	0x0800a207
 800a1e8:	0800a21f 	.word	0x0800a21f
 800a1ec:	0800a21f 	.word	0x0800a21f
 800a1f0:	0800a21f 	.word	0x0800a21f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	3304      	adds	r3, #4
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f001 fb98 	bl	800b930 <RCCEx_PLL2_Config>
 800a200:	4603      	mov	r3, r0
 800a202:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a204:	e00c      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	3324      	adds	r3, #36	; 0x24
 800a20a:	2101      	movs	r1, #1
 800a20c:	4618      	mov	r0, r3
 800a20e:	f001 fc41 	bl	800ba94 <RCCEx_PLL3_Config>
 800a212:	4603      	mov	r3, r0
 800a214:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a216:	e003      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	75fb      	strb	r3, [r7, #23]
      break;
 800a21c:	e000      	b.n	800a220 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800a21e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a220:	7dfb      	ldrb	r3, [r7, #23]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10a      	bne.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a226:	4b57      	ldr	r3, [pc, #348]	; (800a384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a22a:	f023 0207 	bic.w	r2, r3, #7
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a234:	4953      	ldr	r1, [pc, #332]	; (800a384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a236:	4313      	orrs	r3, r2
 800a238:	658b      	str	r3, [r1, #88]	; 0x58
 800a23a:	e001      	b.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a23c:	7dfb      	ldrb	r3, [r7, #23]
 800a23e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 0320 	and.w	r3, r3, #32
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d04b      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a256:	d02e      	beq.n	800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a25c:	d828      	bhi.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a25e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a262:	d02a      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a268:	d822      	bhi.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a26a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a26e:	d026      	beq.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a270:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a274:	d81c      	bhi.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a27a:	d010      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800a27c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a280:	d816      	bhi.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a282:	2b00      	cmp	r3, #0
 800a284:	d01d      	beq.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800a286:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a28a:	d111      	bne.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3304      	adds	r3, #4
 800a290:	2100      	movs	r1, #0
 800a292:	4618      	mov	r0, r3
 800a294:	f001 fb4c 	bl	800b930 <RCCEx_PLL2_Config>
 800a298:	4603      	mov	r3, r0
 800a29a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a29c:	e012      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	3324      	adds	r3, #36	; 0x24
 800a2a2:	2102      	movs	r1, #2
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 fbf5 	bl	800ba94 <RCCEx_PLL3_Config>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a2ae:	e009      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2b4:	e006      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a2b6:	bf00      	nop
 800a2b8:	e004      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a2ba:	bf00      	nop
 800a2bc:	e002      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a2be:	bf00      	nop
 800a2c0:	e000      	b.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a2c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2c4:	7dfb      	ldrb	r3, [r7, #23]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10a      	bne.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a2ca:	4b2e      	ldr	r3, [pc, #184]	; (800a384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a2cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2d8:	492a      	ldr	r1, [pc, #168]	; (800a384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	654b      	str	r3, [r1, #84]	; 0x54
 800a2de:	e001      	b.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e0:	7dfb      	ldrb	r3, [r7, #23]
 800a2e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d04d      	beq.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a2fa:	d02e      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a2fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a300:	d828      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a306:	d02a      	beq.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a30c:	d822      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a30e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a312:	d026      	beq.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a314:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a318:	d81c      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a31a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a31e:	d010      	beq.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800a320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a324:	d816      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a326:	2b00      	cmp	r3, #0
 800a328:	d01d      	beq.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a32a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a32e:	d111      	bne.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3304      	adds	r3, #4
 800a334:	2100      	movs	r1, #0
 800a336:	4618      	mov	r0, r3
 800a338:	f001 fafa 	bl	800b930 <RCCEx_PLL2_Config>
 800a33c:	4603      	mov	r3, r0
 800a33e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a340:	e012      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	3324      	adds	r3, #36	; 0x24
 800a346:	2102      	movs	r1, #2
 800a348:	4618      	mov	r0, r3
 800a34a:	f001 fba3 	bl	800ba94 <RCCEx_PLL3_Config>
 800a34e:	4603      	mov	r3, r0
 800a350:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a352:	e009      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	75fb      	strb	r3, [r7, #23]
      break;
 800a358:	e006      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a35a:	bf00      	nop
 800a35c:	e004      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a35e:	bf00      	nop
 800a360:	e002      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a362:	bf00      	nop
 800a364:	e000      	b.n	800a368 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a366:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a368:	7dfb      	ldrb	r3, [r7, #23]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10c      	bne.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a36e:	4b05      	ldr	r3, [pc, #20]	; (800a384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a372:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a37c:	4901      	ldr	r1, [pc, #4]	; (800a384 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a37e:	4313      	orrs	r3, r2
 800a380:	658b      	str	r3, [r1, #88]	; 0x58
 800a382:	e003      	b.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a384:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a388:	7dfb      	ldrb	r3, [r7, #23]
 800a38a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a394:	2b00      	cmp	r3, #0
 800a396:	d04b      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a39e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a3a2:	d02e      	beq.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a3a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a3a8:	d828      	bhi.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a3aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3ae:	d02a      	beq.n	800a406 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a3b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3b4:	d822      	bhi.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a3b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3ba:	d026      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800a3bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a3c0:	d81c      	bhi.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a3c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3c6:	d010      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a3c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3cc:	d816      	bhi.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d01d      	beq.n	800a40e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800a3d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3d6:	d111      	bne.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	3304      	adds	r3, #4
 800a3dc:	2100      	movs	r1, #0
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f001 faa6 	bl	800b930 <RCCEx_PLL2_Config>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a3e8:	e012      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3324      	adds	r3, #36	; 0x24
 800a3ee:	2102      	movs	r1, #2
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f001 fb4f 	bl	800ba94 <RCCEx_PLL3_Config>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a3fa:	e009      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a400:	e006      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a402:	bf00      	nop
 800a404:	e004      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a406:	bf00      	nop
 800a408:	e002      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a40a:	bf00      	nop
 800a40c:	e000      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a40e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a410:	7dfb      	ldrb	r3, [r7, #23]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10a      	bne.n	800a42c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a416:	4b9d      	ldr	r3, [pc, #628]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a41a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a424:	4999      	ldr	r1, [pc, #612]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a426:	4313      	orrs	r3, r2
 800a428:	658b      	str	r3, [r1, #88]	; 0x58
 800a42a:	e001      	b.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
 800a42e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 0308 	and.w	r3, r3, #8
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d01a      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a446:	d10a      	bne.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	3324      	adds	r3, #36	; 0x24
 800a44c:	2102      	movs	r1, #2
 800a44e:	4618      	mov	r0, r3
 800a450:	f001 fb20 	bl	800ba94 <RCCEx_PLL3_Config>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a45e:	4b8b      	ldr	r3, [pc, #556]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a462:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a46c:	4987      	ldr	r1, [pc, #540]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a46e:	4313      	orrs	r3, r2
 800a470:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0310 	and.w	r3, r3, #16
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d01a      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a488:	d10a      	bne.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	3324      	adds	r3, #36	; 0x24
 800a48e:	2102      	movs	r1, #2
 800a490:	4618      	mov	r0, r3
 800a492:	f001 faff 	bl	800ba94 <RCCEx_PLL3_Config>
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a49c:	2301      	movs	r3, #1
 800a49e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a4a0:	4b7a      	ldr	r3, [pc, #488]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a4a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4ae:	4977      	ldr	r1, [pc, #476]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d034      	beq.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a4c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4ca:	d01d      	beq.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a4cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4d0:	d817      	bhi.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d003      	beq.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a4d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4da:	d009      	beq.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a4dc:	e011      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f001 fa23 	bl	800b930 <RCCEx_PLL2_Config>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a4ee:	e00c      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	3324      	adds	r3, #36	; 0x24
 800a4f4:	2102      	movs	r1, #2
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f001 facc 	bl	800ba94 <RCCEx_PLL3_Config>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a500:	e003      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	75fb      	strb	r3, [r7, #23]
      break;
 800a506:	e000      	b.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800a508:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a50a:	7dfb      	ldrb	r3, [r7, #23]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10a      	bne.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a510:	4b5e      	ldr	r3, [pc, #376]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a51e:	495b      	ldr	r1, [pc, #364]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a520:	4313      	orrs	r3, r2
 800a522:	658b      	str	r3, [r1, #88]	; 0x58
 800a524:	e001      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a526:	7dfb      	ldrb	r3, [r7, #23]
 800a528:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a532:	2b00      	cmp	r3, #0
 800a534:	d033      	beq.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a53c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a540:	d01c      	beq.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800a542:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a546:	d816      	bhi.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800a548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a54c:	d003      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a54e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a552:	d007      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800a554:	e00f      	b.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a556:	4b4d      	ldr	r3, [pc, #308]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55a:	4a4c      	ldr	r2, [pc, #304]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a55c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a560:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a562:	e00c      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	3324      	adds	r3, #36	; 0x24
 800a568:	2101      	movs	r1, #1
 800a56a:	4618      	mov	r0, r3
 800a56c:	f001 fa92 	bl	800ba94 <RCCEx_PLL3_Config>
 800a570:	4603      	mov	r3, r0
 800a572:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a574:	e003      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	75fb      	strb	r3, [r7, #23]
      break;
 800a57a:	e000      	b.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a57c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a57e:	7dfb      	ldrb	r3, [r7, #23]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10a      	bne.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a584:	4b41      	ldr	r3, [pc, #260]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a588:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a592:	493e      	ldr	r1, [pc, #248]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a594:	4313      	orrs	r3, r2
 800a596:	654b      	str	r3, [r1, #84]	; 0x54
 800a598:	e001      	b.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a59a:	7dfb      	ldrb	r3, [r7, #23]
 800a59c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d029      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a5b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5b6:	d007      	beq.n	800a5c8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a5b8:	e00f      	b.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5ba:	4b34      	ldr	r3, [pc, #208]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5be:	4a33      	ldr	r2, [pc, #204]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a5c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a5c6:	e00b      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	3304      	adds	r3, #4
 800a5cc:	2102      	movs	r1, #2
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f001 f9ae 	bl	800b930 <RCCEx_PLL2_Config>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a5d8:	e002      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	75fb      	strb	r3, [r7, #23]
      break;
 800a5de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d109      	bne.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a5e6:	4b29      	ldr	r3, [pc, #164]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a5e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5f2:	4926      	ldr	r1, [pc, #152]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a5f8:	e001      	b.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5fa:	7dfb      	ldrb	r3, [r7, #23]
 800a5fc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00a      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	3324      	adds	r3, #36	; 0x24
 800a60e:	2102      	movs	r1, #2
 800a610:	4618      	mov	r0, r3
 800a612:	f001 fa3f 	bl	800ba94 <RCCEx_PLL3_Config>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d033      	beq.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a634:	d017      	beq.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a63a:	d811      	bhi.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a63c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a640:	d013      	beq.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a646:	d80b      	bhi.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d010      	beq.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a64c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a650:	d106      	bne.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a652:	4b0e      	ldr	r3, [pc, #56]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a656:	4a0d      	ldr	r2, [pc, #52]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a65c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a65e:	e007      	b.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	75fb      	strb	r3, [r7, #23]
      break;
 800a664:	e004      	b.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a666:	bf00      	nop
 800a668:	e002      	b.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a66a:	bf00      	nop
 800a66c:	e000      	b.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a66e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a670:	7dfb      	ldrb	r3, [r7, #23]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10c      	bne.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a676:	4b05      	ldr	r3, [pc, #20]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a67a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a682:	4902      	ldr	r1, [pc, #8]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a684:	4313      	orrs	r3, r2
 800a686:	654b      	str	r3, [r1, #84]	; 0x54
 800a688:	e004      	b.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a68a:	bf00      	nop
 800a68c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a690:	7dfb      	ldrb	r3, [r7, #23]
 800a692:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d008      	beq.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a6a0:	4b31      	ldr	r3, [pc, #196]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a6a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ac:	492e      	ldr	r1, [pc, #184]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d009      	beq.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a6be:	4b2a      	ldr	r3, [pc, #168]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a6cc:	4926      	ldr	r1, [pc, #152]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d008      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a6de:	4b22      	ldr	r3, [pc, #136]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a6e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6e2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6ea:	491f      	ldr	r1, [pc, #124]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00d      	beq.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a6fc:	4b1a      	ldr	r3, [pc, #104]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	4a19      	ldr	r2, [pc, #100]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a702:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a706:	6113      	str	r3, [r2, #16]
 800a708:	4b17      	ldr	r3, [pc, #92]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a70a:	691a      	ldr	r2, [r3, #16]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a712:	4915      	ldr	r1, [pc, #84]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a714:	4313      	orrs	r3, r2
 800a716:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	da08      	bge.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a720:	4b11      	ldr	r3, [pc, #68]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a724:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a72c:	490e      	ldr	r1, [pc, #56]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a72e:	4313      	orrs	r3, r2
 800a730:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d009      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a73e:	4b0a      	ldr	r3, [pc, #40]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a742:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a74c:	4906      	ldr	r1, [pc, #24]	; (800a768 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a74e:	4313      	orrs	r3, r2
 800a750:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a752:	7dbb      	ldrb	r3, [r7, #22]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d101      	bne.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	e000      	b.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3718      	adds	r7, #24
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	58024400 	.word	0x58024400

0800a76c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b090      	sub	sp, #64	; 0x40
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a77a:	f040 8095 	bne.w	800a8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a77e:	4b97      	ldr	r3, [pc, #604]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a782:	f003 0307 	and.w	r3, r3, #7
 800a786:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	f200 8088 	bhi.w	800a8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a790:	a201      	add	r2, pc, #4	; (adr r2, 800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a796:	bf00      	nop
 800a798:	0800a7ad 	.word	0x0800a7ad
 800a79c:	0800a7d5 	.word	0x0800a7d5
 800a7a0:	0800a7fd 	.word	0x0800a7fd
 800a7a4:	0800a899 	.word	0x0800a899
 800a7a8:	0800a825 	.word	0x0800a825
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7ac:	4b8b      	ldr	r3, [pc, #556]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7b8:	d108      	bne.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f000 ff64 	bl	800b68c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a7c8:	f000 bc94 	b.w	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7d0:	f000 bc90 	b.w	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7d4:	4b81      	ldr	r3, [pc, #516]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7e0:	d108      	bne.n	800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7e2:	f107 0318 	add.w	r3, r7, #24
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f000 fca8 	bl	800b13c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a7f0:	f000 bc80 	b.w	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7f8:	f000 bc7c 	b.w	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7fc:	4b77      	ldr	r3, [pc, #476]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a808:	d108      	bne.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a80a:	f107 030c 	add.w	r3, r7, #12
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 fde8 	bl	800b3e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a818:	f000 bc6c 	b.w	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a820:	f000 bc68 	b.w	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a824:	4b6d      	ldr	r3, [pc, #436]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a826:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a828:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a82c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a82e:	4b6b      	ldr	r3, [pc, #428]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f003 0304 	and.w	r3, r3, #4
 800a836:	2b04      	cmp	r3, #4
 800a838:	d10c      	bne.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a83a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d109      	bne.n	800a854 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a840:	4b66      	ldr	r3, [pc, #408]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	08db      	lsrs	r3, r3, #3
 800a846:	f003 0303 	and.w	r3, r3, #3
 800a84a:	4a65      	ldr	r2, [pc, #404]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a84c:	fa22 f303 	lsr.w	r3, r2, r3
 800a850:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a852:	e01f      	b.n	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a854:	4b61      	ldr	r3, [pc, #388]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a85c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a860:	d106      	bne.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a864:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a868:	d102      	bne.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a86a:	4b5e      	ldr	r3, [pc, #376]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a86c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a86e:	e011      	b.n	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a870:	4b5a      	ldr	r3, [pc, #360]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a87c:	d106      	bne.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a884:	d102      	bne.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a886:	4b58      	ldr	r3, [pc, #352]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a88a:	e003      	b.n	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a890:	f000 bc30 	b.w	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a894:	f000 bc2e 	b.w	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a898:	4b54      	ldr	r3, [pc, #336]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a89a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a89c:	f000 bc2a 	b.w	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8a4:	f000 bc26 	b.w	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8ae:	f040 809f 	bne.w	800a9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a8b2:	4b4a      	ldr	r3, [pc, #296]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a8b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8b6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a8ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8c2:	d04d      	beq.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ca:	f200 8084 	bhi.w	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d0:	2bc0      	cmp	r3, #192	; 0xc0
 800a8d2:	d07d      	beq.n	800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d6:	2bc0      	cmp	r3, #192	; 0xc0
 800a8d8:	d87d      	bhi.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8dc:	2b80      	cmp	r3, #128	; 0x80
 800a8de:	d02d      	beq.n	800a93c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e2:	2b80      	cmp	r3, #128	; 0x80
 800a8e4:	d877      	bhi.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d003      	beq.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ee:	2b40      	cmp	r3, #64	; 0x40
 800a8f0:	d012      	beq.n	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a8f2:	e070      	b.n	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8f4:	4b39      	ldr	r3, [pc, #228]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a900:	d107      	bne.n	800a912 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a906:	4618      	mov	r0, r3
 800a908:	f000 fec0 	bl	800b68c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a90e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a910:	e3f0      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a916:	e3ed      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a918:	4b30      	ldr	r3, [pc, #192]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a924:	d107      	bne.n	800a936 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a926:	f107 0318 	add.w	r3, r7, #24
 800a92a:	4618      	mov	r0, r3
 800a92c:	f000 fc06 	bl	800b13c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a934:	e3de      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a936:	2300      	movs	r3, #0
 800a938:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a93a:	e3db      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a93c:	4b27      	ldr	r3, [pc, #156]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a948:	d107      	bne.n	800a95a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a94a:	f107 030c 	add.w	r3, r7, #12
 800a94e:	4618      	mov	r0, r3
 800a950:	f000 fd48 	bl	800b3e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a958:	e3cc      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a95a:	2300      	movs	r3, #0
 800a95c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a95e:	e3c9      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a960:	4b1e      	ldr	r3, [pc, #120]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a964:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a968:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a96a:	4b1c      	ldr	r3, [pc, #112]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 0304 	and.w	r3, r3, #4
 800a972:	2b04      	cmp	r3, #4
 800a974:	d10c      	bne.n	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d109      	bne.n	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a97c:	4b17      	ldr	r3, [pc, #92]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	08db      	lsrs	r3, r3, #3
 800a982:	f003 0303 	and.w	r3, r3, #3
 800a986:	4a16      	ldr	r2, [pc, #88]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a988:	fa22 f303 	lsr.w	r3, r2, r3
 800a98c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a98e:	e01e      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a990:	4b12      	ldr	r3, [pc, #72]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a99c:	d106      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800a99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9a4:	d102      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a9a6:	4b0f      	ldr	r3, [pc, #60]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9aa:	e010      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9ac:	4b0b      	ldr	r3, [pc, #44]	; (800a9dc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9b8:	d106      	bne.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800a9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9c0:	d102      	bne.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a9c2:	4b09      	ldr	r3, [pc, #36]	; (800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9c6:	e002      	b.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a9cc:	e392      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a9ce:	e391      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a9d0:	4b06      	ldr	r3, [pc, #24]	; (800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9d4:	e38e      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9da:	e38b      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a9dc:	58024400 	.word	0x58024400
 800a9e0:	03d09000 	.word	0x03d09000
 800a9e4:	003d0900 	.word	0x003d0900
 800a9e8:	017d7840 	.word	0x017d7840
 800a9ec:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9f6:	f040 809c 	bne.w	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a9fa:	4b9d      	ldr	r3, [pc, #628]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a9fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9fe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800aa02:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800aa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa0a:	d054      	beq.n	800aab6 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800aa0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa12:	f200 808b 	bhi.w	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800aa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa1c:	f000 8083 	beq.w	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800aa20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa26:	f200 8081 	bhi.w	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa30:	d02f      	beq.n	800aa92 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800aa32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa38:	d878      	bhi.n	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d004      	beq.n	800aa4a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800aa40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa46:	d012      	beq.n	800aa6e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800aa48:	e070      	b.n	800ab2c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa4a:	4b89      	ldr	r3, [pc, #548]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa56:	d107      	bne.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f000 fe15 	bl	800b68c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aa62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa66:	e345      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa6c:	e342      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa6e:	4b80      	ldr	r3, [pc, #512]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aa76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa7a:	d107      	bne.n	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa7c:	f107 0318 	add.w	r3, r7, #24
 800aa80:	4618      	mov	r0, r3
 800aa82:	f000 fb5b 	bl	800b13c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aa8a:	e333      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa90:	e330      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa92:	4b77      	ldr	r3, [pc, #476]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa9e:	d107      	bne.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaa0:	f107 030c 	add.w	r3, r7, #12
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f000 fc9d 	bl	800b3e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aaae:	e321      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aab0:	2300      	movs	r3, #0
 800aab2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aab4:	e31e      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aab6:	4b6e      	ldr	r3, [pc, #440]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aabe:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aac0:	4b6b      	ldr	r3, [pc, #428]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f003 0304 	and.w	r3, r3, #4
 800aac8:	2b04      	cmp	r3, #4
 800aaca:	d10c      	bne.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800aacc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d109      	bne.n	800aae6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aad2:	4b67      	ldr	r3, [pc, #412]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	08db      	lsrs	r3, r3, #3
 800aad8:	f003 0303 	and.w	r3, r3, #3
 800aadc:	4a65      	ldr	r2, [pc, #404]	; (800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800aade:	fa22 f303 	lsr.w	r3, r2, r3
 800aae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aae4:	e01e      	b.n	800ab24 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aae6:	4b62      	ldr	r3, [pc, #392]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaf2:	d106      	bne.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800aaf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aafa:	d102      	bne.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aafc:	4b5e      	ldr	r3, [pc, #376]	; (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800aafe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab00:	e010      	b.n	800ab24 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab02:	4b5b      	ldr	r3, [pc, #364]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab0e:	d106      	bne.n	800ab1e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ab10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab16:	d102      	bne.n	800ab1e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ab18:	4b58      	ldr	r3, [pc, #352]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800ab1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab1c:	e002      	b.n	800ab24 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ab22:	e2e7      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ab24:	e2e6      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ab26:	4b56      	ldr	r3, [pc, #344]	; (800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ab28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab2a:	e2e3      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab30:	e2e0      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab38:	f040 80a7 	bne.w	800ac8a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800ab3c:	4b4c      	ldr	r3, [pc, #304]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ab3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab40:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ab44:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab4c:	d055      	beq.n	800abfa <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800ab4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab54:	f200 8096 	bhi.w	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800ab58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab5e:	f000 8084 	beq.w	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800ab62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab68:	f200 808c 	bhi.w	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800ab6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab72:	d030      	beq.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab7a:	f200 8083 	bhi.w	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d004      	beq.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab8a:	d012      	beq.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800ab8c:	e07a      	b.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab8e:	4b38      	ldr	r3, [pc, #224]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab9a:	d107      	bne.n	800abac <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 fd73 	bl	800b68c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800abaa:	e2a3      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800abac:	2300      	movs	r3, #0
 800abae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abb0:	e2a0      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abb2:	4b2f      	ldr	r3, [pc, #188]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abbe:	d107      	bne.n	800abd0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abc0:	f107 0318 	add.w	r3, r7, #24
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 fab9 	bl	800b13c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800abce:	e291      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800abd0:	2300      	movs	r3, #0
 800abd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abd4:	e28e      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abd6:	4b26      	ldr	r3, [pc, #152]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abe2:	d107      	bne.n	800abf4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abe4:	f107 030c 	add.w	r3, r7, #12
 800abe8:	4618      	mov	r0, r3
 800abea:	f000 fbfb 	bl	800b3e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800abf2:	e27f      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800abf8:	e27c      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800abfa:	4b1d      	ldr	r3, [pc, #116]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800abfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac02:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac04:	4b1a      	ldr	r3, [pc, #104]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	f003 0304 	and.w	r3, r3, #4
 800ac0c:	2b04      	cmp	r3, #4
 800ac0e:	d10c      	bne.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800ac10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d109      	bne.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac16:	4b16      	ldr	r3, [pc, #88]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	08db      	lsrs	r3, r3, #3
 800ac1c:	f003 0303 	and.w	r3, r3, #3
 800ac20:	4a14      	ldr	r2, [pc, #80]	; (800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800ac22:	fa22 f303 	lsr.w	r3, r2, r3
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac28:	e01e      	b.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac2a:	4b11      	ldr	r3, [pc, #68]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac36:	d106      	bne.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800ac38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac3e:	d102      	bne.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ac40:	4b0d      	ldr	r3, [pc, #52]	; (800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800ac42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac44:	e010      	b.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac46:	4b0a      	ldr	r3, [pc, #40]	; (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac52:	d106      	bne.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800ac54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac5a:	d102      	bne.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ac5c:	4b07      	ldr	r3, [pc, #28]	; (800ac7c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800ac5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac60:	e002      	b.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ac62:	2300      	movs	r3, #0
 800ac64:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ac66:	e245      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ac68:	e244      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ac6a:	4b05      	ldr	r3, [pc, #20]	; (800ac80 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ac6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac6e:	e241      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ac70:	58024400 	.word	0x58024400
 800ac74:	03d09000 	.word	0x03d09000
 800ac78:	003d0900 	.word	0x003d0900
 800ac7c:	017d7840 	.word	0x017d7840
 800ac80:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800ac84:	2300      	movs	r3, #0
 800ac86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac88:	e234      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac90:	f040 809c 	bne.w	800adcc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800ac94:	4b9b      	ldr	r3, [pc, #620]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ac96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac98:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ac9c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ac9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aca4:	d054      	beq.n	800ad50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800aca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acac:	f200 808b 	bhi.w	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800acb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800acb6:	f000 8083 	beq.w	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800acba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800acc0:	f200 8081 	bhi.w	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800acc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acca:	d02f      	beq.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800accc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acd2:	d878      	bhi.n	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800acd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d004      	beq.n	800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800acda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ace0:	d012      	beq.n	800ad08 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800ace2:	e070      	b.n	800adc6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ace4:	4b87      	ldr	r3, [pc, #540]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acf0:	d107      	bne.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 fcc8 	bl	800b68c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad00:	e1f8      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad06:	e1f5      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad08:	4b7e      	ldr	r3, [pc, #504]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad14:	d107      	bne.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad16:	f107 0318 	add.w	r3, r7, #24
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f000 fa0e 	bl	800b13c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad24:	e1e6      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad2a:	e1e3      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad2c:	4b75      	ldr	r3, [pc, #468]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad38:	d107      	bne.n	800ad4a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad3a:	f107 030c 	add.w	r3, r7, #12
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f000 fb50 	bl	800b3e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad48:	e1d4      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad4e:	e1d1      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ad50:	4b6c      	ldr	r3, [pc, #432]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ad52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad58:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad5a:	4b6a      	ldr	r3, [pc, #424]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 0304 	and.w	r3, r3, #4
 800ad62:	2b04      	cmp	r3, #4
 800ad64:	d10c      	bne.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800ad66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d109      	bne.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad6c:	4b65      	ldr	r3, [pc, #404]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	08db      	lsrs	r3, r3, #3
 800ad72:	f003 0303 	and.w	r3, r3, #3
 800ad76:	4a64      	ldr	r2, [pc, #400]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ad78:	fa22 f303 	lsr.w	r3, r2, r3
 800ad7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad7e:	e01e      	b.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad80:	4b60      	ldr	r3, [pc, #384]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad8c:	d106      	bne.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800ad8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad94:	d102      	bne.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ad96:	4b5d      	ldr	r3, [pc, #372]	; (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ad98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad9a:	e010      	b.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad9c:	4b59      	ldr	r3, [pc, #356]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ada4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ada8:	d106      	bne.n	800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800adaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adb0:	d102      	bne.n	800adb8 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800adb2:	4b57      	ldr	r3, [pc, #348]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800adb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adb6:	e002      	b.n	800adbe <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800adb8:	2300      	movs	r3, #0
 800adba:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800adbc:	e19a      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800adbe:	e199      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800adc0:	4b54      	ldr	r3, [pc, #336]	; (800af14 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adc4:	e196      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adca:	e193      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800add2:	d173      	bne.n	800aebc <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800add4:	4b4b      	ldr	r3, [pc, #300]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800add6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800addc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800adde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ade4:	d02f      	beq.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800ade6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adec:	d863      	bhi.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800adee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d004      	beq.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adfa:	d012      	beq.n	800ae22 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800adfc:	e05b      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adfe:	4b41      	ldr	r3, [pc, #260]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae0a:	d107      	bne.n	800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae0c:	f107 0318 	add.w	r3, r7, #24
 800ae10:	4618      	mov	r0, r3
 800ae12:	f000 f993 	bl	800b13c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae1a:	e16b      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae20:	e168      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae22:	4b38      	ldr	r3, [pc, #224]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae2e:	d107      	bne.n	800ae40 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae30:	f107 030c 	add.w	r3, r7, #12
 800ae34:	4618      	mov	r0, r3
 800ae36:	f000 fad5 	bl	800b3e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae3e:	e159      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ae40:	2300      	movs	r3, #0
 800ae42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae44:	e156      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ae46:	4b2f      	ldr	r3, [pc, #188]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ae48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae4e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae50:	4b2c      	ldr	r3, [pc, #176]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 0304 	and.w	r3, r3, #4
 800ae58:	2b04      	cmp	r3, #4
 800ae5a:	d10c      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800ae5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d109      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ae62:	4b28      	ldr	r3, [pc, #160]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	08db      	lsrs	r3, r3, #3
 800ae68:	f003 0303 	and.w	r3, r3, #3
 800ae6c:	4a26      	ldr	r2, [pc, #152]	; (800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ae6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae74:	e01e      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae76:	4b23      	ldr	r3, [pc, #140]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae82:	d106      	bne.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800ae84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae8a:	d102      	bne.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ae8c:	4b1f      	ldr	r3, [pc, #124]	; (800af0c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ae8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae90:	e010      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae92:	4b1c      	ldr	r3, [pc, #112]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae9e:	d106      	bne.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800aea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aea6:	d102      	bne.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aea8:	4b19      	ldr	r3, [pc, #100]	; (800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800aeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeac:	e002      	b.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aeb2:	e11f      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aeb4:	e11e      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aeba:	e11b      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aec2:	d13e      	bne.n	800af42 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800aec4:	4b0f      	ldr	r3, [pc, #60]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aec8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aecc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800aece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d004      	beq.n	800aede <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800aed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aeda:	d01d      	beq.n	800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800aedc:	e02e      	b.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aede:	4b09      	ldr	r3, [pc, #36]	; (800af04 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aee6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aeea:	d107      	bne.n	800aefc <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aeec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 fbcb 	bl	800b68c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800aefa:	e0fb      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aefc:	2300      	movs	r3, #0
 800aefe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af00:	e0f8      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800af02:	bf00      	nop
 800af04:	58024400 	.word	0x58024400
 800af08:	03d09000 	.word	0x03d09000
 800af0c:	003d0900 	.word	0x003d0900
 800af10:	017d7840 	.word	0x017d7840
 800af14:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af18:	4b79      	ldr	r3, [pc, #484]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af24:	d107      	bne.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af26:	f107 0318 	add.w	r3, r7, #24
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 f906 	bl	800b13c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800af30:	6a3b      	ldr	r3, [r7, #32]
 800af32:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800af34:	e0de      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af3a:	e0db      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af40:	e0d8      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af48:	f040 8085 	bne.w	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800af4c:	4b6c      	ldr	r3, [pc, #432]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af50:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800af54:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800af56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af5c:	d06b      	beq.n	800b036 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800af5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af64:	d874      	bhi.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800af66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af6c:	d056      	beq.n	800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800af6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af74:	d86c      	bhi.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800af76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af7c:	d03b      	beq.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800af7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800af84:	d864      	bhi.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800af86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af8c:	d021      	beq.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800af8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af94:	d85c      	bhi.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800af96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d004      	beq.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800af9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afa2:	d004      	beq.n	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800afa4:	e054      	b.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800afa6:	f000 f8b3 	bl	800b110 <HAL_RCCEx_GetD3PCLK1Freq>
 800afaa:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800afac:	e0a2      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afae:	4b54      	ldr	r3, [pc, #336]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afba:	d107      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afbc:	f107 0318 	add.w	r3, r7, #24
 800afc0:	4618      	mov	r0, r3
 800afc2:	f000 f8bb 	bl	800b13c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800afca:	e093      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800afcc:	2300      	movs	r3, #0
 800afce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afd0:	e090      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800afd2:	4b4b      	ldr	r3, [pc, #300]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afde:	d107      	bne.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afe0:	f107 030c 	add.w	r3, r7, #12
 800afe4:	4618      	mov	r0, r3
 800afe6:	f000 f9fd 	bl	800b3e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800afee:	e081      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aff4:	e07e      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aff6:	4b42      	ldr	r3, [pc, #264]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f003 0304 	and.w	r3, r3, #4
 800affe:	2b04      	cmp	r3, #4
 800b000:	d109      	bne.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b002:	4b3f      	ldr	r3, [pc, #252]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	08db      	lsrs	r3, r3, #3
 800b008:	f003 0303 	and.w	r3, r3, #3
 800b00c:	4a3d      	ldr	r2, [pc, #244]	; (800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b00e:	fa22 f303 	lsr.w	r3, r2, r3
 800b012:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b014:	e06e      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b016:	2300      	movs	r3, #0
 800b018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b01a:	e06b      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b01c:	4b38      	ldr	r3, [pc, #224]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b028:	d102      	bne.n	800b030 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800b02a:	4b37      	ldr	r3, [pc, #220]	; (800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b02c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b02e:	e061      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b030:	2300      	movs	r3, #0
 800b032:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b034:	e05e      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b036:	4b32      	ldr	r3, [pc, #200]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b03e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b042:	d102      	bne.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800b044:	4b31      	ldr	r3, [pc, #196]	; (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b046:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b048:	e054      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b04e:	e051      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b050:	2300      	movs	r3, #0
 800b052:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b054:	e04e      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b05c:	d148      	bne.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b05e:	4b28      	ldr	r3, [pc, #160]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b062:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b066:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b06e:	d02a      	beq.n	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800b070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b076:	d838      	bhi.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800b078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d004      	beq.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800b07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b084:	d00d      	beq.n	800b0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800b086:	e030      	b.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b088:	4b1d      	ldr	r3, [pc, #116]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b094:	d102      	bne.n	800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800b096:	4b1d      	ldr	r3, [pc, #116]	; (800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b098:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b09a:	e02b      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b09c:	2300      	movs	r3, #0
 800b09e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0a0:	e028      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0a2:	4b17      	ldr	r3, [pc, #92]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0ae:	d107      	bne.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f000 fae9 	bl	800b68c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b0be:	e019      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0c4:	e016      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0c6:	4b0e      	ldr	r3, [pc, #56]	; (800b100 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0d2:	d107      	bne.n	800b0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0d4:	f107 0318 	add.w	r3, r7, #24
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f000 f82f 	bl	800b13c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b0e2:	e007      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0e8:	e004      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0ee:	e001      	b.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b0f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3740      	adds	r7, #64	; 0x40
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	58024400 	.word	0x58024400
 800b104:	03d09000 	.word	0x03d09000
 800b108:	003d0900 	.word	0x003d0900
 800b10c:	017d7840 	.word	0x017d7840

0800b110 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b114:	f7fe fb88 	bl	8009828 <HAL_RCC_GetHCLKFreq>
 800b118:	4602      	mov	r2, r0
 800b11a:	4b06      	ldr	r3, [pc, #24]	; (800b134 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b11c:	6a1b      	ldr	r3, [r3, #32]
 800b11e:	091b      	lsrs	r3, r3, #4
 800b120:	f003 0307 	and.w	r3, r3, #7
 800b124:	4904      	ldr	r1, [pc, #16]	; (800b138 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b126:	5ccb      	ldrb	r3, [r1, r3]
 800b128:	f003 031f 	and.w	r3, r3, #31
 800b12c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b130:	4618      	mov	r0, r3
 800b132:	bd80      	pop	{r7, pc}
 800b134:	58024400 	.word	0x58024400
 800b138:	080123d8 	.word	0x080123d8

0800b13c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b089      	sub	sp, #36	; 0x24
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b144:	4ba1      	ldr	r3, [pc, #644]	; (800b3cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b148:	f003 0303 	and.w	r3, r3, #3
 800b14c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b14e:	4b9f      	ldr	r3, [pc, #636]	; (800b3cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b152:	0b1b      	lsrs	r3, r3, #12
 800b154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b158:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b15a:	4b9c      	ldr	r3, [pc, #624]	; (800b3cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15e:	091b      	lsrs	r3, r3, #4
 800b160:	f003 0301 	and.w	r3, r3, #1
 800b164:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b166:	4b99      	ldr	r3, [pc, #612]	; (800b3cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b16a:	08db      	lsrs	r3, r3, #3
 800b16c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b170:	693a      	ldr	r2, [r7, #16]
 800b172:	fb02 f303 	mul.w	r3, r2, r3
 800b176:	ee07 3a90 	vmov	s15, r3
 800b17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b17e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 8111 	beq.w	800b3ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	f000 8083 	beq.w	800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b192:	69bb      	ldr	r3, [r7, #24]
 800b194:	2b02      	cmp	r3, #2
 800b196:	f200 80a1 	bhi.w	800b2dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d003      	beq.n	800b1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d056      	beq.n	800b254 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b1a6:	e099      	b.n	800b2dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1a8:	4b88      	ldr	r3, [pc, #544]	; (800b3cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 0320 	and.w	r3, r3, #32
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d02d      	beq.n	800b210 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b1b4:	4b85      	ldr	r3, [pc, #532]	; (800b3cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	08db      	lsrs	r3, r3, #3
 800b1ba:	f003 0303 	and.w	r3, r3, #3
 800b1be:	4a84      	ldr	r2, [pc, #528]	; (800b3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b1c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b1c4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	ee07 3a90 	vmov	s15, r3
 800b1cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	ee07 3a90 	vmov	s15, r3
 800b1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1de:	4b7b      	ldr	r3, [pc, #492]	; (800b3cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1e6:	ee07 3a90 	vmov	s15, r3
 800b1ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b1f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b20a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b20e:	e087      	b.n	800b320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	ee07 3a90 	vmov	s15, r3
 800b216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b21a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b21e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b222:	4b6a      	ldr	r3, [pc, #424]	; (800b3cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b22a:	ee07 3a90 	vmov	s15, r3
 800b22e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b232:	ed97 6a03 	vldr	s12, [r7, #12]
 800b236:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b23a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b23e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b252:	e065      	b.n	800b320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	ee07 3a90 	vmov	s15, r3
 800b25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b3dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b266:	4b59      	ldr	r3, [pc, #356]	; (800b3cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b26e:	ee07 3a90 	vmov	s15, r3
 800b272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b276:	ed97 6a03 	vldr	s12, [r7, #12]
 800b27a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b292:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b296:	e043      	b.n	800b320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	ee07 3a90 	vmov	s15, r3
 800b29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b3e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2aa:	4b48      	ldr	r3, [pc, #288]	; (800b3cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2b2:	ee07 3a90 	vmov	s15, r3
 800b2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2be:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2da:	e021      	b.n	800b320 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	ee07 3a90 	vmov	s15, r3
 800b2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b3dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ee:	4b37      	ldr	r3, [pc, #220]	; (800b3cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f6:	ee07 3a90 	vmov	s15, r3
 800b2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b302:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b30e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b31a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b31e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b320:	4b2a      	ldr	r3, [pc, #168]	; (800b3cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b324:	0a5b      	lsrs	r3, r3, #9
 800b326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b32a:	ee07 3a90 	vmov	s15, r3
 800b32e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b332:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b336:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b33a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b33e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b346:	ee17 2a90 	vmov	r2, s15
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b34e:	4b1f      	ldr	r3, [pc, #124]	; (800b3cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b352:	0c1b      	lsrs	r3, r3, #16
 800b354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b358:	ee07 3a90 	vmov	s15, r3
 800b35c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b360:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b364:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b368:	edd7 6a07 	vldr	s13, [r7, #28]
 800b36c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b374:	ee17 2a90 	vmov	r2, s15
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b37c:	4b13      	ldr	r3, [pc, #76]	; (800b3cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b380:	0e1b      	lsrs	r3, r3, #24
 800b382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b386:	ee07 3a90 	vmov	s15, r3
 800b38a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b38e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b392:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b396:	edd7 6a07 	vldr	s13, [r7, #28]
 800b39a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b39e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3a2:	ee17 2a90 	vmov	r2, s15
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b3aa:	e008      	b.n	800b3be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	609a      	str	r2, [r3, #8]
}
 800b3be:	bf00      	nop
 800b3c0:	3724      	adds	r7, #36	; 0x24
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	58024400 	.word	0x58024400
 800b3d0:	03d09000 	.word	0x03d09000
 800b3d4:	46000000 	.word	0x46000000
 800b3d8:	4c742400 	.word	0x4c742400
 800b3dc:	4a742400 	.word	0x4a742400
 800b3e0:	4bbebc20 	.word	0x4bbebc20

0800b3e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b089      	sub	sp, #36	; 0x24
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b3ec:	4ba1      	ldr	r3, [pc, #644]	; (800b674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f0:	f003 0303 	and.w	r3, r3, #3
 800b3f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b3f6:	4b9f      	ldr	r3, [pc, #636]	; (800b674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3fa:	0d1b      	lsrs	r3, r3, #20
 800b3fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b400:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b402:	4b9c      	ldr	r3, [pc, #624]	; (800b674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b406:	0a1b      	lsrs	r3, r3, #8
 800b408:	f003 0301 	and.w	r3, r3, #1
 800b40c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b40e:	4b99      	ldr	r3, [pc, #612]	; (800b674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b412:	08db      	lsrs	r3, r3, #3
 800b414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b418:	693a      	ldr	r2, [r7, #16]
 800b41a:	fb02 f303 	mul.w	r3, r2, r3
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b426:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	f000 8111 	beq.w	800b654 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b432:	69bb      	ldr	r3, [r7, #24]
 800b434:	2b02      	cmp	r3, #2
 800b436:	f000 8083 	beq.w	800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	f200 80a1 	bhi.w	800b584 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d003      	beq.n	800b450 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d056      	beq.n	800b4fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b44e:	e099      	b.n	800b584 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b450:	4b88      	ldr	r3, [pc, #544]	; (800b674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 0320 	and.w	r3, r3, #32
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d02d      	beq.n	800b4b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b45c:	4b85      	ldr	r3, [pc, #532]	; (800b674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	08db      	lsrs	r3, r3, #3
 800b462:	f003 0303 	and.w	r3, r3, #3
 800b466:	4a84      	ldr	r2, [pc, #528]	; (800b678 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b468:	fa22 f303 	lsr.w	r3, r2, r3
 800b46c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	ee07 3a90 	vmov	s15, r3
 800b474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	ee07 3a90 	vmov	s15, r3
 800b47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b486:	4b7b      	ldr	r3, [pc, #492]	; (800b674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b48a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b48e:	ee07 3a90 	vmov	s15, r3
 800b492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b496:	ed97 6a03 	vldr	s12, [r7, #12]
 800b49a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b67c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b49e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b4b6:	e087      	b.n	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	ee07 3a90 	vmov	s15, r3
 800b4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b680 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b4c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ca:	4b6a      	ldr	r3, [pc, #424]	; (800b674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4d2:	ee07 3a90 	vmov	s15, r3
 800b4d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b67c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b4fa:	e065      	b.n	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	ee07 3a90 	vmov	s15, r3
 800b502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b506:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b684 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b50a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b50e:	4b59      	ldr	r3, [pc, #356]	; (800b674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b516:	ee07 3a90 	vmov	s15, r3
 800b51a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b51e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b522:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b67c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b52a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b52e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b53a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b53e:	e043      	b.n	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	ee07 3a90 	vmov	s15, r3
 800b546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b54a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b688 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b54e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b552:	4b48      	ldr	r3, [pc, #288]	; (800b674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b55a:	ee07 3a90 	vmov	s15, r3
 800b55e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b562:	ed97 6a03 	vldr	s12, [r7, #12]
 800b566:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b67c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b56a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b56e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b57e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b582:	e021      	b.n	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	ee07 3a90 	vmov	s15, r3
 800b58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b684 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b596:	4b37      	ldr	r3, [pc, #220]	; (800b674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b59e:	ee07 3a90 	vmov	s15, r3
 800b5a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b67c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5c6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b5c8:	4b2a      	ldr	r3, [pc, #168]	; (800b674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5cc:	0a5b      	lsrs	r3, r3, #9
 800b5ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5d2:	ee07 3a90 	vmov	s15, r3
 800b5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b5de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ee:	ee17 2a90 	vmov	r2, s15
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b5f6:	4b1f      	ldr	r3, [pc, #124]	; (800b674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fa:	0c1b      	lsrs	r3, r3, #16
 800b5fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b600:	ee07 3a90 	vmov	s15, r3
 800b604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b60c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b610:	edd7 6a07 	vldr	s13, [r7, #28]
 800b614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b61c:	ee17 2a90 	vmov	r2, s15
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b624:	4b13      	ldr	r3, [pc, #76]	; (800b674 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b628:	0e1b      	lsrs	r3, r3, #24
 800b62a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b62e:	ee07 3a90 	vmov	s15, r3
 800b632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b63a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b63e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b64a:	ee17 2a90 	vmov	r2, s15
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b652:	e008      	b.n	800b666 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	609a      	str	r2, [r3, #8]
}
 800b666:	bf00      	nop
 800b668:	3724      	adds	r7, #36	; 0x24
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	58024400 	.word	0x58024400
 800b678:	03d09000 	.word	0x03d09000
 800b67c:	46000000 	.word	0x46000000
 800b680:	4c742400 	.word	0x4c742400
 800b684:	4a742400 	.word	0x4a742400
 800b688:	4bbebc20 	.word	0x4bbebc20

0800b68c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b089      	sub	sp, #36	; 0x24
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b694:	4ba0      	ldr	r3, [pc, #640]	; (800b918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b698:	f003 0303 	and.w	r3, r3, #3
 800b69c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b69e:	4b9e      	ldr	r3, [pc, #632]	; (800b918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6a2:	091b      	lsrs	r3, r3, #4
 800b6a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6a8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b6aa:	4b9b      	ldr	r3, [pc, #620]	; (800b918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ae:	f003 0301 	and.w	r3, r3, #1
 800b6b2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b6b4:	4b98      	ldr	r3, [pc, #608]	; (800b918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b8:	08db      	lsrs	r3, r3, #3
 800b6ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6be:	693a      	ldr	r2, [r7, #16]
 800b6c0:	fb02 f303 	mul.w	r3, r2, r3
 800b6c4:	ee07 3a90 	vmov	s15, r3
 800b6c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6cc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f000 8111 	beq.w	800b8fa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	f000 8083 	beq.w	800b7e6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	f200 80a1 	bhi.w	800b82a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d003      	beq.n	800b6f6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d056      	beq.n	800b7a2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b6f4:	e099      	b.n	800b82a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6f6:	4b88      	ldr	r3, [pc, #544]	; (800b918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f003 0320 	and.w	r3, r3, #32
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d02d      	beq.n	800b75e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b702:	4b85      	ldr	r3, [pc, #532]	; (800b918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	08db      	lsrs	r3, r3, #3
 800b708:	f003 0303 	and.w	r3, r3, #3
 800b70c:	4a83      	ldr	r2, [pc, #524]	; (800b91c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b70e:	fa22 f303 	lsr.w	r3, r2, r3
 800b712:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	ee07 3a90 	vmov	s15, r3
 800b71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	ee07 3a90 	vmov	s15, r3
 800b724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b72c:	4b7a      	ldr	r3, [pc, #488]	; (800b918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b734:	ee07 3a90 	vmov	s15, r3
 800b738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b73c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b740:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b920 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b744:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b74c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b754:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b758:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b75c:	e087      	b.n	800b86e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	ee07 3a90 	vmov	s15, r3
 800b764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b768:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b924 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b76c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b770:	4b69      	ldr	r3, [pc, #420]	; (800b918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b778:	ee07 3a90 	vmov	s15, r3
 800b77c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b780:	ed97 6a03 	vldr	s12, [r7, #12]
 800b784:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b920 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b788:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b78c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b79c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7a0:	e065      	b.n	800b86e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	ee07 3a90 	vmov	s15, r3
 800b7a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b928 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b7b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7b4:	4b58      	ldr	r3, [pc, #352]	; (800b918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7bc:	ee07 3a90 	vmov	s15, r3
 800b7c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b920 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7e4:	e043      	b.n	800b86e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	ee07 3a90 	vmov	s15, r3
 800b7ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b92c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b7f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7f8:	4b47      	ldr	r3, [pc, #284]	; (800b918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b800:	ee07 3a90 	vmov	s15, r3
 800b804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b808:	ed97 6a03 	vldr	s12, [r7, #12]
 800b80c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b920 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b81c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b820:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b824:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b828:	e021      	b.n	800b86e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	ee07 3a90 	vmov	s15, r3
 800b830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b834:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b924 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b83c:	4b36      	ldr	r3, [pc, #216]	; (800b918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b844:	ee07 3a90 	vmov	s15, r3
 800b848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b84c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b850:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b920 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b85c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b864:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b868:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b86c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b86e:	4b2a      	ldr	r3, [pc, #168]	; (800b918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b872:	0a5b      	lsrs	r3, r3, #9
 800b874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b878:	ee07 3a90 	vmov	s15, r3
 800b87c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b884:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b888:	edd7 6a07 	vldr	s13, [r7, #28]
 800b88c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b894:	ee17 2a90 	vmov	r2, s15
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b89c:	4b1e      	ldr	r3, [pc, #120]	; (800b918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a0:	0c1b      	lsrs	r3, r3, #16
 800b8a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8a6:	ee07 3a90 	vmov	s15, r3
 800b8aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8c2:	ee17 2a90 	vmov	r2, s15
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b8ca:	4b13      	ldr	r3, [pc, #76]	; (800b918 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ce:	0e1b      	lsrs	r3, r3, #24
 800b8d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8d4:	ee07 3a90 	vmov	s15, r3
 800b8d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8f0:	ee17 2a90 	vmov	r2, s15
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b8f8:	e008      	b.n	800b90c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2200      	movs	r2, #0
 800b904:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	609a      	str	r2, [r3, #8]
}
 800b90c:	bf00      	nop
 800b90e:	3724      	adds	r7, #36	; 0x24
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr
 800b918:	58024400 	.word	0x58024400
 800b91c:	03d09000 	.word	0x03d09000
 800b920:	46000000 	.word	0x46000000
 800b924:	4c742400 	.word	0x4c742400
 800b928:	4a742400 	.word	0x4a742400
 800b92c:	4bbebc20 	.word	0x4bbebc20

0800b930 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b93a:	2300      	movs	r3, #0
 800b93c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b93e:	4b53      	ldr	r3, [pc, #332]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800b940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b942:	f003 0303 	and.w	r3, r3, #3
 800b946:	2b03      	cmp	r3, #3
 800b948:	d101      	bne.n	800b94e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	e099      	b.n	800ba82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b94e:	4b4f      	ldr	r3, [pc, #316]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a4e      	ldr	r2, [pc, #312]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800b954:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b95a:	f7f7 fd05 	bl	8003368 <HAL_GetTick>
 800b95e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b960:	e008      	b.n	800b974 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b962:	f7f7 fd01 	bl	8003368 <HAL_GetTick>
 800b966:	4602      	mov	r2, r0
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d901      	bls.n	800b974 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b970:	2303      	movs	r3, #3
 800b972:	e086      	b.n	800ba82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b974:	4b45      	ldr	r3, [pc, #276]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1f0      	bne.n	800b962 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b980:	4b42      	ldr	r3, [pc, #264]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800b982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b984:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	031b      	lsls	r3, r3, #12
 800b98e:	493f      	ldr	r1, [pc, #252]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800b990:	4313      	orrs	r3, r2
 800b992:	628b      	str	r3, [r1, #40]	; 0x28
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	3b01      	subs	r3, #1
 800b99a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	025b      	lsls	r3, r3, #9
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	431a      	orrs	r2, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	3b01      	subs	r3, #1
 800b9b0:	041b      	lsls	r3, r3, #16
 800b9b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b9b6:	431a      	orrs	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	061b      	lsls	r3, r3, #24
 800b9c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b9c4:	4931      	ldr	r1, [pc, #196]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b9ca:	4b30      	ldr	r3, [pc, #192]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800b9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	695b      	ldr	r3, [r3, #20]
 800b9d6:	492d      	ldr	r1, [pc, #180]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b9dc:	4b2b      	ldr	r3, [pc, #172]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800b9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e0:	f023 0220 	bic.w	r2, r3, #32
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	699b      	ldr	r3, [r3, #24]
 800b9e8:	4928      	ldr	r1, [pc, #160]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b9ee:	4b27      	ldr	r3, [pc, #156]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800b9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f2:	4a26      	ldr	r2, [pc, #152]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800b9f4:	f023 0310 	bic.w	r3, r3, #16
 800b9f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b9fa:	4b24      	ldr	r3, [pc, #144]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800b9fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b9fe:	4b24      	ldr	r3, [pc, #144]	; (800ba90 <RCCEx_PLL2_Config+0x160>)
 800ba00:	4013      	ands	r3, r2
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	69d2      	ldr	r2, [r2, #28]
 800ba06:	00d2      	lsls	r2, r2, #3
 800ba08:	4920      	ldr	r1, [pc, #128]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ba0e:	4b1f      	ldr	r3, [pc, #124]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800ba10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba12:	4a1e      	ldr	r2, [pc, #120]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800ba14:	f043 0310 	orr.w	r3, r3, #16
 800ba18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d106      	bne.n	800ba2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ba20:	4b1a      	ldr	r3, [pc, #104]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800ba22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba24:	4a19      	ldr	r2, [pc, #100]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800ba26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ba2c:	e00f      	b.n	800ba4e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d106      	bne.n	800ba42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ba34:	4b15      	ldr	r3, [pc, #84]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800ba36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba38:	4a14      	ldr	r2, [pc, #80]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800ba3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ba40:	e005      	b.n	800ba4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ba42:	4b12      	ldr	r3, [pc, #72]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800ba44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba46:	4a11      	ldr	r2, [pc, #68]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800ba48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ba4e:	4b0f      	ldr	r3, [pc, #60]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4a0e      	ldr	r2, [pc, #56]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800ba54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ba58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba5a:	f7f7 fc85 	bl	8003368 <HAL_GetTick>
 800ba5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba60:	e008      	b.n	800ba74 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ba62:	f7f7 fc81 	bl	8003368 <HAL_GetTick>
 800ba66:	4602      	mov	r2, r0
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	1ad3      	subs	r3, r2, r3
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d901      	bls.n	800ba74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ba70:	2303      	movs	r3, #3
 800ba72:	e006      	b.n	800ba82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba74:	4b05      	ldr	r3, [pc, #20]	; (800ba8c <RCCEx_PLL2_Config+0x15c>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d0f0      	beq.n	800ba62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ba80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	58024400 	.word	0x58024400
 800ba90:	ffff0007 	.word	0xffff0007

0800ba94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800baa2:	4b53      	ldr	r3, [pc, #332]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800baa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baa6:	f003 0303 	and.w	r3, r3, #3
 800baaa:	2b03      	cmp	r3, #3
 800baac:	d101      	bne.n	800bab2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	e099      	b.n	800bbe6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bab2:	4b4f      	ldr	r3, [pc, #316]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a4e      	ldr	r2, [pc, #312]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800babc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800babe:	f7f7 fc53 	bl	8003368 <HAL_GetTick>
 800bac2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bac4:	e008      	b.n	800bad8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bac6:	f7f7 fc4f 	bl	8003368 <HAL_GetTick>
 800baca:	4602      	mov	r2, r0
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	1ad3      	subs	r3, r2, r3
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	d901      	bls.n	800bad8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bad4:	2303      	movs	r3, #3
 800bad6:	e086      	b.n	800bbe6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bad8:	4b45      	ldr	r3, [pc, #276]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d1f0      	bne.n	800bac6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bae4:	4b42      	ldr	r3, [pc, #264]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	051b      	lsls	r3, r3, #20
 800baf2:	493f      	ldr	r1, [pc, #252]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800baf4:	4313      	orrs	r3, r2
 800baf6:	628b      	str	r3, [r1, #40]	; 0x28
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	3b01      	subs	r3, #1
 800bafe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	3b01      	subs	r3, #1
 800bb08:	025b      	lsls	r3, r3, #9
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	431a      	orrs	r2, r3
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	3b01      	subs	r3, #1
 800bb14:	041b      	lsls	r3, r3, #16
 800bb16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bb1a:	431a      	orrs	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	691b      	ldr	r3, [r3, #16]
 800bb20:	3b01      	subs	r3, #1
 800bb22:	061b      	lsls	r3, r3, #24
 800bb24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bb28:	4931      	ldr	r1, [pc, #196]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bb2e:	4b30      	ldr	r3, [pc, #192]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	695b      	ldr	r3, [r3, #20]
 800bb3a:	492d      	ldr	r1, [pc, #180]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bb40:	4b2b      	ldr	r3, [pc, #172]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	699b      	ldr	r3, [r3, #24]
 800bb4c:	4928      	ldr	r1, [pc, #160]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bb52:	4b27      	ldr	r3, [pc, #156]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb56:	4a26      	ldr	r2, [pc, #152]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bb58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bb5e:	4b24      	ldr	r3, [pc, #144]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bb60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb62:	4b24      	ldr	r3, [pc, #144]	; (800bbf4 <RCCEx_PLL3_Config+0x160>)
 800bb64:	4013      	ands	r3, r2
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	69d2      	ldr	r2, [r2, #28]
 800bb6a:	00d2      	lsls	r2, r2, #3
 800bb6c:	4920      	ldr	r1, [pc, #128]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bb72:	4b1f      	ldr	r3, [pc, #124]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb76:	4a1e      	ldr	r2, [pc, #120]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bb78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d106      	bne.n	800bb92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bb84:	4b1a      	ldr	r3, [pc, #104]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb88:	4a19      	ldr	r2, [pc, #100]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bb8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bb8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bb90:	e00f      	b.n	800bbb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d106      	bne.n	800bba6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bb98:	4b15      	ldr	r3, [pc, #84]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bb9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9c:	4a14      	ldr	r2, [pc, #80]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bb9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bba2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bba4:	e005      	b.n	800bbb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bba6:	4b12      	ldr	r3, [pc, #72]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbaa:	4a11      	ldr	r2, [pc, #68]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bbac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bbb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bbb2:	4b0f      	ldr	r3, [pc, #60]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4a0e      	ldr	r2, [pc, #56]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bbb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbbe:	f7f7 fbd3 	bl	8003368 <HAL_GetTick>
 800bbc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bbc4:	e008      	b.n	800bbd8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bbc6:	f7f7 fbcf 	bl	8003368 <HAL_GetTick>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	1ad3      	subs	r3, r2, r3
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	d901      	bls.n	800bbd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	e006      	b.n	800bbe6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bbd8:	4b05      	ldr	r3, [pc, #20]	; (800bbf0 <RCCEx_PLL3_Config+0x15c>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d0f0      	beq.n	800bbc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bbe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	58024400 	.word	0x58024400
 800bbf4:	ffff0007 	.word	0xffff0007

0800bbf8 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
 800bc04:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d904      	bls.n	800bc16 <HAL_SAI_InitProtocol+0x1e>
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	3b03      	subs	r3, #3
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d812      	bhi.n	800bc3a <HAL_SAI_InitProtocol+0x42>
 800bc14:	e008      	b.n	800bc28 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	68b9      	ldr	r1, [r7, #8]
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	f000 fc11 	bl	800c444 <SAI_InitI2S>
 800bc22:	4603      	mov	r3, r0
 800bc24:	75fb      	strb	r3, [r7, #23]
      break;
 800bc26:	e00b      	b.n	800bc40 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	68b9      	ldr	r1, [r7, #8]
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f000 fcb6 	bl	800c5a0 <SAI_InitPCM>
 800bc34:	4603      	mov	r3, r0
 800bc36:	75fb      	strb	r3, [r7, #23]
      break;
 800bc38:	e002      	b.n	800bc40 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	75fb      	strb	r3, [r7, #23]
      break;
 800bc3e:	bf00      	nop
  }

  if (status == HAL_OK)
 800bc40:	7dfb      	ldrb	r3, [r7, #23]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d104      	bne.n	800bc50 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f000 f808 	bl	800bc5c <HAL_SAI_Init>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800bc50:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3718      	adds	r7, #24
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}
	...

0800bc5c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b08a      	sub	sp, #40	; 0x28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e283      	b.n	800c176 <HAL_SAI_Init+0x51a>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X) 
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800bc6e:	f7f7 fbab 	bl	80033c8 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d113      	bne.n	800bca4 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	4a94      	ldr	r2, [pc, #592]	; (800bed4 <HAL_SAI_Init+0x278>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d004      	beq.n	800bc90 <HAL_SAI_Init+0x34>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a93      	ldr	r2, [pc, #588]	; (800bed8 <HAL_SAI_Init+0x27c>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d107      	bne.n	800bca0 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d103      	bne.n	800bca0 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d001      	beq.n	800bca4 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	e268      	b.n	800c176 <HAL_SAI_Init+0x51a>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a8a      	ldr	r2, [pc, #552]	; (800bed4 <HAL_SAI_Init+0x278>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d004      	beq.n	800bcb8 <HAL_SAI_Init+0x5c>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a8a      	ldr	r2, [pc, #552]	; (800bedc <HAL_SAI_Init+0x280>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d102      	bne.n	800bcbe <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800bcb8:	4b89      	ldr	r3, [pc, #548]	; (800bee0 <HAL_SAI_Init+0x284>)
 800bcba:	61bb      	str	r3, [r7, #24]
 800bcbc:	e028      	b.n	800bd10 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a88      	ldr	r2, [pc, #544]	; (800bee4 <HAL_SAI_Init+0x288>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d004      	beq.n	800bcd2 <HAL_SAI_Init+0x76>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a86      	ldr	r2, [pc, #536]	; (800bee8 <HAL_SAI_Init+0x28c>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d102      	bne.n	800bcd8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800bcd2:	4b86      	ldr	r3, [pc, #536]	; (800beec <HAL_SAI_Init+0x290>)
 800bcd4:	61bb      	str	r3, [r7, #24]
 800bcd6:	e01b      	b.n	800bd10 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a84      	ldr	r2, [pc, #528]	; (800bef0 <HAL_SAI_Init+0x294>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d004      	beq.n	800bcec <HAL_SAI_Init+0x90>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a83      	ldr	r2, [pc, #524]	; (800bef4 <HAL_SAI_Init+0x298>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d102      	bne.n	800bcf2 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800bcec:	4b82      	ldr	r3, [pc, #520]	; (800bef8 <HAL_SAI_Init+0x29c>)
 800bcee:	61bb      	str	r3, [r7, #24]
 800bcf0:	e00e      	b.n	800bd10 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a78      	ldr	r2, [pc, #480]	; (800bed8 <HAL_SAI_Init+0x27c>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d004      	beq.n	800bd06 <HAL_SAI_Init+0xaa>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a7e      	ldr	r2, [pc, #504]	; (800befc <HAL_SAI_Init+0x2a0>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d102      	bne.n	800bd0c <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800bd06:	4b7e      	ldr	r3, [pc, #504]	; (800bf00 <HAL_SAI_Init+0x2a4>)
 800bd08:	61bb      	str	r3, [r7, #24]
 800bd0a:	e001      	b.n	800bd10 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	e232      	b.n	800c176 <HAL_SAI_Init+0x51a>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d106      	bne.n	800bd2a <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f7f6 fc6b 	bl	8002600 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fcf2 	bl	800c714 <SAI_Disable>
 800bd30:	4603      	mov	r3, r0
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d001      	beq.n	800bd3a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	e21d      	b.n	800c176 <HAL_SAI_Init+0x51a>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2202      	movs	r2, #2
 800bd3e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	68db      	ldr	r3, [r3, #12]
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	d00c      	beq.n	800bd64 <HAL_SAI_Init+0x108>
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d80d      	bhi.n	800bd6a <HAL_SAI_Init+0x10e>
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d002      	beq.n	800bd58 <HAL_SAI_Init+0xfc>
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d003      	beq.n	800bd5e <HAL_SAI_Init+0x102>
 800bd56:	e008      	b.n	800bd6a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bd5c:	e008      	b.n	800bd70 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bd5e:	2310      	movs	r3, #16
 800bd60:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bd62:	e005      	b.n	800bd70 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800bd64:	2320      	movs	r3, #32
 800bd66:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bd68:	e002      	b.n	800bd70 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bd6e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	2b05      	cmp	r3, #5
 800bd76:	d832      	bhi.n	800bdde <HAL_SAI_Init+0x182>
 800bd78:	a201      	add	r2, pc, #4	; (adr r2, 800bd80 <HAL_SAI_Init+0x124>)
 800bd7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7e:	bf00      	nop
 800bd80:	0800bd99 	.word	0x0800bd99
 800bd84:	0800bd9f 	.word	0x0800bd9f
 800bd88:	0800bda7 	.word	0x0800bda7
 800bd8c:	0800bdaf 	.word	0x0800bdaf
 800bd90:	0800bdbf 	.word	0x0800bdbf
 800bd94:	0800bdcf 	.word	0x0800bdcf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	61fb      	str	r3, [r7, #28]
      break;
 800bd9c:	e022      	b.n	800bde4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800bd9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bda2:	61fb      	str	r3, [r7, #28]
      break;
 800bda4:	e01e      	b.n	800bde4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bda6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bdaa:	61fb      	str	r3, [r7, #28]
      break;
 800bdac:	e01a      	b.n	800bde4 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bdae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bdb2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb6:	f043 0301 	orr.w	r3, r3, #1
 800bdba:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bdbc:	e012      	b.n	800bde4 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bdbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bdc2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	f043 0302 	orr.w	r3, r3, #2
 800bdca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bdcc:	e00a      	b.n	800bde4 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bdce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bdd2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800bdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd6:	f043 0303 	orr.w	r3, r3, #3
 800bdda:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800bddc:	e002      	b.n	800bde4 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800bdde:	2300      	movs	r3, #0
 800bde0:	61fb      	str	r3, [r7, #28]
      break;
 800bde2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800bde4:	69bb      	ldr	r3, [r7, #24]
 800bde6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bde8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	f000 80ba 	beq.w	800bf68 <HAL_SAI_Init+0x30c>
  {
    uint32_t freq = 0;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a35      	ldr	r2, [pc, #212]	; (800bed4 <HAL_SAI_Init+0x278>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d004      	beq.n	800be0c <HAL_SAI_Init+0x1b0>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a35      	ldr	r2, [pc, #212]	; (800bedc <HAL_SAI_Init+0x280>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d104      	bne.n	800be16 <HAL_SAI_Init+0x1ba>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800be0c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800be10:	f7fe fcac 	bl	800a76c <HAL_RCCEx_GetPeriphCLKFreq>
 800be14:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a32      	ldr	r2, [pc, #200]	; (800bee4 <HAL_SAI_Init+0x288>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d004      	beq.n	800be2a <HAL_SAI_Init+0x1ce>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a30      	ldr	r2, [pc, #192]	; (800bee8 <HAL_SAI_Init+0x28c>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d104      	bne.n	800be34 <HAL_SAI_Init+0x1d8>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800be2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800be2e:	f7fe fc9d 	bl	800a76c <HAL_RCCEx_GetPeriphCLKFreq>
 800be32:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a2d      	ldr	r2, [pc, #180]	; (800bef0 <HAL_SAI_Init+0x294>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d004      	beq.n	800be48 <HAL_SAI_Init+0x1ec>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a2c      	ldr	r2, [pc, #176]	; (800bef4 <HAL_SAI_Init+0x298>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d104      	bne.n	800be52 <HAL_SAI_Init+0x1f6>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800be48:	f44f 7000 	mov.w	r0, #512	; 0x200
 800be4c:	f7fe fc8e 	bl	800a76c <HAL_RCCEx_GetPeriphCLKFreq>
 800be50:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a20      	ldr	r2, [pc, #128]	; (800bed8 <HAL_SAI_Init+0x27c>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d104      	bne.n	800be66 <HAL_SAI_Init+0x20a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800be5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800be60:	f7fe fc84 	bl	800a76c <HAL_RCCEx_GetPeriphCLKFreq>
 800be64:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a24      	ldr	r2, [pc, #144]	; (800befc <HAL_SAI_Init+0x2a0>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d104      	bne.n	800be7a <HAL_SAI_Init+0x21e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800be70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800be74:	f7fe fc7a 	bl	800a76c <HAL_RCCEx_GetPeriphCLKFreq>
 800be78:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	699b      	ldr	r3, [r3, #24]
 800be7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800be82:	d120      	bne.n	800bec6 <HAL_SAI_Init+0x26a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be88:	2b04      	cmp	r3, #4
 800be8a:	d102      	bne.n	800be92 <HAL_SAI_Init+0x236>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = 64U;
 800be8c:	2340      	movs	r3, #64	; 0x40
 800be8e:	60fb      	str	r3, [r7, #12]
 800be90:	e00a      	b.n	800bea8 <HAL_SAI_Init+0x24c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be96:	2b08      	cmp	r3, #8
 800be98:	d103      	bne.n	800bea2 <HAL_SAI_Init+0x246>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = 256U;
 800be9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be9e:	60fb      	str	r3, [r7, #12]
 800bea0:	e002      	b.n	800bea8 <HAL_SAI_Init+0x24c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bea6:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800bea8:	697a      	ldr	r2, [r7, #20]
 800beaa:	4613      	mov	r3, r2
 800beac:	009b      	lsls	r3, r3, #2
 800beae:	4413      	add	r3, r2
 800beb0:	005b      	lsls	r3, r3, #1
 800beb2:	4619      	mov	r1, r3
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6a1b      	ldr	r3, [r3, #32]
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	fb02 f303 	mul.w	r3, r2, r3
 800bebe:	fbb1 f3f3 	udiv	r3, r1, r3
 800bec2:	613b      	str	r3, [r7, #16]
 800bec4:	e02f      	b.n	800bf26 <HAL_SAI_Init+0x2ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bece:	d119      	bne.n	800bf04 <HAL_SAI_Init+0x2a8>
 800bed0:	2302      	movs	r3, #2
 800bed2:	e018      	b.n	800bf06 <HAL_SAI_Init+0x2aa>
 800bed4:	40015804 	.word	0x40015804
 800bed8:	58005404 	.word	0x58005404
 800bedc:	40015824 	.word	0x40015824
 800bee0:	40015800 	.word	0x40015800
 800bee4:	40015c04 	.word	0x40015c04
 800bee8:	40015c24 	.word	0x40015c24
 800beec:	40015c00 	.word	0x40015c00
 800bef0:	40016004 	.word	0x40016004
 800bef4:	40016024 	.word	0x40016024
 800bef8:	40016000 	.word	0x40016000
 800befc:	58005424 	.word	0x58005424
 800bf00:	58005400 	.word	0x58005400
 800bf04:	2301      	movs	r3, #1
 800bf06:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800bf08:	697a      	ldr	r2, [r7, #20]
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	4413      	add	r3, r2
 800bf10:	005b      	lsls	r3, r3, #1
 800bf12:	4619      	mov	r1, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a1b      	ldr	r3, [r3, #32]
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	fb02 f303 	mul.w	r3, r2, r3
 800bf1e:	021b      	lsls	r3, r3, #8
 800bf20:	fbb1 f3f3 	udiv	r3, r1, r3
 800bf24:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	4a95      	ldr	r2, [pc, #596]	; (800c180 <HAL_SAI_Init+0x524>)
 800bf2a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf2e:	08da      	lsrs	r2, r3, #3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800bf34:	6939      	ldr	r1, [r7, #16]
 800bf36:	4b92      	ldr	r3, [pc, #584]	; (800c180 <HAL_SAI_Init+0x524>)
 800bf38:	fba3 2301 	umull	r2, r3, r3, r1
 800bf3c:	08da      	lsrs	r2, r3, #3
 800bf3e:	4613      	mov	r3, r2
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	4413      	add	r3, r2
 800bf44:	005b      	lsls	r3, r3, #1
 800bf46:	1aca      	subs	r2, r1, r3
 800bf48:	2a08      	cmp	r2, #8
 800bf4a:	d904      	bls.n	800bf56 <HAL_SAI_Init+0x2fa>
    {
      hsai->Init.Mckdiv += 1U;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf50:	1c5a      	adds	r2, r3, #1
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf5a:	2b04      	cmp	r3, #4
 800bf5c:	d104      	bne.n	800bf68 <HAL_SAI_Init+0x30c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf62:	085a      	lsrs	r2, r3, #1
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d003      	beq.n	800bf78 <HAL_SAI_Init+0x31c>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d109      	bne.n	800bf8c <HAL_SAI_Init+0x330>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d101      	bne.n	800bf84 <HAL_SAI_Init+0x328>
 800bf80:	2300      	movs	r3, #0
 800bf82:	e001      	b.n	800bf88 <HAL_SAI_Init+0x32c>
 800bf84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf88:	623b      	str	r3, [r7, #32]
 800bf8a:	e008      	b.n	800bf9e <HAL_SAI_Init+0x342>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d102      	bne.n	800bf9a <HAL_SAI_Init+0x33e>
 800bf94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf98:	e000      	b.n	800bf9c <HAL_SAI_Init+0x340>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800bf9e:	f7f7 fa13 	bl	80033c8 <HAL_GetREVID>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfa8:	d331      	bcc.n	800c00e <HAL_SAI_Init+0x3b2>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	6819      	ldr	r1, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	4b73      	ldr	r3, [pc, #460]	; (800c184 <HAL_SAI_Init+0x528>)
 800bfb6:	400b      	ands	r3, r1
 800bfb8:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	6819      	ldr	r1, [r3, #0]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	685a      	ldr	r2, [r3, #4]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfc8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bfce:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfd4:	431a      	orrs	r2, r3
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800bfe2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	695b      	ldr	r3, [r3, #20]
 800bfe8:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bfee:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff4:	051b      	lsls	r3, r3, #20
 800bff6:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800bffc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	430a      	orrs	r2, r1
 800c00a:	601a      	str	r2, [r3, #0]
 800c00c:	e02d      	b.n	800c06a <HAL_SAI_Init+0x40e>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6819      	ldr	r1, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	4b5b      	ldr	r3, [pc, #364]	; (800c188 <HAL_SAI_Init+0x52c>)
 800c01a:	400b      	ands	r3, r1
 800c01c:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6819      	ldr	r1, [r3, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685a      	ldr	r2, [r3, #4]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c02c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c032:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c038:	431a      	orrs	r2, r3
 800c03a:	6a3b      	ldr	r3, [r7, #32]
 800c03c:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800c03e:	69fb      	ldr	r3, [r7, #28]
 800c040:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800c046:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	695b      	ldr	r3, [r3, #20]
 800c04c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c052:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c058:	051b      	lsls	r3, r3, #20
 800c05a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c060:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	430a      	orrs	r2, r1
 800c068:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	6859      	ldr	r1, [r3, #4]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	4b45      	ldr	r3, [pc, #276]	; (800c18c <HAL_SAI_Init+0x530>)
 800c076:	400b      	ands	r3, r1
 800c078:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	6859      	ldr	r1, [r3, #4]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	69da      	ldr	r2, [r3, #28]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c088:	431a      	orrs	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c08e:	431a      	orrs	r2, r3
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	430a      	orrs	r2, r1
 800c096:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6899      	ldr	r1, [r3, #8]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681a      	ldr	r2, [r3, #0]
 800c0a2:	4b3b      	ldr	r3, [pc, #236]	; (800c190 <HAL_SAI_Init+0x534>)
 800c0a4:	400b      	ands	r3, r1
 800c0a6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	6899      	ldr	r1, [r3, #8]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0b2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c0b8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800c0be:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800c0c4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c0ce:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	430a      	orrs	r2, r1
 800c0d6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	68d9      	ldr	r1, [r3, #12]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	f24f 0320 	movw	r3, #61472	; 0xf020
 800c0e6:	400b      	ands	r3, r1
 800c0e8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	68d9      	ldr	r1, [r3, #12]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0f8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0fe:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c100:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c106:	3b01      	subs	r3, #1
 800c108:	021b      	lsls	r3, r3, #8
 800c10a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	430a      	orrs	r2, r1
 800c112:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a1e      	ldr	r2, [pc, #120]	; (800c194 <HAL_SAI_Init+0x538>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d004      	beq.n	800c128 <HAL_SAI_Init+0x4cc>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a1d      	ldr	r2, [pc, #116]	; (800c198 <HAL_SAI_Init+0x53c>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d119      	bne.n	800c15c <HAL_SAI_Init+0x500>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c12c:	f023 0201 	bic.w	r2, r3, #1
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d10e      	bne.n	800c15c <HAL_SAI_Init+0x500>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c146:	3b01      	subs	r3, #1
 800c148:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800c14a:	431a      	orrs	r2, r3
 800c14c:	69bb      	ldr	r3, [r7, #24]
 800c14e:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c154:	f043 0201 	orr.w	r2, r3, #1
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2201      	movs	r2, #1
 800c168:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	3728      	adds	r7, #40	; 0x28
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	cccccccd 	.word	0xcccccccd
 800c184:	f005c010 	.word	0xf005c010
 800c188:	f805c010 	.word	0xf805c010
 800c18c:	ffff1ff0 	.word	0xffff1ff0
 800c190:	fff88000 	.word	0xfff88000
 800c194:	40015804 	.word	0x40015804
 800c198:	58005404 	.word	0x58005404

0800c19c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b086      	sub	sp, #24
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	60b9      	str	r1, [r7, #8]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800c1aa:	f7f7 f8dd 	bl	8003368 <HAL_GetTick>
 800c1ae:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d002      	beq.n	800c1bc <HAL_SAI_Transmit_DMA+0x20>
 800c1b6:	88fb      	ldrh	r3, [r7, #6]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d101      	bne.n	800c1c0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800c1bc:	2301      	movs	r3, #1
 800c1be:	e098      	b.n	800c2f2 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c1c6:	b2db      	uxtb	r3, r3
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	f040 8091 	bne.w	800c2f0 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d101      	bne.n	800c1dc <HAL_SAI_Transmit_DMA+0x40>
 800c1d8:	2302      	movs	r3, #2
 800c1da:	e08a      	b.n	800c2f2 <HAL_SAI_Transmit_DMA+0x156>
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	88fa      	ldrh	r2, [r7, #6]
 800c1ee:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	88fa      	ldrh	r2, [r7, #6]
 800c1f6:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2212      	movs	r2, #18
 800c206:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c210:	4a3a      	ldr	r2, [pc, #232]	; (800c2fc <HAL_SAI_Transmit_DMA+0x160>)
 800c212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c21a:	4a39      	ldr	r2, [pc, #228]	; (800c300 <HAL_SAI_Transmit_DMA+0x164>)
 800c21c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c224:	4a37      	ldr	r2, [pc, #220]	; (800c304 <HAL_SAI_Transmit_DMA+0x168>)
 800c226:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c22e:	2200      	movs	r2, #0
 800c230:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c23c:	4619      	mov	r1, r3
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	331c      	adds	r3, #28
 800c244:	461a      	mov	r2, r3
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800c24c:	f7f9 fab0 	bl	80057b0 <HAL_DMA_Start_IT>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d005      	beq.n	800c262 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	2200      	movs	r2, #0
 800c25a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800c25e:	2301      	movs	r3, #1
 800c260:	e047      	b.n	800c2f2 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c262:	2100      	movs	r1, #0
 800c264:	68f8      	ldr	r0, [r7, #12]
 800c266:	f000 fa1d 	bl	800c6a4 <SAI_InterruptFlag>
 800c26a:	4601      	mov	r1, r0
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	691a      	ldr	r2, [r3, #16]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	430a      	orrs	r2, r1
 800c278:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c288:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c28a:	e015      	b.n	800c2b8 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800c28c:	f7f7 f86c 	bl	8003368 <HAL_GetTick>
 800c290:	4602      	mov	r2, r0
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	1ad3      	subs	r3, r2, r3
 800c296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c29a:	d90d      	bls.n	800c2b8 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

        return HAL_TIMEOUT;
 800c2b4:	2303      	movs	r3, #3
 800c2b6:	e01c      	b.n	800c2f2 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	695b      	ldr	r3, [r3, #20]
 800c2be:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d0e2      	beq.n	800c28c <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d107      	bne.n	800c2e4 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c2e2:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	e000      	b.n	800c2f2 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 800c2f0:	2302      	movs	r3, #2
  }
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3718      	adds	r7, #24
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	0800c7e9 	.word	0x0800c7e9
 800c300:	0800c789 	.word	0x0800c789
 800c304:	0800c881 	.word	0x0800c881

0800c308 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	4613      	mov	r3, r2
 800c314:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <HAL_SAI_Receive_DMA+0x1a>
 800c31c:	88fb      	ldrh	r3, [r7, #6]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d101      	bne.n	800c326 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	e079      	b.n	800c41a <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d172      	bne.n	800c418 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d101      	bne.n	800c340 <HAL_SAI_Receive_DMA+0x38>
 800c33c:	2302      	movs	r3, #2
 800c33e:	e06c      	b.n	800c41a <HAL_SAI_Receive_DMA+0x112>
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2201      	movs	r2, #1
 800c344:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    hsai->pBuffPtr = pData;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	68ba      	ldr	r2, [r7, #8]
 800c34c:	679a      	str	r2, [r3, #120]	; 0x78
    hsai->XferSize = Size;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	88fa      	ldrh	r2, [r7, #6]
 800c352:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
    hsai->XferCount = Size;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	88fa      	ldrh	r2, [r7, #6]
 800c35a:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	2200      	movs	r2, #0
 800c362:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2222      	movs	r2, #34	; 0x22
 800c36a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c374:	4a2b      	ldr	r2, [pc, #172]	; (800c424 <HAL_SAI_Receive_DMA+0x11c>)
 800c376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c37e:	4a2a      	ldr	r2, [pc, #168]	; (800c428 <HAL_SAI_Receive_DMA+0x120>)
 800c380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c388:	4a28      	ldr	r2, [pc, #160]	; (800c42c <HAL_SAI_Receive_DMA+0x124>)
 800c38a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c392:	2200      	movs	r2, #0
 800c394:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	331c      	adds	r3, #28
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800c3b0:	f7f9 f9fe 	bl	80057b0 <HAL_DMA_Start_IT>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d005      	beq.n	800c3c6 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      return  HAL_ERROR;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e029      	b.n	800c41a <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f000 f96b 	bl	800c6a4 <SAI_InterruptFlag>
 800c3ce:	4601      	mov	r1, r0
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	691a      	ldr	r2, [r3, #16]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	430a      	orrs	r2, r1
 800c3dc:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c3ec:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d107      	bne.n	800c40c <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800c40a:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2200      	movs	r2, #0
 800c410:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

    return HAL_OK;
 800c414:	2300      	movs	r3, #0
 800c416:	e000      	b.n	800c41a <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 800c418:	2302      	movs	r3, #2
  }
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3710      	adds	r7, #16
 800c41e:	46bd      	mov	sp, r7
 800c420:	bd80      	pop	{r7, pc}
 800c422:	bf00      	nop
 800c424:	0800c865 	.word	0x0800c865
 800c428:	0800c805 	.word	0x0800c805
 800c42c:	0800c881 	.word	0x0800c881

0800c430 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800c438:	bf00      	nop
 800c43a:	370c      	adds	r7, #12
 800c43c:	46bd      	mov	sp, r7
 800c43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c442:	4770      	bx	lr

0800c444 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800c444:	b480      	push	{r7}
 800c446:	b087      	sub	sp, #28
 800c448:	af00      	add	r7, sp, #0
 800c44a:	60f8      	str	r0, [r7, #12]
 800c44c:	60b9      	str	r1, [r7, #8]
 800c44e:	607a      	str	r2, [r7, #4]
 800c450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c452:	2300      	movs	r3, #0
 800c454:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2200      	movs	r2, #0
 800c45a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2200      	movs	r2, #0
 800c460:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d003      	beq.n	800c472 <SAI_InitI2S+0x2e>
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d103      	bne.n	800c47a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2200      	movs	r2, #0
 800c476:	651a      	str	r2, [r3, #80]	; 0x50
 800c478:	e002      	b.n	800c480 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2201      	movs	r2, #1
 800c47e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800c486:	65da      	str	r2, [r3, #92]	; 0x5c
  
  // Disable ST's override on the "SlotActive" field.
  //hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
  hsai->SlotInit.FirstBitOffset  = 0;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2200      	movs	r2, #0
 800c48c:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	683a      	ldr	r2, [r7, #0]
 800c492:	671a      	str	r2, [r3, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	f003 0301 	and.w	r3, r3, #1
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d001      	beq.n	800c4a2 <SAI_InitI2S+0x5e>
  {
    return HAL_ERROR;
 800c49e:	2301      	movs	r3, #1
 800c4a0:	e077      	b.n	800c592 <SAI_InitI2S+0x14e>
  }

  if (protocol == SAI_I2S_STANDARD)
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d107      	bne.n	800c4b8 <SAI_InitI2S+0x74>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c4b4:	665a      	str	r2, [r3, #100]	; 0x64
 800c4b6:	e006      	b.n	800c4c6 <SAI_InitI2S+0x82>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c4be:	661a      	str	r2, [r3, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Frame definition */
  switch (datasize)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2b03      	cmp	r3, #3
 800c4ca:	d84f      	bhi.n	800c56c <SAI_InitI2S+0x128>
 800c4cc:	a201      	add	r2, pc, #4	; (adr r2, 800c4d4 <SAI_InitI2S+0x90>)
 800c4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4d2:	bf00      	nop
 800c4d4:	0800c4e5 	.word	0x0800c4e5
 800c4d8:	0800c507 	.word	0x0800c507
 800c4dc:	0800c529 	.word	0x0800c529
 800c4e0:	0800c54b 	.word	0x0800c54b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2280      	movs	r2, #128	; 0x80
 800c4e8:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	085b      	lsrs	r3, r3, #1
 800c4ee:	015a      	lsls	r2, r3, #5
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	085b      	lsrs	r3, r3, #1
 800c4f8:	011a      	lsls	r2, r3, #4
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2240      	movs	r2, #64	; 0x40
 800c502:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c504:	e035      	b.n	800c572 <SAI_InitI2S+0x12e>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2280      	movs	r2, #128	; 0x80
 800c50a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	085b      	lsrs	r3, r3, #1
 800c510:	019a      	lsls	r2, r3, #6
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	085b      	lsrs	r3, r3, #1
 800c51a:	015a      	lsls	r2, r3, #5
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2280      	movs	r2, #128	; 0x80
 800c524:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c526:	e024      	b.n	800c572 <SAI_InitI2S+0x12e>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	22c0      	movs	r2, #192	; 0xc0
 800c52c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	085b      	lsrs	r3, r3, #1
 800c532:	019a      	lsls	r2, r3, #6
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	085b      	lsrs	r3, r3, #1
 800c53c:	015a      	lsls	r2, r3, #5
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2280      	movs	r2, #128	; 0x80
 800c546:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c548:	e013      	b.n	800c572 <SAI_InitI2S+0x12e>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	22e0      	movs	r2, #224	; 0xe0
 800c54e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	085b      	lsrs	r3, r3, #1
 800c554:	019a      	lsls	r2, r3, #6
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	085b      	lsrs	r3, r3, #1
 800c55e:	015a      	lsls	r2, r3, #5
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	659a      	str	r2, [r3, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2280      	movs	r2, #128	; 0x80
 800c568:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c56a:	e002      	b.n	800c572 <SAI_InitI2S+0x12e>
    default :
      status = HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	75fb      	strb	r3, [r7, #23]
      break;
 800c570:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	2b02      	cmp	r3, #2
 800c576:	d10b      	bne.n	800c590 <SAI_InitI2S+0x14c>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d102      	bne.n	800c584 <SAI_InitI2S+0x140>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	2210      	movs	r2, #16
 800c582:	669a      	str	r2, [r3, #104]	; 0x68
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2b02      	cmp	r3, #2
 800c588:	d102      	bne.n	800c590 <SAI_InitI2S+0x14c>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2208      	movs	r2, #8
 800c58e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }
  return status;
 800c590:	7dfb      	ldrb	r3, [r7, #23]
}
 800c592:	4618      	mov	r0, r3
 800c594:	371c      	adds	r7, #28
 800c596:	46bd      	mov	sp, r7
 800c598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop

0800c5a0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b087      	sub	sp, #28
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	60f8      	str	r0, [r7, #12]
 800c5a8:	60b9      	str	r1, [r7, #8]
 800c5aa:	607a      	str	r2, [r7, #4]
 800c5ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d003      	beq.n	800c5ce <SAI_InitPCM+0x2e>
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	2b02      	cmp	r3, #2
 800c5cc:	d103      	bne.n	800c5d6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2201      	movs	r2, #1
 800c5d2:	651a      	str	r2, [r3, #80]	; 0x50
 800c5d4:	e002      	b.n	800c5dc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	651a      	str	r2, [r3, #80]	; 0x50
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c5e8:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800c5f0:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	669a      	str	r2, [r3, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	683a      	ldr	r2, [r7, #0]
 800c5fc:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c604:	675a      	str	r2, [r3, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	2b04      	cmp	r3, #4
 800c60a:	d103      	bne.n	800c614 <SAI_InitPCM+0x74>
  {
      hsai->FrameInit.ActiveFrameLength = 1;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2201      	movs	r2, #1
 800c610:	659a      	str	r2, [r3, #88]	; 0x58
 800c612:	e002      	b.n	800c61a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	220d      	movs	r2, #13
 800c618:	659a      	str	r2, [r3, #88]	; 0x58
  }

  switch (datasize)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b03      	cmp	r3, #3
 800c61e:	d837      	bhi.n	800c690 <SAI_InitPCM+0xf0>
 800c620:	a201      	add	r2, pc, #4	; (adr r2, 800c628 <SAI_InitPCM+0x88>)
 800c622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c626:	bf00      	nop
 800c628:	0800c639 	.word	0x0800c639
 800c62c:	0800c64f 	.word	0x0800c64f
 800c630:	0800c665 	.word	0x0800c665
 800c634:	0800c67b 	.word	0x0800c67b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2280      	movs	r2, #128	; 0x80
 800c63c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	011a      	lsls	r2, r3, #4
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2240      	movs	r2, #64	; 0x40
 800c64a:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c64c:	e023      	b.n	800c696 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2280      	movs	r2, #128	; 0x80
 800c652:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	015a      	lsls	r2, r3, #5
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2280      	movs	r2, #128	; 0x80
 800c660:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c662:	e018      	b.n	800c696 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	22c0      	movs	r2, #192	; 0xc0
 800c668:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	015a      	lsls	r2, r3, #5
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2280      	movs	r2, #128	; 0x80
 800c676:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c678:	e00d      	b.n	800c696 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	22e0      	movs	r2, #224	; 0xe0
 800c67e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	015a      	lsls	r2, r3, #5
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2280      	movs	r2, #128	; 0x80
 800c68c:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 800c68e:	e002      	b.n	800c696 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800c690:	2301      	movs	r3, #1
 800c692:	75fb      	strb	r3, [r7, #23]
      break;
 800c694:	bf00      	nop
  }

  return status;
 800c696:	7dfb      	ldrb	r3, [r7, #23]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	371c      	adds	r7, #28
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr

0800c6a4 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	b085      	sub	sp, #20
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800c6b4:	78fb      	ldrb	r3, [r7, #3]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d103      	bne.n	800c6c2 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	f043 0308 	orr.w	r3, r3, #8
 800c6c0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6c6:	2b08      	cmp	r3, #8
 800c6c8:	d10b      	bne.n	800c6e2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c6ce:	2b03      	cmp	r3, #3
 800c6d0:	d003      	beq.n	800c6da <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d103      	bne.n	800c6e2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f043 0310 	orr.w	r3, r3, #16
 800c6e0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	2b03      	cmp	r3, #3
 800c6e8:	d003      	beq.n	800c6f2 <SAI_InterruptFlag+0x4e>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	685b      	ldr	r3, [r3, #4]
 800c6ee:	2b02      	cmp	r3, #2
 800c6f0:	d104      	bne.n	800c6fc <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c6f8:	60fb      	str	r3, [r7, #12]
 800c6fa:	e003      	b.n	800c704 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f043 0304 	orr.w	r3, r3, #4
 800c702:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800c704:	68fb      	ldr	r3, [r7, #12]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3714      	adds	r7, #20
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
	...

0800c714 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c71c:	4b18      	ldr	r3, [pc, #96]	; (800c780 <SAI_Disable+0x6c>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a18      	ldr	r2, [pc, #96]	; (800c784 <SAI_Disable+0x70>)
 800c722:	fba2 2303 	umull	r2, r3, r2, r3
 800c726:	0b1b      	lsrs	r3, r3, #12
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c72c:	2300      	movs	r3, #0
 800c72e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c73e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10a      	bne.n	800c75c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c74c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800c756:	2303      	movs	r3, #3
 800c758:	72fb      	strb	r3, [r7, #11]
      break;
 800c75a:	e009      	b.n	800c770 <SAI_Disable+0x5c>
    }
    count--;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	3b01      	subs	r3, #1
 800c760:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d1e7      	bne.n	800c740 <SAI_Disable+0x2c>

  return status;
 800c770:	7afb      	ldrb	r3, [r7, #11]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3714      	adds	r7, #20
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop
 800c780:	24000400 	.word	0x24000400
 800c784:	95cbec1b 	.word	0x95cbec1b

0800c788 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c794:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	69db      	ldr	r3, [r3, #28]
 800c79a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c79e:	d01c      	beq.n	800c7da <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c7b6:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f7ff ff72 	bl	800c6a4 <SAI_InterruptFlag>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	43d9      	mvns	r1, r3
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	691a      	ldr	r2, [r3, #16]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	400a      	ands	r2, r1
 800c7d0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2201      	movs	r2, #1
 800c7d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800c7da:	68f8      	ldr	r0, [r7, #12]
 800c7dc:	f7f4 fb28 	bl	8000e30 <HAL_SAI_TxCpltCallback>
#endif
}
 800c7e0:	bf00      	nop
 800c7e2:	3710      	adds	r7, #16
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f7f4 fb06 	bl	8000e08 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800c7fc:	bf00      	nop
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c810:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	69db      	ldr	r3, [r3, #28]
 800c816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c81a:	d01c      	beq.n	800c856 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c82a:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2200      	movs	r2, #0
 800c830:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c834:	2100      	movs	r1, #0
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	f7ff ff34 	bl	800c6a4 <SAI_InterruptFlag>
 800c83c:	4603      	mov	r3, r0
 800c83e:	43d9      	mvns	r1, r3
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	691a      	ldr	r2, [r3, #16]
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	400a      	ands	r2, r1
 800c84c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2201      	movs	r2, #1
 800c852:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800c856:	68f8      	ldr	r0, [r7, #12]
 800c858:	f7f4 fb06 	bl	8000e68 <HAL_SAI_RxCpltCallback>
#endif
}
 800c85c:	bf00      	nop
 800c85e:	3710      	adds	r7, #16
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c870:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800c872:	68f8      	ldr	r0, [r7, #12]
 800c874:	f7f4 fb03 	bl	8000e7e <HAL_SAI_RxHalfCpltCallback>
#endif
}
 800c878:	bf00      	nop
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b084      	sub	sp, #16
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88c:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f7fa fe86 	bl	80075a0 <HAL_DMA_GetError>
 800c894:	4603      	mov	r3, r0
 800c896:	2b02      	cmp	r3, #2
 800c898:	d01d      	beq.n	800c8d6 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	681a      	ldr	r2, [r3, #0]
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c8b8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f7ff ff2a 	bl	800c714 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f7ff fdad 	bl	800c430 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800c8d6:	bf00      	nop
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
	...

0800c8e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d101      	bne.n	800c8f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e0f1      	b.n	800cad6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a78      	ldr	r2, [pc, #480]	; (800cae0 <HAL_SPI_Init+0x200>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d00f      	beq.n	800c922 <HAL_SPI_Init+0x42>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a77      	ldr	r2, [pc, #476]	; (800cae4 <HAL_SPI_Init+0x204>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d00a      	beq.n	800c922 <HAL_SPI_Init+0x42>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a75      	ldr	r2, [pc, #468]	; (800cae8 <HAL_SPI_Init+0x208>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d005      	beq.n	800c922 <HAL_SPI_Init+0x42>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	68db      	ldr	r3, [r3, #12]
 800c91a:	2b0f      	cmp	r3, #15
 800c91c:	d901      	bls.n	800c922 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c91e:	2301      	movs	r3, #1
 800c920:	e0d9      	b.n	800cad6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 ff66 	bl	800d7f4 <SPI_GetPacketSize>
 800c928:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a6c      	ldr	r2, [pc, #432]	; (800cae0 <HAL_SPI_Init+0x200>)
 800c930:	4293      	cmp	r3, r2
 800c932:	d00c      	beq.n	800c94e <HAL_SPI_Init+0x6e>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4a6a      	ldr	r2, [pc, #424]	; (800cae4 <HAL_SPI_Init+0x204>)
 800c93a:	4293      	cmp	r3, r2
 800c93c:	d007      	beq.n	800c94e <HAL_SPI_Init+0x6e>
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	4a69      	ldr	r2, [pc, #420]	; (800cae8 <HAL_SPI_Init+0x208>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d002      	beq.n	800c94e <HAL_SPI_Init+0x6e>
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2b08      	cmp	r3, #8
 800c94c:	d811      	bhi.n	800c972 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c952:	4a63      	ldr	r2, [pc, #396]	; (800cae0 <HAL_SPI_Init+0x200>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d009      	beq.n	800c96c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a61      	ldr	r2, [pc, #388]	; (800cae4 <HAL_SPI_Init+0x204>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d004      	beq.n	800c96c <HAL_SPI_Init+0x8c>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a60      	ldr	r2, [pc, #384]	; (800cae8 <HAL_SPI_Init+0x208>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d104      	bne.n	800c976 <HAL_SPI_Init+0x96>
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2b10      	cmp	r3, #16
 800c970:	d901      	bls.n	800c976 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c972:	2301      	movs	r3, #1
 800c974:	e0af      	b.n	800cad6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d106      	bne.n	800c990 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f7f6 f802 	bl	8002994 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2202      	movs	r2, #2
 800c994:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	f022 0201 	bic.w	r2, r2, #1
 800c9a6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c9b2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	699b      	ldr	r3, [r3, #24]
 800c9b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c9bc:	d119      	bne.n	800c9f2 <HAL_SPI_Init+0x112>
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c9c6:	d103      	bne.n	800c9d0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d008      	beq.n	800c9e2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10c      	bne.n	800c9f2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c9dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9e0:	d107      	bne.n	800c9f2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c9f0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	69da      	ldr	r2, [r3, #28]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9fa:	431a      	orrs	r2, r3
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	431a      	orrs	r2, r3
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca04:	ea42 0103 	orr.w	r1, r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	68da      	ldr	r2, [r3, #12]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	430a      	orrs	r2, r1
 800ca12:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca1c:	431a      	orrs	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca22:	431a      	orrs	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	699b      	ldr	r3, [r3, #24]
 800ca28:	431a      	orrs	r2, r3
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	691b      	ldr	r3, [r3, #16]
 800ca2e:	431a      	orrs	r2, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	695b      	ldr	r3, [r3, #20]
 800ca34:	431a      	orrs	r2, r3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6a1b      	ldr	r3, [r3, #32]
 800ca3a:	431a      	orrs	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	685b      	ldr	r3, [r3, #4]
 800ca40:	431a      	orrs	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca46:	431a      	orrs	r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	431a      	orrs	r2, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca52:	ea42 0103 	orr.w	r1, r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	430a      	orrs	r2, r1
 800ca60:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d113      	bne.n	800ca92 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca7c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ca90:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f022 0201 	bic.w	r2, r2, #1
 800caa0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00a      	beq.n	800cac4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	68db      	ldr	r3, [r3, #12]
 800cab4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	430a      	orrs	r2, r1
 800cac2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2200      	movs	r2, #0
 800cac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	40013000 	.word	0x40013000
 800cae4:	40003800 	.word	0x40003800
 800cae8:	40003c00 	.word	0x40003c00

0800caec <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b08a      	sub	sp, #40	; 0x28
 800caf0:	af02      	add	r7, sp, #8
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	603b      	str	r3, [r7, #0]
 800caf8:	4613      	mov	r3, r2
 800cafa:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	3320      	adds	r3, #32
 800cb02:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cb04:	2300      	movs	r3, #0
 800cb06:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d101      	bne.n	800cb16 <HAL_SPI_Transmit+0x2a>
 800cb12:	2302      	movs	r3, #2
 800cb14:	e1d7      	b.n	800cec6 <HAL_SPI_Transmit+0x3da>
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cb1e:	f7f6 fc23 	bl	8003368 <HAL_GetTick>
 800cb22:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d007      	beq.n	800cb40 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800cb30:	2302      	movs	r3, #2
 800cb32:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2200      	movs	r2, #0
 800cb38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cb3c:	7efb      	ldrb	r3, [r7, #27]
 800cb3e:	e1c2      	b.n	800cec6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d002      	beq.n	800cb4c <HAL_SPI_Transmit+0x60>
 800cb46:	88fb      	ldrh	r3, [r7, #6]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d107      	bne.n	800cb5c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	2200      	movs	r2, #0
 800cb54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cb58:	7efb      	ldrb	r3, [r7, #27]
 800cb5a:	e1b4      	b.n	800cec6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	2203      	movs	r2, #3
 800cb60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	68ba      	ldr	r2, [r7, #8]
 800cb70:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	88fa      	ldrh	r2, [r7, #6]
 800cb76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	88fa      	ldrh	r2, [r7, #6]
 800cb7e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2200      	movs	r2, #0
 800cba2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cbac:	d107      	bne.n	800cbbe <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cbbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	685a      	ldr	r2, [r3, #4]
 800cbc4:	4b96      	ldr	r3, [pc, #600]	; (800ce20 <HAL_SPI_Transmit+0x334>)
 800cbc6:	4013      	ands	r3, r2
 800cbc8:	88f9      	ldrh	r1, [r7, #6]
 800cbca:	68fa      	ldr	r2, [r7, #12]
 800cbcc:	6812      	ldr	r2, [r2, #0]
 800cbce:	430b      	orrs	r3, r1
 800cbd0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	f042 0201 	orr.w	r2, r2, #1
 800cbe0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbea:	d107      	bne.n	800cbfc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cbfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	2b0f      	cmp	r3, #15
 800cc02:	d947      	bls.n	800cc94 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cc04:	e03f      	b.n	800cc86 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	695b      	ldr	r3, [r3, #20]
 800cc0c:	f003 0302 	and.w	r3, r3, #2
 800cc10:	2b02      	cmp	r3, #2
 800cc12:	d114      	bne.n	800cc3e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	6812      	ldr	r2, [r2, #0]
 800cc1e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc24:	1d1a      	adds	r2, r3, #4
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	3b01      	subs	r3, #1
 800cc34:	b29a      	uxth	r2, r3
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cc3c:	e023      	b.n	800cc86 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc3e:	f7f6 fb93 	bl	8003368 <HAL_GetTick>
 800cc42:	4602      	mov	r2, r0
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	1ad3      	subs	r3, r2, r3
 800cc48:	683a      	ldr	r2, [r7, #0]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d803      	bhi.n	800cc56 <HAL_SPI_Transmit+0x16a>
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc54:	d102      	bne.n	800cc5c <HAL_SPI_Transmit+0x170>
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d114      	bne.n	800cc86 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cc5c:	68f8      	ldr	r0, [r7, #12]
 800cc5e:	f000 fcfb 	bl	800d658 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800cc82:	2303      	movs	r3, #3
 800cc84:	e11f      	b.n	800cec6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d1b9      	bne.n	800cc06 <HAL_SPI_Transmit+0x11a>
 800cc92:	e0f2      	b.n	800ce7a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	2b07      	cmp	r3, #7
 800cc9a:	f240 80e7 	bls.w	800ce6c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800cc9e:	e05d      	b.n	800cd5c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	695b      	ldr	r3, [r3, #20]
 800cca6:	f003 0302 	and.w	r3, r3, #2
 800ccaa:	2b02      	cmp	r3, #2
 800ccac:	d132      	bne.n	800cd14 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d918      	bls.n	800ccec <HAL_SPI_Transmit+0x200>
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d014      	beq.n	800ccec <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6812      	ldr	r2, [r2, #0]
 800cccc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccd2:	1d1a      	adds	r2, r3, #4
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	3b02      	subs	r3, #2
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ccea:	e037      	b.n	800cd5c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccf0:	881a      	ldrh	r2, [r3, #0]
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccfa:	1c9a      	adds	r2, r3, #2
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cd12:	e023      	b.n	800cd5c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd14:	f7f6 fb28 	bl	8003368 <HAL_GetTick>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	1ad3      	subs	r3, r2, r3
 800cd1e:	683a      	ldr	r2, [r7, #0]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d803      	bhi.n	800cd2c <HAL_SPI_Transmit+0x240>
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd2a:	d102      	bne.n	800cd32 <HAL_SPI_Transmit+0x246>
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d114      	bne.n	800cd5c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f000 fc90 	bl	800d658 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2201      	movs	r2, #1
 800cd54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800cd58:	2303      	movs	r3, #3
 800cd5a:	e0b4      	b.n	800cec6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd62:	b29b      	uxth	r3, r3
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d19b      	bne.n	800cca0 <HAL_SPI_Transmit+0x1b4>
 800cd68:	e087      	b.n	800ce7a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	695b      	ldr	r3, [r3, #20]
 800cd70:	f003 0302 	and.w	r3, r3, #2
 800cd74:	2b02      	cmp	r3, #2
 800cd76:	d155      	bne.n	800ce24 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd7e:	b29b      	uxth	r3, r3
 800cd80:	2b03      	cmp	r3, #3
 800cd82:	d918      	bls.n	800cdb6 <HAL_SPI_Transmit+0x2ca>
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd88:	2b40      	cmp	r3, #64	; 0x40
 800cd8a:	d914      	bls.n	800cdb6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	6812      	ldr	r2, [r2, #0]
 800cd96:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd9c:	1d1a      	adds	r2, r3, #4
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	3b04      	subs	r3, #4
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cdb4:	e05a      	b.n	800ce6c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d917      	bls.n	800cdf2 <HAL_SPI_Transmit+0x306>
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d013      	beq.n	800cdf2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdce:	881a      	ldrh	r2, [r3, #0]
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdd8:	1c9a      	adds	r2, r3, #2
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	3b02      	subs	r3, #2
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800cdf0:	e03c      	b.n	800ce6c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	3320      	adds	r3, #32
 800cdfc:	7812      	ldrb	r2, [r2, #0]
 800cdfe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce04:	1c5a      	adds	r2, r3, #1
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	3b01      	subs	r3, #1
 800ce14:	b29a      	uxth	r2, r3
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ce1c:	e026      	b.n	800ce6c <HAL_SPI_Transmit+0x380>
 800ce1e:	bf00      	nop
 800ce20:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce24:	f7f6 faa0 	bl	8003368 <HAL_GetTick>
 800ce28:	4602      	mov	r2, r0
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	1ad3      	subs	r3, r2, r3
 800ce2e:	683a      	ldr	r2, [r7, #0]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d803      	bhi.n	800ce3c <HAL_SPI_Transmit+0x350>
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce3a:	d102      	bne.n	800ce42 <HAL_SPI_Transmit+0x356>
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d114      	bne.n	800ce6c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f000 fc08 	bl	800d658 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ce68:	2303      	movs	r3, #3
 800ce6a:	e02c      	b.n	800cec6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	f47f af78 	bne.w	800cd6a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	9300      	str	r3, [sp, #0]
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	2200      	movs	r2, #0
 800ce82:	2108      	movs	r1, #8
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f000 fc87 	bl	800d798 <SPI_WaitOnFlagUntilTimeout>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d007      	beq.n	800cea0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce96:	f043 0220 	orr.w	r2, r3, #32
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cea0:	68f8      	ldr	r0, [r7, #12]
 800cea2:	f000 fbd9 	bl	800d658 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d001      	beq.n	800cec4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800cec0:	2301      	movs	r3, #1
 800cec2:	e000      	b.n	800cec6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800cec4:	7efb      	ldrb	r3, [r7, #27]
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3720      	adds	r7, #32
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	bf00      	nop

0800ced0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b08a      	sub	sp, #40	; 0x28
 800ced4:	af02      	add	r7, sp, #8
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	603b      	str	r3, [r7, #0]
 800cedc:	4613      	mov	r3, r2
 800cede:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cee0:	2300      	movs	r3, #0
 800cee2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	3330      	adds	r3, #48	; 0x30
 800ceea:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cef4:	d112      	bne.n	800cf1c <HAL_SPI_Receive+0x4c>
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	689b      	ldr	r3, [r3, #8]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d10e      	bne.n	800cf1c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2204      	movs	r2, #4
 800cf02:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800cf06:	88fa      	ldrh	r2, [r7, #6]
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	68b9      	ldr	r1, [r7, #8]
 800cf12:	68f8      	ldr	r0, [r7, #12]
 800cf14:	f000 f978 	bl	800d208 <HAL_SPI_TransmitReceive>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	e16f      	b.n	800d1fc <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d101      	bne.n	800cf2a <HAL_SPI_Receive+0x5a>
 800cf26:	2302      	movs	r3, #2
 800cf28:	e168      	b.n	800d1fc <HAL_SPI_Receive+0x32c>
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf32:	f7f6 fa19 	bl	8003368 <HAL_GetTick>
 800cf36:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d007      	beq.n	800cf54 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800cf44:	2302      	movs	r3, #2
 800cf46:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cf50:	7ffb      	ldrb	r3, [r7, #31]
 800cf52:	e153      	b.n	800d1fc <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d002      	beq.n	800cf60 <HAL_SPI_Receive+0x90>
 800cf5a:	88fb      	ldrh	r3, [r7, #6]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d107      	bne.n	800cf70 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800cf60:	2301      	movs	r3, #1
 800cf62:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2200      	movs	r2, #0
 800cf68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800cf6c:	7ffb      	ldrb	r3, [r7, #31]
 800cf6e:	e145      	b.n	800d1fc <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2204      	movs	r2, #4
 800cf74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	68ba      	ldr	r2, [r7, #8]
 800cf84:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	88fa      	ldrh	r2, [r7, #6]
 800cf8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	88fa      	ldrh	r2, [r7, #6]
 800cf92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800cfc0:	d107      	bne.n	800cfd2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cfd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	685a      	ldr	r2, [r3, #4]
 800cfd8:	4b8a      	ldr	r3, [pc, #552]	; (800d204 <HAL_SPI_Receive+0x334>)
 800cfda:	4013      	ands	r3, r2
 800cfdc:	88f9      	ldrh	r1, [r7, #6]
 800cfde:	68fa      	ldr	r2, [r7, #12]
 800cfe0:	6812      	ldr	r2, [r2, #0]
 800cfe2:	430b      	orrs	r3, r1
 800cfe4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	681a      	ldr	r2, [r3, #0]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f042 0201 	orr.w	r2, r2, #1
 800cff4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cffe:	d107      	bne.n	800d010 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d00e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	2b0f      	cmp	r3, #15
 800d016:	d948      	bls.n	800d0aa <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d018:	e040      	b.n	800d09c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	695a      	ldr	r2, [r3, #20]
 800d020:	f248 0308 	movw	r3, #32776	; 0x8008
 800d024:	4013      	ands	r3, r2
 800d026:	2b00      	cmp	r3, #0
 800d028:	d014      	beq.n	800d054 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d032:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d034:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d03a:	1d1a      	adds	r2, r3, #4
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d046:	b29b      	uxth	r3, r3
 800d048:	3b01      	subs	r3, #1
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d052:	e023      	b.n	800d09c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d054:	f7f6 f988 	bl	8003368 <HAL_GetTick>
 800d058:	4602      	mov	r2, r0
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	683a      	ldr	r2, [r7, #0]
 800d060:	429a      	cmp	r2, r3
 800d062:	d803      	bhi.n	800d06c <HAL_SPI_Receive+0x19c>
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d06a:	d102      	bne.n	800d072 <HAL_SPI_Receive+0x1a2>
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d114      	bne.n	800d09c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f000 faf0 	bl	800d658 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2200      	movs	r2, #0
 800d07c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d086:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2201      	movs	r2, #1
 800d094:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d098:	2303      	movs	r3, #3
 800d09a:	e0af      	b.n	800d1fc <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0a2:	b29b      	uxth	r3, r3
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d1b8      	bne.n	800d01a <HAL_SPI_Receive+0x14a>
 800d0a8:	e095      	b.n	800d1d6 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	68db      	ldr	r3, [r3, #12]
 800d0ae:	2b07      	cmp	r3, #7
 800d0b0:	f240 808b 	bls.w	800d1ca <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800d0b4:	e03f      	b.n	800d136 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	695b      	ldr	r3, [r3, #20]
 800d0bc:	f003 0301 	and.w	r3, r3, #1
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d114      	bne.n	800d0ee <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0c8:	69ba      	ldr	r2, [r7, #24]
 800d0ca:	8812      	ldrh	r2, [r2, #0]
 800d0cc:	b292      	uxth	r2, r2
 800d0ce:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0d4:	1c9a      	adds	r2, r3, #2
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d0ec:	e023      	b.n	800d136 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d0ee:	f7f6 f93b 	bl	8003368 <HAL_GetTick>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	683a      	ldr	r2, [r7, #0]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d803      	bhi.n	800d106 <HAL_SPI_Receive+0x236>
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d104:	d102      	bne.n	800d10c <HAL_SPI_Receive+0x23c>
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d114      	bne.n	800d136 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f000 faa3 	bl	800d658 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2200      	movs	r2, #0
 800d116:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d120:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2201      	movs	r2, #1
 800d12e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d132:	2303      	movs	r3, #3
 800d134:	e062      	b.n	800d1fc <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1b9      	bne.n	800d0b6 <HAL_SPI_Receive+0x1e6>
 800d142:	e048      	b.n	800d1d6 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	695b      	ldr	r3, [r3, #20]
 800d14a:	f003 0301 	and.w	r3, r3, #1
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d117      	bne.n	800d182 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d15e:	7812      	ldrb	r2, [r2, #0]
 800d160:	b2d2      	uxtb	r2, r2
 800d162:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d168:	1c5a      	adds	r2, r3, #1
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d174:	b29b      	uxth	r3, r3
 800d176:	3b01      	subs	r3, #1
 800d178:	b29a      	uxth	r2, r3
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d180:	e023      	b.n	800d1ca <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d182:	f7f6 f8f1 	bl	8003368 <HAL_GetTick>
 800d186:	4602      	mov	r2, r0
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	683a      	ldr	r2, [r7, #0]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d803      	bhi.n	800d19a <HAL_SPI_Receive+0x2ca>
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d198:	d102      	bne.n	800d1a0 <HAL_SPI_Receive+0x2d0>
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d114      	bne.n	800d1ca <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f000 fa59 	bl	800d658 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d1c6:	2303      	movs	r3, #3
 800d1c8:	e018      	b.n	800d1fc <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d1b6      	bne.n	800d144 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d1d6:	68f8      	ldr	r0, [r7, #12]
 800d1d8:	f000 fa3e 	bl	800d658 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d001      	beq.n	800d1fa <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e000      	b.n	800d1fc <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800d1fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3720      	adds	r7, #32
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}
 800d204:	ffff0000 	.word	0xffff0000

0800d208 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b08e      	sub	sp, #56	; 0x38
 800d20c:	af02      	add	r7, sp, #8
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	607a      	str	r2, [r7, #4]
 800d214:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d216:	2300      	movs	r3, #0
 800d218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	3320      	adds	r3, #32
 800d222:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	3330      	adds	r3, #48	; 0x30
 800d22a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d232:	2b01      	cmp	r3, #1
 800d234:	d101      	bne.n	800d23a <HAL_SPI_TransmitReceive+0x32>
 800d236:	2302      	movs	r3, #2
 800d238:	e209      	b.n	800d64e <HAL_SPI_TransmitReceive+0x446>
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2201      	movs	r2, #1
 800d23e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d242:	f7f6 f891 	bl	8003368 <HAL_GetTick>
 800d246:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800d248:	887b      	ldrh	r3, [r7, #2]
 800d24a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800d24c:	887b      	ldrh	r3, [r7, #2]
 800d24e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d256:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d25e:	7efb      	ldrb	r3, [r7, #27]
 800d260:	2b01      	cmp	r3, #1
 800d262:	d014      	beq.n	800d28e <HAL_SPI_TransmitReceive+0x86>
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d26a:	d106      	bne.n	800d27a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800d270:	2b00      	cmp	r3, #0
 800d272:	d102      	bne.n	800d27a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800d274:	7efb      	ldrb	r3, [r7, #27]
 800d276:	2b04      	cmp	r3, #4
 800d278:	d009      	beq.n	800d28e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800d27a:	2302      	movs	r3, #2
 800d27c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2200      	movs	r2, #0
 800d284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d288:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d28c:	e1df      	b.n	800d64e <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d005      	beq.n	800d2a0 <HAL_SPI_TransmitReceive+0x98>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d002      	beq.n	800d2a0 <HAL_SPI_TransmitReceive+0x98>
 800d29a:	887b      	ldrh	r3, [r7, #2]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d109      	bne.n	800d2b4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d2ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d2b2:	e1cc      	b.n	800d64e <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d2ba:	b2db      	uxtb	r3, r3
 800d2bc:	2b04      	cmp	r3, #4
 800d2be:	d003      	beq.n	800d2c8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2205      	movs	r2, #5
 800d2c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	887a      	ldrh	r2, [r7, #2]
 800d2da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	887a      	ldrh	r2, [r7, #2]
 800d2e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	887a      	ldrh	r2, [r7, #2]
 800d2f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	887a      	ldrh	r2, [r7, #2]
 800d2f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2200      	movs	r2, #0
 800d300:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2200      	movs	r2, #0
 800d306:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	685a      	ldr	r2, [r3, #4]
 800d30e:	4b82      	ldr	r3, [pc, #520]	; (800d518 <HAL_SPI_TransmitReceive+0x310>)
 800d310:	4013      	ands	r3, r2
 800d312:	8879      	ldrh	r1, [r7, #2]
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	6812      	ldr	r2, [r2, #0]
 800d318:	430b      	orrs	r3, r1
 800d31a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f042 0201 	orr.w	r2, r2, #1
 800d32a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d334:	d107      	bne.n	800d346 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d344:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	2b0f      	cmp	r3, #15
 800d34c:	d970      	bls.n	800d430 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d34e:	e068      	b.n	800d422 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	695b      	ldr	r3, [r3, #20]
 800d356:	f003 0302 	and.w	r3, r3, #2
 800d35a:	2b02      	cmp	r3, #2
 800d35c:	d11a      	bne.n	800d394 <HAL_SPI_TransmitReceive+0x18c>
 800d35e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d360:	2b00      	cmp	r3, #0
 800d362:	d017      	beq.n	800d394 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	6812      	ldr	r2, [r2, #0]
 800d36e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d374:	1d1a      	adds	r2, r3, #4
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d380:	b29b      	uxth	r3, r3
 800d382:	3b01      	subs	r3, #1
 800d384:	b29a      	uxth	r2, r3
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d392:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	695a      	ldr	r2, [r3, #20]
 800d39a:	f248 0308 	movw	r3, #32776	; 0x8008
 800d39e:	4013      	ands	r3, r2
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d01a      	beq.n	800d3da <HAL_SPI_TransmitReceive+0x1d2>
 800d3a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d017      	beq.n	800d3da <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681a      	ldr	r2, [r3, #0]
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d3b4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3ba:	1d1a      	adds	r2, r3, #4
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d3d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d3da:	f7f5 ffc5 	bl	8003368 <HAL_GetTick>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d803      	bhi.n	800d3f2 <HAL_SPI_TransmitReceive+0x1ea>
 800d3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3f0:	d102      	bne.n	800d3f8 <HAL_SPI_TransmitReceive+0x1f0>
 800d3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d114      	bne.n	800d422 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d3f8:	68f8      	ldr	r0, [r7, #12]
 800d3fa:	f000 f92d 	bl	800d658 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2200      	movs	r2, #0
 800d402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d40c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2201      	movs	r2, #1
 800d41a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d41e:	2303      	movs	r3, #3
 800d420:	e115      	b.n	800d64e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d422:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d424:	2b00      	cmp	r3, #0
 800d426:	d193      	bne.n	800d350 <HAL_SPI_TransmitReceive+0x148>
 800d428:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d190      	bne.n	800d350 <HAL_SPI_TransmitReceive+0x148>
 800d42e:	e0e7      	b.n	800d600 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	2b07      	cmp	r3, #7
 800d436:	f240 80dd 	bls.w	800d5f4 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d43a:	e066      	b.n	800d50a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	695b      	ldr	r3, [r3, #20]
 800d442:	f003 0302 	and.w	r3, r3, #2
 800d446:	2b02      	cmp	r3, #2
 800d448:	d119      	bne.n	800d47e <HAL_SPI_TransmitReceive+0x276>
 800d44a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d016      	beq.n	800d47e <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d454:	881a      	ldrh	r2, [r3, #0]
 800d456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d458:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d45e:	1c9a      	adds	r2, r3, #2
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	3b01      	subs	r3, #1
 800d46e:	b29a      	uxth	r2, r3
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d47c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	695b      	ldr	r3, [r3, #20]
 800d484:	f003 0301 	and.w	r3, r3, #1
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d11a      	bne.n	800d4c2 <HAL_SPI_TransmitReceive+0x2ba>
 800d48c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d017      	beq.n	800d4c2 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d496:	6a3a      	ldr	r2, [r7, #32]
 800d498:	8812      	ldrh	r2, [r2, #0]
 800d49a:	b292      	uxth	r2, r2
 800d49c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4a2:	1c9a      	adds	r2, r3, #2
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	3b01      	subs	r3, #1
 800d4b2:	b29a      	uxth	r2, r3
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d4c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d4c2:	f7f5 ff51 	bl	8003368 <HAL_GetTick>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	1ad3      	subs	r3, r2, r3
 800d4cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4ce:	429a      	cmp	r2, r3
 800d4d0:	d803      	bhi.n	800d4da <HAL_SPI_TransmitReceive+0x2d2>
 800d4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4d8:	d102      	bne.n	800d4e0 <HAL_SPI_TransmitReceive+0x2d8>
 800d4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d114      	bne.n	800d50a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f000 f8b9 	bl	800d658 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d4f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2201      	movs	r2, #1
 800d502:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d506:	2303      	movs	r3, #3
 800d508:	e0a1      	b.n	800d64e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d50a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d195      	bne.n	800d43c <HAL_SPI_TransmitReceive+0x234>
 800d510:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d512:	2b00      	cmp	r3, #0
 800d514:	d192      	bne.n	800d43c <HAL_SPI_TransmitReceive+0x234>
 800d516:	e073      	b.n	800d600 <HAL_SPI_TransmitReceive+0x3f8>
 800d518:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	695b      	ldr	r3, [r3, #20]
 800d522:	f003 0302 	and.w	r3, r3, #2
 800d526:	2b02      	cmp	r3, #2
 800d528:	d11b      	bne.n	800d562 <HAL_SPI_TransmitReceive+0x35a>
 800d52a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d018      	beq.n	800d562 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	3320      	adds	r3, #32
 800d53a:	7812      	ldrb	r2, [r2, #0]
 800d53c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d542:	1c5a      	adds	r2, r3, #1
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d54e:	b29b      	uxth	r3, r3
 800d550:	3b01      	subs	r3, #1
 800d552:	b29a      	uxth	r2, r3
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d560:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	695b      	ldr	r3, [r3, #20]
 800d568:	f003 0301 	and.w	r3, r3, #1
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d11d      	bne.n	800d5ac <HAL_SPI_TransmitReceive+0x3a4>
 800d570:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d572:	2b00      	cmp	r3, #0
 800d574:	d01a      	beq.n	800d5ac <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d582:	7812      	ldrb	r2, [r2, #0]
 800d584:	b2d2      	uxtb	r2, r2
 800d586:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d58c:	1c5a      	adds	r2, r3, #1
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d598:	b29b      	uxth	r3, r3
 800d59a:	3b01      	subs	r3, #1
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d5aa:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d5ac:	f7f5 fedc 	bl	8003368 <HAL_GetTick>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d803      	bhi.n	800d5c4 <HAL_SPI_TransmitReceive+0x3bc>
 800d5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5c2:	d102      	bne.n	800d5ca <HAL_SPI_TransmitReceive+0x3c2>
 800d5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d114      	bne.n	800d5f4 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800d5ca:	68f8      	ldr	r0, [r7, #12]
 800d5cc:	f000 f844 	bl	800d658 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800d5f0:	2303      	movs	r3, #3
 800d5f2:	e02c      	b.n	800d64e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800d5f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d190      	bne.n	800d51c <HAL_SPI_TransmitReceive+0x314>
 800d5fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d18d      	bne.n	800d51c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d602:	9300      	str	r3, [sp, #0]
 800d604:	69fb      	ldr	r3, [r7, #28]
 800d606:	2200      	movs	r2, #0
 800d608:	2108      	movs	r1, #8
 800d60a:	68f8      	ldr	r0, [r7, #12]
 800d60c:	f000 f8c4 	bl	800d798 <SPI_WaitOnFlagUntilTimeout>
 800d610:	4603      	mov	r3, r0
 800d612:	2b00      	cmp	r3, #0
 800d614:	d007      	beq.n	800d626 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d61c:	f043 0220 	orr.w	r2, r3, #32
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d626:	68f8      	ldr	r0, [r7, #12]
 800d628:	f000 f816 	bl	800d658 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2200      	movs	r2, #0
 800d630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2201      	movs	r2, #1
 800d638:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d642:	2b00      	cmp	r3, #0
 800d644:	d001      	beq.n	800d64a <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	e001      	b.n	800d64e <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800d64a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3730      	adds	r7, #48	; 0x30
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop

0800d658 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	695b      	ldr	r3, [r3, #20]
 800d666:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	699a      	ldr	r2, [r3, #24]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f042 0208 	orr.w	r2, r2, #8
 800d676:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	699a      	ldr	r2, [r3, #24]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f042 0210 	orr.w	r2, r2, #16
 800d686:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	f022 0201 	bic.w	r2, r2, #1
 800d696:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	6919      	ldr	r1, [r3, #16]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681a      	ldr	r2, [r3, #0]
 800d6a2:	4b3c      	ldr	r3, [pc, #240]	; (800d794 <SPI_CloseTransfer+0x13c>)
 800d6a4:	400b      	ands	r3, r1
 800d6a6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	689a      	ldr	r2, [r3, #8]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800d6b6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	2b04      	cmp	r3, #4
 800d6c2:	d014      	beq.n	800d6ee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f003 0320 	and.w	r3, r3, #32
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00f      	beq.n	800d6ee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	699a      	ldr	r2, [r3, #24]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f042 0220 	orr.w	r2, r2, #32
 800d6ec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	2b03      	cmp	r3, #3
 800d6f8:	d014      	beq.n	800d724 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d700:	2b00      	cmp	r3, #0
 800d702:	d00f      	beq.n	800d724 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d70a:	f043 0204 	orr.w	r2, r3, #4
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	699a      	ldr	r2, [r3, #24]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d722:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d00f      	beq.n	800d74e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d734:	f043 0201 	orr.w	r2, r3, #1
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	699a      	ldr	r2, [r3, #24]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d74c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d754:	2b00      	cmp	r3, #0
 800d756:	d00f      	beq.n	800d778 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d75e:	f043 0208 	orr.w	r2, r3, #8
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	699a      	ldr	r2, [r3, #24]
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d776:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800d788:	bf00      	nop
 800d78a:	3714      	adds	r7, #20
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr
 800d794:	fffffc90 	.word	0xfffffc90

0800d798 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b084      	sub	sp, #16
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	603b      	str	r3, [r7, #0]
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d7a8:	e010      	b.n	800d7cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7aa:	f7f5 fddd 	bl	8003368 <HAL_GetTick>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	1ad3      	subs	r3, r2, r3
 800d7b4:	69ba      	ldr	r2, [r7, #24]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d803      	bhi.n	800d7c2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7c0:	d102      	bne.n	800d7c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d101      	bne.n	800d7cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800d7c8:	2303      	movs	r3, #3
 800d7ca:	e00f      	b.n	800d7ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	695a      	ldr	r2, [r3, #20]
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	4013      	ands	r3, r2
 800d7d6:	68ba      	ldr	r2, [r7, #8]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	bf0c      	ite	eq
 800d7dc:	2301      	moveq	r3, #1
 800d7de:	2300      	movne	r3, #0
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	461a      	mov	r2, r3
 800d7e4:	79fb      	ldrb	r3, [r7, #7]
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d0df      	beq.n	800d7aa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800d7ea:	2300      	movs	r3, #0
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3710      	adds	r7, #16
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b085      	sub	sp, #20
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d800:	095b      	lsrs	r3, r3, #5
 800d802:	3301      	adds	r3, #1
 800d804:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	3301      	adds	r3, #1
 800d80c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	3307      	adds	r3, #7
 800d812:	08db      	lsrs	r3, r3, #3
 800d814:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	fb02 f303 	mul.w	r3, r2, r3
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3714      	adds	r7, #20
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr

0800d82a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b082      	sub	sp, #8
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d101      	bne.n	800d83c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d838:	2301      	movs	r3, #1
 800d83a:	e049      	b.n	800d8d0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d842:	b2db      	uxtb	r3, r3
 800d844:	2b00      	cmp	r3, #0
 800d846:	d106      	bne.n	800d856 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2200      	movs	r2, #0
 800d84c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f7f5 faf9 	bl	8002e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2202      	movs	r2, #2
 800d85a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681a      	ldr	r2, [r3, #0]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	3304      	adds	r3, #4
 800d866:	4619      	mov	r1, r3
 800d868:	4610      	mov	r0, r2
 800d86a:	f000 fcf9 	bl	800e260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2201      	movs	r2, #1
 800d872:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2201      	movs	r2, #1
 800d87a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2201      	movs	r2, #1
 800d882:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2201      	movs	r2, #1
 800d88a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2201      	movs	r2, #1
 800d892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2201      	movs	r2, #1
 800d89a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d8ce:	2300      	movs	r3, #0
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d101      	bne.n	800d8ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	e049      	b.n	800d97e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d106      	bne.n	800d904 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 f841 	bl	800d986 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2202      	movs	r2, #2
 800d908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	3304      	adds	r3, #4
 800d914:	4619      	mov	r1, r3
 800d916:	4610      	mov	r0, r2
 800d918:	f000 fca2 	bl	800e260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2201      	movs	r2, #1
 800d928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2201      	movs	r2, #1
 800d930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2201      	movs	r2, #1
 800d938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2201      	movs	r2, #1
 800d940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2201      	movs	r2, #1
 800d948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2201      	movs	r2, #1
 800d950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2201      	movs	r2, #1
 800d958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2201      	movs	r2, #1
 800d960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2201      	movs	r2, #1
 800d968:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2201      	movs	r2, #1
 800d970:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2201      	movs	r2, #1
 800d978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3708      	adds	r7, #8
 800d982:	46bd      	mov	sp, r7
 800d984:	bd80      	pop	{r7, pc}

0800d986 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d986:	b480      	push	{r7}
 800d988:	b083      	sub	sp, #12
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d98e:	bf00      	nop
 800d990:	370c      	adds	r7, #12
 800d992:	46bd      	mov	sp, r7
 800d994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d998:	4770      	bx	lr
	...

0800d99c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
 800d9a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d109      	bne.n	800d9c0 <HAL_TIM_PWM_Start+0x24>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d9b2:	b2db      	uxtb	r3, r3
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	bf14      	ite	ne
 800d9b8:	2301      	movne	r3, #1
 800d9ba:	2300      	moveq	r3, #0
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	e03c      	b.n	800da3a <HAL_TIM_PWM_Start+0x9e>
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	2b04      	cmp	r3, #4
 800d9c4:	d109      	bne.n	800d9da <HAL_TIM_PWM_Start+0x3e>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	2b01      	cmp	r3, #1
 800d9d0:	bf14      	ite	ne
 800d9d2:	2301      	movne	r3, #1
 800d9d4:	2300      	moveq	r3, #0
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	e02f      	b.n	800da3a <HAL_TIM_PWM_Start+0x9e>
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	2b08      	cmp	r3, #8
 800d9de:	d109      	bne.n	800d9f4 <HAL_TIM_PWM_Start+0x58>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	bf14      	ite	ne
 800d9ec:	2301      	movne	r3, #1
 800d9ee:	2300      	moveq	r3, #0
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	e022      	b.n	800da3a <HAL_TIM_PWM_Start+0x9e>
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	2b0c      	cmp	r3, #12
 800d9f8:	d109      	bne.n	800da0e <HAL_TIM_PWM_Start+0x72>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da00:	b2db      	uxtb	r3, r3
 800da02:	2b01      	cmp	r3, #1
 800da04:	bf14      	ite	ne
 800da06:	2301      	movne	r3, #1
 800da08:	2300      	moveq	r3, #0
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	e015      	b.n	800da3a <HAL_TIM_PWM_Start+0x9e>
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	2b10      	cmp	r3, #16
 800da12:	d109      	bne.n	800da28 <HAL_TIM_PWM_Start+0x8c>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	bf14      	ite	ne
 800da20:	2301      	movne	r3, #1
 800da22:	2300      	moveq	r3, #0
 800da24:	b2db      	uxtb	r3, r3
 800da26:	e008      	b.n	800da3a <HAL_TIM_PWM_Start+0x9e>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	2b01      	cmp	r3, #1
 800da32:	bf14      	ite	ne
 800da34:	2301      	movne	r3, #1
 800da36:	2300      	moveq	r3, #0
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d001      	beq.n	800da42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800da3e:	2301      	movs	r3, #1
 800da40:	e0a1      	b.n	800db86 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d104      	bne.n	800da52 <HAL_TIM_PWM_Start+0xb6>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2202      	movs	r2, #2
 800da4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da50:	e023      	b.n	800da9a <HAL_TIM_PWM_Start+0xfe>
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	2b04      	cmp	r3, #4
 800da56:	d104      	bne.n	800da62 <HAL_TIM_PWM_Start+0xc6>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2202      	movs	r2, #2
 800da5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800da60:	e01b      	b.n	800da9a <HAL_TIM_PWM_Start+0xfe>
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	2b08      	cmp	r3, #8
 800da66:	d104      	bne.n	800da72 <HAL_TIM_PWM_Start+0xd6>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2202      	movs	r2, #2
 800da6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800da70:	e013      	b.n	800da9a <HAL_TIM_PWM_Start+0xfe>
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	2b0c      	cmp	r3, #12
 800da76:	d104      	bne.n	800da82 <HAL_TIM_PWM_Start+0xe6>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2202      	movs	r2, #2
 800da7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800da80:	e00b      	b.n	800da9a <HAL_TIM_PWM_Start+0xfe>
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	2b10      	cmp	r3, #16
 800da86:	d104      	bne.n	800da92 <HAL_TIM_PWM_Start+0xf6>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2202      	movs	r2, #2
 800da8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800da90:	e003      	b.n	800da9a <HAL_TIM_PWM_Start+0xfe>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2202      	movs	r2, #2
 800da96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2201      	movs	r2, #1
 800daa0:	6839      	ldr	r1, [r7, #0]
 800daa2:	4618      	mov	r0, r3
 800daa4:	f000 ffea 	bl	800ea7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a38      	ldr	r2, [pc, #224]	; (800db90 <HAL_TIM_PWM_Start+0x1f4>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d013      	beq.n	800dada <HAL_TIM_PWM_Start+0x13e>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a37      	ldr	r2, [pc, #220]	; (800db94 <HAL_TIM_PWM_Start+0x1f8>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d00e      	beq.n	800dada <HAL_TIM_PWM_Start+0x13e>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4a35      	ldr	r2, [pc, #212]	; (800db98 <HAL_TIM_PWM_Start+0x1fc>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d009      	beq.n	800dada <HAL_TIM_PWM_Start+0x13e>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a34      	ldr	r2, [pc, #208]	; (800db9c <HAL_TIM_PWM_Start+0x200>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d004      	beq.n	800dada <HAL_TIM_PWM_Start+0x13e>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a32      	ldr	r2, [pc, #200]	; (800dba0 <HAL_TIM_PWM_Start+0x204>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d101      	bne.n	800dade <HAL_TIM_PWM_Start+0x142>
 800dada:	2301      	movs	r3, #1
 800dadc:	e000      	b.n	800dae0 <HAL_TIM_PWM_Start+0x144>
 800dade:	2300      	movs	r3, #0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d007      	beq.n	800daf4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800daf2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	4a25      	ldr	r2, [pc, #148]	; (800db90 <HAL_TIM_PWM_Start+0x1f4>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d022      	beq.n	800db44 <HAL_TIM_PWM_Start+0x1a8>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db06:	d01d      	beq.n	800db44 <HAL_TIM_PWM_Start+0x1a8>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4a25      	ldr	r2, [pc, #148]	; (800dba4 <HAL_TIM_PWM_Start+0x208>)
 800db0e:	4293      	cmp	r3, r2
 800db10:	d018      	beq.n	800db44 <HAL_TIM_PWM_Start+0x1a8>
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	4a24      	ldr	r2, [pc, #144]	; (800dba8 <HAL_TIM_PWM_Start+0x20c>)
 800db18:	4293      	cmp	r3, r2
 800db1a:	d013      	beq.n	800db44 <HAL_TIM_PWM_Start+0x1a8>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a22      	ldr	r2, [pc, #136]	; (800dbac <HAL_TIM_PWM_Start+0x210>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d00e      	beq.n	800db44 <HAL_TIM_PWM_Start+0x1a8>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	4a1a      	ldr	r2, [pc, #104]	; (800db94 <HAL_TIM_PWM_Start+0x1f8>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d009      	beq.n	800db44 <HAL_TIM_PWM_Start+0x1a8>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a1e      	ldr	r2, [pc, #120]	; (800dbb0 <HAL_TIM_PWM_Start+0x214>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d004      	beq.n	800db44 <HAL_TIM_PWM_Start+0x1a8>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	4a16      	ldr	r2, [pc, #88]	; (800db98 <HAL_TIM_PWM_Start+0x1fc>)
 800db40:	4293      	cmp	r3, r2
 800db42:	d115      	bne.n	800db70 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	689a      	ldr	r2, [r3, #8]
 800db4a:	4b1a      	ldr	r3, [pc, #104]	; (800dbb4 <HAL_TIM_PWM_Start+0x218>)
 800db4c:	4013      	ands	r3, r2
 800db4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	2b06      	cmp	r3, #6
 800db54:	d015      	beq.n	800db82 <HAL_TIM_PWM_Start+0x1e6>
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db5c:	d011      	beq.n	800db82 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f042 0201 	orr.w	r2, r2, #1
 800db6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db6e:	e008      	b.n	800db82 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	681a      	ldr	r2, [r3, #0]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f042 0201 	orr.w	r2, r2, #1
 800db7e:	601a      	str	r2, [r3, #0]
 800db80:	e000      	b.n	800db84 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db84:	2300      	movs	r3, #0
}
 800db86:	4618      	mov	r0, r3
 800db88:	3710      	adds	r7, #16
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	40010000 	.word	0x40010000
 800db94:	40010400 	.word	0x40010400
 800db98:	40014000 	.word	0x40014000
 800db9c:	40014400 	.word	0x40014400
 800dba0:	40014800 	.word	0x40014800
 800dba4:	40000400 	.word	0x40000400
 800dba8:	40000800 	.word	0x40000800
 800dbac:	40000c00 	.word	0x40000c00
 800dbb0:	40001800 	.word	0x40001800
 800dbb4:	00010007 	.word	0x00010007

0800dbb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	691b      	ldr	r3, [r3, #16]
 800dbc6:	f003 0302 	and.w	r3, r3, #2
 800dbca:	2b02      	cmp	r3, #2
 800dbcc:	d122      	bne.n	800dc14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	68db      	ldr	r3, [r3, #12]
 800dbd4:	f003 0302 	and.w	r3, r3, #2
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d11b      	bne.n	800dc14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f06f 0202 	mvn.w	r2, #2
 800dbe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2201      	movs	r2, #1
 800dbea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	699b      	ldr	r3, [r3, #24]
 800dbf2:	f003 0303 	and.w	r3, r3, #3
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d003      	beq.n	800dc02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 fb12 	bl	800e224 <HAL_TIM_IC_CaptureCallback>
 800dc00:	e005      	b.n	800dc0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fb04 	bl	800e210 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 fb15 	bl	800e238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2200      	movs	r2, #0
 800dc12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	691b      	ldr	r3, [r3, #16]
 800dc1a:	f003 0304 	and.w	r3, r3, #4
 800dc1e:	2b04      	cmp	r3, #4
 800dc20:	d122      	bne.n	800dc68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	f003 0304 	and.w	r3, r3, #4
 800dc2c:	2b04      	cmp	r3, #4
 800dc2e:	d11b      	bne.n	800dc68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f06f 0204 	mvn.w	r2, #4
 800dc38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2202      	movs	r2, #2
 800dc3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	699b      	ldr	r3, [r3, #24]
 800dc46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d003      	beq.n	800dc56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 fae8 	bl	800e224 <HAL_TIM_IC_CaptureCallback>
 800dc54:	e005      	b.n	800dc62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 fada 	bl	800e210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 faeb 	bl	800e238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2200      	movs	r2, #0
 800dc66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	691b      	ldr	r3, [r3, #16]
 800dc6e:	f003 0308 	and.w	r3, r3, #8
 800dc72:	2b08      	cmp	r3, #8
 800dc74:	d122      	bne.n	800dcbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	f003 0308 	and.w	r3, r3, #8
 800dc80:	2b08      	cmp	r3, #8
 800dc82:	d11b      	bne.n	800dcbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f06f 0208 	mvn.w	r2, #8
 800dc8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2204      	movs	r2, #4
 800dc92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	69db      	ldr	r3, [r3, #28]
 800dc9a:	f003 0303 	and.w	r3, r3, #3
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d003      	beq.n	800dcaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fabe 	bl	800e224 <HAL_TIM_IC_CaptureCallback>
 800dca8:	e005      	b.n	800dcb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 fab0 	bl	800e210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f000 fac1 	bl	800e238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	691b      	ldr	r3, [r3, #16]
 800dcc2:	f003 0310 	and.w	r3, r3, #16
 800dcc6:	2b10      	cmp	r3, #16
 800dcc8:	d122      	bne.n	800dd10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	f003 0310 	and.w	r3, r3, #16
 800dcd4:	2b10      	cmp	r3, #16
 800dcd6:	d11b      	bne.n	800dd10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f06f 0210 	mvn.w	r2, #16
 800dce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2208      	movs	r2, #8
 800dce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	69db      	ldr	r3, [r3, #28]
 800dcee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d003      	beq.n	800dcfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 fa94 	bl	800e224 <HAL_TIM_IC_CaptureCallback>
 800dcfc:	e005      	b.n	800dd0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 fa86 	bl	800e210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 fa97 	bl	800e238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	691b      	ldr	r3, [r3, #16]
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	2b01      	cmp	r3, #1
 800dd1c:	d10e      	bne.n	800dd3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	f003 0301 	and.w	r3, r3, #1
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d107      	bne.n	800dd3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	f06f 0201 	mvn.w	r2, #1
 800dd34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f7f3 fd7e 	bl	8001838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	691b      	ldr	r3, [r3, #16]
 800dd42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd46:	2b80      	cmp	r3, #128	; 0x80
 800dd48:	d10e      	bne.n	800dd68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd54:	2b80      	cmp	r3, #128	; 0x80
 800dd56:	d107      	bne.n	800dd68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dd60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 ff48 	bl	800ebf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	691b      	ldr	r3, [r3, #16]
 800dd6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd76:	d10e      	bne.n	800dd96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd82:	2b80      	cmp	r3, #128	; 0x80
 800dd84:	d107      	bne.n	800dd96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dd8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 ff3b 	bl	800ec0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	691b      	ldr	r3, [r3, #16]
 800dd9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dda0:	2b40      	cmp	r3, #64	; 0x40
 800dda2:	d10e      	bne.n	800ddc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddae:	2b40      	cmp	r3, #64	; 0x40
 800ddb0:	d107      	bne.n	800ddc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ddba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 fa45 	bl	800e24c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	691b      	ldr	r3, [r3, #16]
 800ddc8:	f003 0320 	and.w	r3, r3, #32
 800ddcc:	2b20      	cmp	r3, #32
 800ddce:	d10e      	bne.n	800ddee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	68db      	ldr	r3, [r3, #12]
 800ddd6:	f003 0320 	and.w	r3, r3, #32
 800ddda:	2b20      	cmp	r3, #32
 800dddc:	d107      	bne.n	800ddee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f06f 0220 	mvn.w	r2, #32
 800dde6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f000 fefb 	bl	800ebe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ddee:	bf00      	nop
 800ddf0:	3708      	adds	r7, #8
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}
	...

0800ddf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b086      	sub	sp, #24
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	60f8      	str	r0, [r7, #12]
 800de00:	60b9      	str	r1, [r7, #8]
 800de02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800de04:	2300      	movs	r3, #0
 800de06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de0e:	2b01      	cmp	r3, #1
 800de10:	d101      	bne.n	800de16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800de12:	2302      	movs	r3, #2
 800de14:	e0ff      	b.n	800e016 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2201      	movs	r2, #1
 800de1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2b14      	cmp	r3, #20
 800de22:	f200 80f0 	bhi.w	800e006 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800de26:	a201      	add	r2, pc, #4	; (adr r2, 800de2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800de28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de2c:	0800de81 	.word	0x0800de81
 800de30:	0800e007 	.word	0x0800e007
 800de34:	0800e007 	.word	0x0800e007
 800de38:	0800e007 	.word	0x0800e007
 800de3c:	0800dec1 	.word	0x0800dec1
 800de40:	0800e007 	.word	0x0800e007
 800de44:	0800e007 	.word	0x0800e007
 800de48:	0800e007 	.word	0x0800e007
 800de4c:	0800df03 	.word	0x0800df03
 800de50:	0800e007 	.word	0x0800e007
 800de54:	0800e007 	.word	0x0800e007
 800de58:	0800e007 	.word	0x0800e007
 800de5c:	0800df43 	.word	0x0800df43
 800de60:	0800e007 	.word	0x0800e007
 800de64:	0800e007 	.word	0x0800e007
 800de68:	0800e007 	.word	0x0800e007
 800de6c:	0800df85 	.word	0x0800df85
 800de70:	0800e007 	.word	0x0800e007
 800de74:	0800e007 	.word	0x0800e007
 800de78:	0800e007 	.word	0x0800e007
 800de7c:	0800dfc5 	.word	0x0800dfc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	68b9      	ldr	r1, [r7, #8]
 800de86:	4618      	mov	r0, r3
 800de88:	f000 fa84 	bl	800e394 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	699a      	ldr	r2, [r3, #24]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f042 0208 	orr.w	r2, r2, #8
 800de9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	699a      	ldr	r2, [r3, #24]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f022 0204 	bic.w	r2, r2, #4
 800deaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	6999      	ldr	r1, [r3, #24]
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	691a      	ldr	r2, [r3, #16]
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	430a      	orrs	r2, r1
 800debc:	619a      	str	r2, [r3, #24]
      break;
 800debe:	e0a5      	b.n	800e00c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	68b9      	ldr	r1, [r7, #8]
 800dec6:	4618      	mov	r0, r3
 800dec8:	f000 faf4 	bl	800e4b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	699a      	ldr	r2, [r3, #24]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800deda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	699a      	ldr	r2, [r3, #24]
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800deea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	6999      	ldr	r1, [r3, #24]
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	691b      	ldr	r3, [r3, #16]
 800def6:	021a      	lsls	r2, r3, #8
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	430a      	orrs	r2, r1
 800defe:	619a      	str	r2, [r3, #24]
      break;
 800df00:	e084      	b.n	800e00c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	68b9      	ldr	r1, [r7, #8]
 800df08:	4618      	mov	r0, r3
 800df0a:	f000 fb5d 	bl	800e5c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	69da      	ldr	r2, [r3, #28]
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f042 0208 	orr.w	r2, r2, #8
 800df1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	69da      	ldr	r2, [r3, #28]
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	f022 0204 	bic.w	r2, r2, #4
 800df2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	69d9      	ldr	r1, [r3, #28]
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	691a      	ldr	r2, [r3, #16]
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	430a      	orrs	r2, r1
 800df3e:	61da      	str	r2, [r3, #28]
      break;
 800df40:	e064      	b.n	800e00c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	68b9      	ldr	r1, [r7, #8]
 800df48:	4618      	mov	r0, r3
 800df4a:	f000 fbc5 	bl	800e6d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	69da      	ldr	r2, [r3, #28]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	69da      	ldr	r2, [r3, #28]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	69d9      	ldr	r1, [r3, #28]
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	691b      	ldr	r3, [r3, #16]
 800df78:	021a      	lsls	r2, r3, #8
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	430a      	orrs	r2, r1
 800df80:	61da      	str	r2, [r3, #28]
      break;
 800df82:	e043      	b.n	800e00c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	68b9      	ldr	r1, [r7, #8]
 800df8a:	4618      	mov	r0, r3
 800df8c:	f000 fc0e 	bl	800e7ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f042 0208 	orr.w	r2, r2, #8
 800df9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f022 0204 	bic.w	r2, r2, #4
 800dfae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	691a      	ldr	r2, [r3, #16]
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	430a      	orrs	r2, r1
 800dfc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800dfc2:	e023      	b.n	800e00c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68b9      	ldr	r1, [r7, #8]
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f000 fc52 	bl	800e874 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dfde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	691b      	ldr	r3, [r3, #16]
 800dffa:	021a      	lsls	r2, r3, #8
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	430a      	orrs	r2, r1
 800e002:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e004:	e002      	b.n	800e00c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e006:	2301      	movs	r3, #1
 800e008:	75fb      	strb	r3, [r7, #23]
      break;
 800e00a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2200      	movs	r2, #0
 800e010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e014:	7dfb      	ldrb	r3, [r7, #23]
}
 800e016:	4618      	mov	r0, r3
 800e018:	3718      	adds	r7, #24
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop

0800e020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b084      	sub	sp, #16
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e02a:	2300      	movs	r3, #0
 800e02c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e034:	2b01      	cmp	r3, #1
 800e036:	d101      	bne.n	800e03c <HAL_TIM_ConfigClockSource+0x1c>
 800e038:	2302      	movs	r3, #2
 800e03a:	e0dc      	b.n	800e1f6 <HAL_TIM_ConfigClockSource+0x1d6>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2201      	movs	r2, #1
 800e040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2202      	movs	r2, #2
 800e048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e054:	68ba      	ldr	r2, [r7, #8]
 800e056:	4b6a      	ldr	r3, [pc, #424]	; (800e200 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e058:	4013      	ands	r3, r2
 800e05a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e062:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	68ba      	ldr	r2, [r7, #8]
 800e06a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4a64      	ldr	r2, [pc, #400]	; (800e204 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e072:	4293      	cmp	r3, r2
 800e074:	f000 80a9 	beq.w	800e1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e078:	4a62      	ldr	r2, [pc, #392]	; (800e204 <HAL_TIM_ConfigClockSource+0x1e4>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	f200 80ae 	bhi.w	800e1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e080:	4a61      	ldr	r2, [pc, #388]	; (800e208 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e082:	4293      	cmp	r3, r2
 800e084:	f000 80a1 	beq.w	800e1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e088:	4a5f      	ldr	r2, [pc, #380]	; (800e208 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	f200 80a6 	bhi.w	800e1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e090:	4a5e      	ldr	r2, [pc, #376]	; (800e20c <HAL_TIM_ConfigClockSource+0x1ec>)
 800e092:	4293      	cmp	r3, r2
 800e094:	f000 8099 	beq.w	800e1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e098:	4a5c      	ldr	r2, [pc, #368]	; (800e20c <HAL_TIM_ConfigClockSource+0x1ec>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	f200 809e 	bhi.w	800e1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e0a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e0a4:	f000 8091 	beq.w	800e1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e0a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e0ac:	f200 8096 	bhi.w	800e1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e0b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0b4:	f000 8089 	beq.w	800e1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e0b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0bc:	f200 808e 	bhi.w	800e1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e0c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0c4:	d03e      	beq.n	800e144 <HAL_TIM_ConfigClockSource+0x124>
 800e0c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e0ca:	f200 8087 	bhi.w	800e1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e0ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0d2:	f000 8086 	beq.w	800e1e2 <HAL_TIM_ConfigClockSource+0x1c2>
 800e0d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0da:	d87f      	bhi.n	800e1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e0dc:	2b70      	cmp	r3, #112	; 0x70
 800e0de:	d01a      	beq.n	800e116 <HAL_TIM_ConfigClockSource+0xf6>
 800e0e0:	2b70      	cmp	r3, #112	; 0x70
 800e0e2:	d87b      	bhi.n	800e1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e0e4:	2b60      	cmp	r3, #96	; 0x60
 800e0e6:	d050      	beq.n	800e18a <HAL_TIM_ConfigClockSource+0x16a>
 800e0e8:	2b60      	cmp	r3, #96	; 0x60
 800e0ea:	d877      	bhi.n	800e1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e0ec:	2b50      	cmp	r3, #80	; 0x50
 800e0ee:	d03c      	beq.n	800e16a <HAL_TIM_ConfigClockSource+0x14a>
 800e0f0:	2b50      	cmp	r3, #80	; 0x50
 800e0f2:	d873      	bhi.n	800e1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e0f4:	2b40      	cmp	r3, #64	; 0x40
 800e0f6:	d058      	beq.n	800e1aa <HAL_TIM_ConfigClockSource+0x18a>
 800e0f8:	2b40      	cmp	r3, #64	; 0x40
 800e0fa:	d86f      	bhi.n	800e1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e0fc:	2b30      	cmp	r3, #48	; 0x30
 800e0fe:	d064      	beq.n	800e1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e100:	2b30      	cmp	r3, #48	; 0x30
 800e102:	d86b      	bhi.n	800e1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e104:	2b20      	cmp	r3, #32
 800e106:	d060      	beq.n	800e1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e108:	2b20      	cmp	r3, #32
 800e10a:	d867      	bhi.n	800e1dc <HAL_TIM_ConfigClockSource+0x1bc>
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d05c      	beq.n	800e1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e110:	2b10      	cmp	r3, #16
 800e112:	d05a      	beq.n	800e1ca <HAL_TIM_ConfigClockSource+0x1aa>
 800e114:	e062      	b.n	800e1dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6818      	ldr	r0, [r3, #0]
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	6899      	ldr	r1, [r3, #8]
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	685a      	ldr	r2, [r3, #4]
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	f000 fc89 	bl	800ea3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	689b      	ldr	r3, [r3, #8]
 800e130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	68ba      	ldr	r2, [r7, #8]
 800e140:	609a      	str	r2, [r3, #8]
      break;
 800e142:	e04f      	b.n	800e1e4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	6818      	ldr	r0, [r3, #0]
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	6899      	ldr	r1, [r3, #8]
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	685a      	ldr	r2, [r3, #4]
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	f000 fc72 	bl	800ea3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	689a      	ldr	r2, [r3, #8]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e166:	609a      	str	r2, [r3, #8]
      break;
 800e168:	e03c      	b.n	800e1e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6818      	ldr	r0, [r3, #0]
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	6859      	ldr	r1, [r3, #4]
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	68db      	ldr	r3, [r3, #12]
 800e176:	461a      	mov	r2, r3
 800e178:	f000 fbe2 	bl	800e940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2150      	movs	r1, #80	; 0x50
 800e182:	4618      	mov	r0, r3
 800e184:	f000 fc3c 	bl	800ea00 <TIM_ITRx_SetConfig>
      break;
 800e188:	e02c      	b.n	800e1e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6818      	ldr	r0, [r3, #0]
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	6859      	ldr	r1, [r3, #4]
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	461a      	mov	r2, r3
 800e198:	f000 fc01 	bl	800e99e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2160      	movs	r1, #96	; 0x60
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f000 fc2c 	bl	800ea00 <TIM_ITRx_SetConfig>
      break;
 800e1a8:	e01c      	b.n	800e1e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6818      	ldr	r0, [r3, #0]
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	6859      	ldr	r1, [r3, #4]
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	f000 fbc2 	bl	800e940 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2140      	movs	r1, #64	; 0x40
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f000 fc1c 	bl	800ea00 <TIM_ITRx_SetConfig>
      break;
 800e1c8:	e00c      	b.n	800e1e4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	4610      	mov	r0, r2
 800e1d6:	f000 fc13 	bl	800ea00 <TIM_ITRx_SetConfig>
      break;
 800e1da:	e003      	b.n	800e1e4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e1dc:	2301      	movs	r3, #1
 800e1de:	73fb      	strb	r3, [r7, #15]
      break;
 800e1e0:	e000      	b.n	800e1e4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e1e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	ffceff88 	.word	0xffceff88
 800e204:	00100040 	.word	0x00100040
 800e208:	00100030 	.word	0x00100030
 800e20c:	00100020 	.word	0x00100020

0800e210 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e210:	b480      	push	{r7}
 800e212:	b083      	sub	sp, #12
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e218:	bf00      	nop
 800e21a:	370c      	adds	r7, #12
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e22c:	bf00      	nop
 800e22e:	370c      	adds	r7, #12
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr

0800e238 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e240:	bf00      	nop
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr

0800e24c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e254:	bf00      	nop
 800e256:	370c      	adds	r7, #12
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr

0800e260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e260:	b480      	push	{r7}
 800e262:	b085      	sub	sp, #20
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	4a40      	ldr	r2, [pc, #256]	; (800e374 <TIM_Base_SetConfig+0x114>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d013      	beq.n	800e2a0 <TIM_Base_SetConfig+0x40>
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e27e:	d00f      	beq.n	800e2a0 <TIM_Base_SetConfig+0x40>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	4a3d      	ldr	r2, [pc, #244]	; (800e378 <TIM_Base_SetConfig+0x118>)
 800e284:	4293      	cmp	r3, r2
 800e286:	d00b      	beq.n	800e2a0 <TIM_Base_SetConfig+0x40>
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	4a3c      	ldr	r2, [pc, #240]	; (800e37c <TIM_Base_SetConfig+0x11c>)
 800e28c:	4293      	cmp	r3, r2
 800e28e:	d007      	beq.n	800e2a0 <TIM_Base_SetConfig+0x40>
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	4a3b      	ldr	r2, [pc, #236]	; (800e380 <TIM_Base_SetConfig+0x120>)
 800e294:	4293      	cmp	r3, r2
 800e296:	d003      	beq.n	800e2a0 <TIM_Base_SetConfig+0x40>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	4a3a      	ldr	r2, [pc, #232]	; (800e384 <TIM_Base_SetConfig+0x124>)
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d108      	bne.n	800e2b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	68fa      	ldr	r2, [r7, #12]
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	4a2f      	ldr	r2, [pc, #188]	; (800e374 <TIM_Base_SetConfig+0x114>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d01f      	beq.n	800e2fa <TIM_Base_SetConfig+0x9a>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2c0:	d01b      	beq.n	800e2fa <TIM_Base_SetConfig+0x9a>
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	4a2c      	ldr	r2, [pc, #176]	; (800e378 <TIM_Base_SetConfig+0x118>)
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d017      	beq.n	800e2fa <TIM_Base_SetConfig+0x9a>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	4a2b      	ldr	r2, [pc, #172]	; (800e37c <TIM_Base_SetConfig+0x11c>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d013      	beq.n	800e2fa <TIM_Base_SetConfig+0x9a>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4a2a      	ldr	r2, [pc, #168]	; (800e380 <TIM_Base_SetConfig+0x120>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d00f      	beq.n	800e2fa <TIM_Base_SetConfig+0x9a>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	4a29      	ldr	r2, [pc, #164]	; (800e384 <TIM_Base_SetConfig+0x124>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d00b      	beq.n	800e2fa <TIM_Base_SetConfig+0x9a>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	4a28      	ldr	r2, [pc, #160]	; (800e388 <TIM_Base_SetConfig+0x128>)
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d007      	beq.n	800e2fa <TIM_Base_SetConfig+0x9a>
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	4a27      	ldr	r2, [pc, #156]	; (800e38c <TIM_Base_SetConfig+0x12c>)
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d003      	beq.n	800e2fa <TIM_Base_SetConfig+0x9a>
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	4a26      	ldr	r2, [pc, #152]	; (800e390 <TIM_Base_SetConfig+0x130>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d108      	bne.n	800e30c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	68fa      	ldr	r2, [r7, #12]
 800e308:	4313      	orrs	r3, r2
 800e30a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	695b      	ldr	r3, [r3, #20]
 800e316:	4313      	orrs	r3, r2
 800e318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	68fa      	ldr	r2, [r7, #12]
 800e31e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	689a      	ldr	r2, [r3, #8]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	681a      	ldr	r2, [r3, #0]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	4a10      	ldr	r2, [pc, #64]	; (800e374 <TIM_Base_SetConfig+0x114>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d00f      	beq.n	800e358 <TIM_Base_SetConfig+0xf8>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	4a12      	ldr	r2, [pc, #72]	; (800e384 <TIM_Base_SetConfig+0x124>)
 800e33c:	4293      	cmp	r3, r2
 800e33e:	d00b      	beq.n	800e358 <TIM_Base_SetConfig+0xf8>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	4a11      	ldr	r2, [pc, #68]	; (800e388 <TIM_Base_SetConfig+0x128>)
 800e344:	4293      	cmp	r3, r2
 800e346:	d007      	beq.n	800e358 <TIM_Base_SetConfig+0xf8>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	4a10      	ldr	r2, [pc, #64]	; (800e38c <TIM_Base_SetConfig+0x12c>)
 800e34c:	4293      	cmp	r3, r2
 800e34e:	d003      	beq.n	800e358 <TIM_Base_SetConfig+0xf8>
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	4a0f      	ldr	r2, [pc, #60]	; (800e390 <TIM_Base_SetConfig+0x130>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d103      	bne.n	800e360 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	691a      	ldr	r2, [r3, #16]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2201      	movs	r2, #1
 800e364:	615a      	str	r2, [r3, #20]
}
 800e366:	bf00      	nop
 800e368:	3714      	adds	r7, #20
 800e36a:	46bd      	mov	sp, r7
 800e36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e370:	4770      	bx	lr
 800e372:	bf00      	nop
 800e374:	40010000 	.word	0x40010000
 800e378:	40000400 	.word	0x40000400
 800e37c:	40000800 	.word	0x40000800
 800e380:	40000c00 	.word	0x40000c00
 800e384:	40010400 	.word	0x40010400
 800e388:	40014000 	.word	0x40014000
 800e38c:	40014400 	.word	0x40014400
 800e390:	40014800 	.word	0x40014800

0800e394 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e394:	b480      	push	{r7}
 800e396:	b087      	sub	sp, #28
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
 800e39c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6a1b      	ldr	r3, [r3, #32]
 800e3a2:	f023 0201 	bic.w	r2, r3, #1
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a1b      	ldr	r3, [r3, #32]
 800e3ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	699b      	ldr	r3, [r3, #24]
 800e3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e3bc:	68fa      	ldr	r2, [r7, #12]
 800e3be:	4b37      	ldr	r3, [pc, #220]	; (800e49c <TIM_OC1_SetConfig+0x108>)
 800e3c0:	4013      	ands	r3, r2
 800e3c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f023 0303 	bic.w	r3, r3, #3
 800e3ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	68fa      	ldr	r2, [r7, #12]
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	f023 0302 	bic.w	r3, r3, #2
 800e3dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	689b      	ldr	r3, [r3, #8]
 800e3e2:	697a      	ldr	r2, [r7, #20]
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	4a2d      	ldr	r2, [pc, #180]	; (800e4a0 <TIM_OC1_SetConfig+0x10c>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d00f      	beq.n	800e410 <TIM_OC1_SetConfig+0x7c>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	4a2c      	ldr	r2, [pc, #176]	; (800e4a4 <TIM_OC1_SetConfig+0x110>)
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d00b      	beq.n	800e410 <TIM_OC1_SetConfig+0x7c>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	4a2b      	ldr	r2, [pc, #172]	; (800e4a8 <TIM_OC1_SetConfig+0x114>)
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d007      	beq.n	800e410 <TIM_OC1_SetConfig+0x7c>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	4a2a      	ldr	r2, [pc, #168]	; (800e4ac <TIM_OC1_SetConfig+0x118>)
 800e404:	4293      	cmp	r3, r2
 800e406:	d003      	beq.n	800e410 <TIM_OC1_SetConfig+0x7c>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	4a29      	ldr	r2, [pc, #164]	; (800e4b0 <TIM_OC1_SetConfig+0x11c>)
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d10c      	bne.n	800e42a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	f023 0308 	bic.w	r3, r3, #8
 800e416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	68db      	ldr	r3, [r3, #12]
 800e41c:	697a      	ldr	r2, [r7, #20]
 800e41e:	4313      	orrs	r3, r2
 800e420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	f023 0304 	bic.w	r3, r3, #4
 800e428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	4a1c      	ldr	r2, [pc, #112]	; (800e4a0 <TIM_OC1_SetConfig+0x10c>)
 800e42e:	4293      	cmp	r3, r2
 800e430:	d00f      	beq.n	800e452 <TIM_OC1_SetConfig+0xbe>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	4a1b      	ldr	r2, [pc, #108]	; (800e4a4 <TIM_OC1_SetConfig+0x110>)
 800e436:	4293      	cmp	r3, r2
 800e438:	d00b      	beq.n	800e452 <TIM_OC1_SetConfig+0xbe>
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	4a1a      	ldr	r2, [pc, #104]	; (800e4a8 <TIM_OC1_SetConfig+0x114>)
 800e43e:	4293      	cmp	r3, r2
 800e440:	d007      	beq.n	800e452 <TIM_OC1_SetConfig+0xbe>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	4a19      	ldr	r2, [pc, #100]	; (800e4ac <TIM_OC1_SetConfig+0x118>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d003      	beq.n	800e452 <TIM_OC1_SetConfig+0xbe>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	4a18      	ldr	r2, [pc, #96]	; (800e4b0 <TIM_OC1_SetConfig+0x11c>)
 800e44e:	4293      	cmp	r3, r2
 800e450:	d111      	bne.n	800e476 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e452:	693b      	ldr	r3, [r7, #16]
 800e454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e45a:	693b      	ldr	r3, [r7, #16]
 800e45c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	695b      	ldr	r3, [r3, #20]
 800e466:	693a      	ldr	r2, [r7, #16]
 800e468:	4313      	orrs	r3, r2
 800e46a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	699b      	ldr	r3, [r3, #24]
 800e470:	693a      	ldr	r2, [r7, #16]
 800e472:	4313      	orrs	r3, r2
 800e474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	693a      	ldr	r2, [r7, #16]
 800e47a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	68fa      	ldr	r2, [r7, #12]
 800e480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	685a      	ldr	r2, [r3, #4]
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	697a      	ldr	r2, [r7, #20]
 800e48e:	621a      	str	r2, [r3, #32]
}
 800e490:	bf00      	nop
 800e492:	371c      	adds	r7, #28
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr
 800e49c:	fffeff8f 	.word	0xfffeff8f
 800e4a0:	40010000 	.word	0x40010000
 800e4a4:	40010400 	.word	0x40010400
 800e4a8:	40014000 	.word	0x40014000
 800e4ac:	40014400 	.word	0x40014400
 800e4b0:	40014800 	.word	0x40014800

0800e4b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b087      	sub	sp, #28
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6a1b      	ldr	r3, [r3, #32]
 800e4c2:	f023 0210 	bic.w	r2, r3, #16
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6a1b      	ldr	r3, [r3, #32]
 800e4ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	699b      	ldr	r3, [r3, #24]
 800e4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e4dc:	68fa      	ldr	r2, [r7, #12]
 800e4de:	4b34      	ldr	r3, [pc, #208]	; (800e5b0 <TIM_OC2_SetConfig+0xfc>)
 800e4e0:	4013      	ands	r3, r2
 800e4e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	021b      	lsls	r3, r3, #8
 800e4f2:	68fa      	ldr	r2, [r7, #12]
 800e4f4:	4313      	orrs	r3, r2
 800e4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	f023 0320 	bic.w	r3, r3, #32
 800e4fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	689b      	ldr	r3, [r3, #8]
 800e504:	011b      	lsls	r3, r3, #4
 800e506:	697a      	ldr	r2, [r7, #20]
 800e508:	4313      	orrs	r3, r2
 800e50a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	4a29      	ldr	r2, [pc, #164]	; (800e5b4 <TIM_OC2_SetConfig+0x100>)
 800e510:	4293      	cmp	r3, r2
 800e512:	d003      	beq.n	800e51c <TIM_OC2_SetConfig+0x68>
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	4a28      	ldr	r2, [pc, #160]	; (800e5b8 <TIM_OC2_SetConfig+0x104>)
 800e518:	4293      	cmp	r3, r2
 800e51a:	d10d      	bne.n	800e538 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	011b      	lsls	r3, r3, #4
 800e52a:	697a      	ldr	r2, [r7, #20]
 800e52c:	4313      	orrs	r3, r2
 800e52e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e536:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	4a1e      	ldr	r2, [pc, #120]	; (800e5b4 <TIM_OC2_SetConfig+0x100>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d00f      	beq.n	800e560 <TIM_OC2_SetConfig+0xac>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	4a1d      	ldr	r2, [pc, #116]	; (800e5b8 <TIM_OC2_SetConfig+0x104>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d00b      	beq.n	800e560 <TIM_OC2_SetConfig+0xac>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	4a1c      	ldr	r2, [pc, #112]	; (800e5bc <TIM_OC2_SetConfig+0x108>)
 800e54c:	4293      	cmp	r3, r2
 800e54e:	d007      	beq.n	800e560 <TIM_OC2_SetConfig+0xac>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	4a1b      	ldr	r2, [pc, #108]	; (800e5c0 <TIM_OC2_SetConfig+0x10c>)
 800e554:	4293      	cmp	r3, r2
 800e556:	d003      	beq.n	800e560 <TIM_OC2_SetConfig+0xac>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	4a1a      	ldr	r2, [pc, #104]	; (800e5c4 <TIM_OC2_SetConfig+0x110>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d113      	bne.n	800e588 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e568:	693b      	ldr	r3, [r7, #16]
 800e56a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e56e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	695b      	ldr	r3, [r3, #20]
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	693a      	ldr	r2, [r7, #16]
 800e578:	4313      	orrs	r3, r2
 800e57a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	699b      	ldr	r3, [r3, #24]
 800e580:	009b      	lsls	r3, r3, #2
 800e582:	693a      	ldr	r2, [r7, #16]
 800e584:	4313      	orrs	r3, r2
 800e586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	693a      	ldr	r2, [r7, #16]
 800e58c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	68fa      	ldr	r2, [r7, #12]
 800e592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	685a      	ldr	r2, [r3, #4]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	697a      	ldr	r2, [r7, #20]
 800e5a0:	621a      	str	r2, [r3, #32]
}
 800e5a2:	bf00      	nop
 800e5a4:	371c      	adds	r7, #28
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ac:	4770      	bx	lr
 800e5ae:	bf00      	nop
 800e5b0:	feff8fff 	.word	0xfeff8fff
 800e5b4:	40010000 	.word	0x40010000
 800e5b8:	40010400 	.word	0x40010400
 800e5bc:	40014000 	.word	0x40014000
 800e5c0:	40014400 	.word	0x40014400
 800e5c4:	40014800 	.word	0x40014800

0800e5c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b087      	sub	sp, #28
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6a1b      	ldr	r3, [r3, #32]
 800e5d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6a1b      	ldr	r3, [r3, #32]
 800e5e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	69db      	ldr	r3, [r3, #28]
 800e5ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e5f0:	68fa      	ldr	r2, [r7, #12]
 800e5f2:	4b33      	ldr	r3, [pc, #204]	; (800e6c0 <TIM_OC3_SetConfig+0xf8>)
 800e5f4:	4013      	ands	r3, r2
 800e5f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	f023 0303 	bic.w	r3, r3, #3
 800e5fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	68fa      	ldr	r2, [r7, #12]
 800e606:	4313      	orrs	r3, r2
 800e608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	689b      	ldr	r3, [r3, #8]
 800e616:	021b      	lsls	r3, r3, #8
 800e618:	697a      	ldr	r2, [r7, #20]
 800e61a:	4313      	orrs	r3, r2
 800e61c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	4a28      	ldr	r2, [pc, #160]	; (800e6c4 <TIM_OC3_SetConfig+0xfc>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d003      	beq.n	800e62e <TIM_OC3_SetConfig+0x66>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	4a27      	ldr	r2, [pc, #156]	; (800e6c8 <TIM_OC3_SetConfig+0x100>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d10d      	bne.n	800e64a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	68db      	ldr	r3, [r3, #12]
 800e63a:	021b      	lsls	r3, r3, #8
 800e63c:	697a      	ldr	r2, [r7, #20]
 800e63e:	4313      	orrs	r3, r2
 800e640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	4a1d      	ldr	r2, [pc, #116]	; (800e6c4 <TIM_OC3_SetConfig+0xfc>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d00f      	beq.n	800e672 <TIM_OC3_SetConfig+0xaa>
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	4a1c      	ldr	r2, [pc, #112]	; (800e6c8 <TIM_OC3_SetConfig+0x100>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d00b      	beq.n	800e672 <TIM_OC3_SetConfig+0xaa>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	4a1b      	ldr	r2, [pc, #108]	; (800e6cc <TIM_OC3_SetConfig+0x104>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d007      	beq.n	800e672 <TIM_OC3_SetConfig+0xaa>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	4a1a      	ldr	r2, [pc, #104]	; (800e6d0 <TIM_OC3_SetConfig+0x108>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d003      	beq.n	800e672 <TIM_OC3_SetConfig+0xaa>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	4a19      	ldr	r2, [pc, #100]	; (800e6d4 <TIM_OC3_SetConfig+0x10c>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d113      	bne.n	800e69a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	695b      	ldr	r3, [r3, #20]
 800e686:	011b      	lsls	r3, r3, #4
 800e688:	693a      	ldr	r2, [r7, #16]
 800e68a:	4313      	orrs	r3, r2
 800e68c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	699b      	ldr	r3, [r3, #24]
 800e692:	011b      	lsls	r3, r3, #4
 800e694:	693a      	ldr	r2, [r7, #16]
 800e696:	4313      	orrs	r3, r2
 800e698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	693a      	ldr	r2, [r7, #16]
 800e69e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	68fa      	ldr	r2, [r7, #12]
 800e6a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	685a      	ldr	r2, [r3, #4]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	697a      	ldr	r2, [r7, #20]
 800e6b2:	621a      	str	r2, [r3, #32]
}
 800e6b4:	bf00      	nop
 800e6b6:	371c      	adds	r7, #28
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr
 800e6c0:	fffeff8f 	.word	0xfffeff8f
 800e6c4:	40010000 	.word	0x40010000
 800e6c8:	40010400 	.word	0x40010400
 800e6cc:	40014000 	.word	0x40014000
 800e6d0:	40014400 	.word	0x40014400
 800e6d4:	40014800 	.word	0x40014800

0800e6d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b087      	sub	sp, #28
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
 800e6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a1b      	ldr	r3, [r3, #32]
 800e6e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6a1b      	ldr	r3, [r3, #32]
 800e6f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	685b      	ldr	r3, [r3, #4]
 800e6f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	69db      	ldr	r3, [r3, #28]
 800e6fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e700:	68fa      	ldr	r2, [r7, #12]
 800e702:	4b24      	ldr	r3, [pc, #144]	; (800e794 <TIM_OC4_SetConfig+0xbc>)
 800e704:	4013      	ands	r3, r2
 800e706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e70e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	021b      	lsls	r3, r3, #8
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	4313      	orrs	r3, r2
 800e71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	689b      	ldr	r3, [r3, #8]
 800e728:	031b      	lsls	r3, r3, #12
 800e72a:	693a      	ldr	r2, [r7, #16]
 800e72c:	4313      	orrs	r3, r2
 800e72e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	4a19      	ldr	r2, [pc, #100]	; (800e798 <TIM_OC4_SetConfig+0xc0>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d00f      	beq.n	800e758 <TIM_OC4_SetConfig+0x80>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4a18      	ldr	r2, [pc, #96]	; (800e79c <TIM_OC4_SetConfig+0xc4>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d00b      	beq.n	800e758 <TIM_OC4_SetConfig+0x80>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	4a17      	ldr	r2, [pc, #92]	; (800e7a0 <TIM_OC4_SetConfig+0xc8>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d007      	beq.n	800e758 <TIM_OC4_SetConfig+0x80>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	4a16      	ldr	r2, [pc, #88]	; (800e7a4 <TIM_OC4_SetConfig+0xcc>)
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d003      	beq.n	800e758 <TIM_OC4_SetConfig+0x80>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	4a15      	ldr	r2, [pc, #84]	; (800e7a8 <TIM_OC4_SetConfig+0xd0>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d109      	bne.n	800e76c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e75e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	695b      	ldr	r3, [r3, #20]
 800e764:	019b      	lsls	r3, r3, #6
 800e766:	697a      	ldr	r2, [r7, #20]
 800e768:	4313      	orrs	r3, r2
 800e76a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	697a      	ldr	r2, [r7, #20]
 800e770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	68fa      	ldr	r2, [r7, #12]
 800e776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	685a      	ldr	r2, [r3, #4]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	693a      	ldr	r2, [r7, #16]
 800e784:	621a      	str	r2, [r3, #32]
}
 800e786:	bf00      	nop
 800e788:	371c      	adds	r7, #28
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr
 800e792:	bf00      	nop
 800e794:	feff8fff 	.word	0xfeff8fff
 800e798:	40010000 	.word	0x40010000
 800e79c:	40010400 	.word	0x40010400
 800e7a0:	40014000 	.word	0x40014000
 800e7a4:	40014400 	.word	0x40014400
 800e7a8:	40014800 	.word	0x40014800

0800e7ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b087      	sub	sp, #28
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
 800e7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6a1b      	ldr	r3, [r3, #32]
 800e7ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6a1b      	ldr	r3, [r3, #32]
 800e7c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	4b21      	ldr	r3, [pc, #132]	; (800e85c <TIM_OC5_SetConfig+0xb0>)
 800e7d8:	4013      	ands	r3, r2
 800e7da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	68fa      	ldr	r2, [r7, #12]
 800e7e2:	4313      	orrs	r3, r2
 800e7e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e7ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	041b      	lsls	r3, r3, #16
 800e7f4:	693a      	ldr	r2, [r7, #16]
 800e7f6:	4313      	orrs	r3, r2
 800e7f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	4a18      	ldr	r2, [pc, #96]	; (800e860 <TIM_OC5_SetConfig+0xb4>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d00f      	beq.n	800e822 <TIM_OC5_SetConfig+0x76>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	4a17      	ldr	r2, [pc, #92]	; (800e864 <TIM_OC5_SetConfig+0xb8>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d00b      	beq.n	800e822 <TIM_OC5_SetConfig+0x76>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	4a16      	ldr	r2, [pc, #88]	; (800e868 <TIM_OC5_SetConfig+0xbc>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d007      	beq.n	800e822 <TIM_OC5_SetConfig+0x76>
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	4a15      	ldr	r2, [pc, #84]	; (800e86c <TIM_OC5_SetConfig+0xc0>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d003      	beq.n	800e822 <TIM_OC5_SetConfig+0x76>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	4a14      	ldr	r2, [pc, #80]	; (800e870 <TIM_OC5_SetConfig+0xc4>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d109      	bne.n	800e836 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e828:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	695b      	ldr	r3, [r3, #20]
 800e82e:	021b      	lsls	r3, r3, #8
 800e830:	697a      	ldr	r2, [r7, #20]
 800e832:	4313      	orrs	r3, r2
 800e834:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	697a      	ldr	r2, [r7, #20]
 800e83a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	68fa      	ldr	r2, [r7, #12]
 800e840:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	685a      	ldr	r2, [r3, #4]
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	693a      	ldr	r2, [r7, #16]
 800e84e:	621a      	str	r2, [r3, #32]
}
 800e850:	bf00      	nop
 800e852:	371c      	adds	r7, #28
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr
 800e85c:	fffeff8f 	.word	0xfffeff8f
 800e860:	40010000 	.word	0x40010000
 800e864:	40010400 	.word	0x40010400
 800e868:	40014000 	.word	0x40014000
 800e86c:	40014400 	.word	0x40014400
 800e870:	40014800 	.word	0x40014800

0800e874 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e874:	b480      	push	{r7}
 800e876:	b087      	sub	sp, #28
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6a1b      	ldr	r3, [r3, #32]
 800e882:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6a1b      	ldr	r3, [r3, #32]
 800e88e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e89c:	68fa      	ldr	r2, [r7, #12]
 800e89e:	4b22      	ldr	r3, [pc, #136]	; (800e928 <TIM_OC6_SetConfig+0xb4>)
 800e8a0:	4013      	ands	r3, r2
 800e8a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	021b      	lsls	r3, r3, #8
 800e8aa:	68fa      	ldr	r2, [r7, #12]
 800e8ac:	4313      	orrs	r3, r2
 800e8ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e8b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	689b      	ldr	r3, [r3, #8]
 800e8bc:	051b      	lsls	r3, r3, #20
 800e8be:	693a      	ldr	r2, [r7, #16]
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4a19      	ldr	r2, [pc, #100]	; (800e92c <TIM_OC6_SetConfig+0xb8>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d00f      	beq.n	800e8ec <TIM_OC6_SetConfig+0x78>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	4a18      	ldr	r2, [pc, #96]	; (800e930 <TIM_OC6_SetConfig+0xbc>)
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d00b      	beq.n	800e8ec <TIM_OC6_SetConfig+0x78>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	4a17      	ldr	r2, [pc, #92]	; (800e934 <TIM_OC6_SetConfig+0xc0>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d007      	beq.n	800e8ec <TIM_OC6_SetConfig+0x78>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	4a16      	ldr	r2, [pc, #88]	; (800e938 <TIM_OC6_SetConfig+0xc4>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d003      	beq.n	800e8ec <TIM_OC6_SetConfig+0x78>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	4a15      	ldr	r2, [pc, #84]	; (800e93c <TIM_OC6_SetConfig+0xc8>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d109      	bne.n	800e900 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e8f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e8f4:	683b      	ldr	r3, [r7, #0]
 800e8f6:	695b      	ldr	r3, [r3, #20]
 800e8f8:	029b      	lsls	r3, r3, #10
 800e8fa:	697a      	ldr	r2, [r7, #20]
 800e8fc:	4313      	orrs	r3, r2
 800e8fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	697a      	ldr	r2, [r7, #20]
 800e904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	68fa      	ldr	r2, [r7, #12]
 800e90a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	685a      	ldr	r2, [r3, #4]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	693a      	ldr	r2, [r7, #16]
 800e918:	621a      	str	r2, [r3, #32]
}
 800e91a:	bf00      	nop
 800e91c:	371c      	adds	r7, #28
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	feff8fff 	.word	0xfeff8fff
 800e92c:	40010000 	.word	0x40010000
 800e930:	40010400 	.word	0x40010400
 800e934:	40014000 	.word	0x40014000
 800e938:	40014400 	.word	0x40014400
 800e93c:	40014800 	.word	0x40014800

0800e940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e940:	b480      	push	{r7}
 800e942:	b087      	sub	sp, #28
 800e944:	af00      	add	r7, sp, #0
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	6a1b      	ldr	r3, [r3, #32]
 800e950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	6a1b      	ldr	r3, [r3, #32]
 800e956:	f023 0201 	bic.w	r2, r3, #1
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	699b      	ldr	r3, [r3, #24]
 800e962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e96a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	011b      	lsls	r3, r3, #4
 800e970:	693a      	ldr	r2, [r7, #16]
 800e972:	4313      	orrs	r3, r2
 800e974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	f023 030a 	bic.w	r3, r3, #10
 800e97c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e97e:	697a      	ldr	r2, [r7, #20]
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	4313      	orrs	r3, r2
 800e984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	693a      	ldr	r2, [r7, #16]
 800e98a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	697a      	ldr	r2, [r7, #20]
 800e990:	621a      	str	r2, [r3, #32]
}
 800e992:	bf00      	nop
 800e994:	371c      	adds	r7, #28
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr

0800e99e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e99e:	b480      	push	{r7}
 800e9a0:	b087      	sub	sp, #28
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	60f8      	str	r0, [r7, #12]
 800e9a6:	60b9      	str	r1, [r7, #8]
 800e9a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	6a1b      	ldr	r3, [r3, #32]
 800e9ae:	f023 0210 	bic.w	r2, r3, #16
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	699b      	ldr	r3, [r3, #24]
 800e9ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	6a1b      	ldr	r3, [r3, #32]
 800e9c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e9c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	031b      	lsls	r3, r3, #12
 800e9ce:	697a      	ldr	r2, [r7, #20]
 800e9d0:	4313      	orrs	r3, r2
 800e9d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e9d4:	693b      	ldr	r3, [r7, #16]
 800e9d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e9da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	011b      	lsls	r3, r3, #4
 800e9e0:	693a      	ldr	r2, [r7, #16]
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	697a      	ldr	r2, [r7, #20]
 800e9ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	693a      	ldr	r2, [r7, #16]
 800e9f0:	621a      	str	r2, [r3, #32]
}
 800e9f2:	bf00      	nop
 800e9f4:	371c      	adds	r7, #28
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fc:	4770      	bx	lr
	...

0800ea00 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b085      	sub	sp, #20
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ea10:	68fa      	ldr	r2, [r7, #12]
 800ea12:	4b09      	ldr	r3, [pc, #36]	; (800ea38 <TIM_ITRx_SetConfig+0x38>)
 800ea14:	4013      	ands	r3, r2
 800ea16:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ea18:	683a      	ldr	r2, [r7, #0]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	f043 0307 	orr.w	r3, r3, #7
 800ea22:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	68fa      	ldr	r2, [r7, #12]
 800ea28:	609a      	str	r2, [r3, #8]
}
 800ea2a:	bf00      	nop
 800ea2c:	3714      	adds	r7, #20
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop
 800ea38:	ffcfff8f 	.word	0xffcfff8f

0800ea3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b087      	sub	sp, #28
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	60f8      	str	r0, [r7, #12]
 800ea44:	60b9      	str	r1, [r7, #8]
 800ea46:	607a      	str	r2, [r7, #4]
 800ea48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ea56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	021a      	lsls	r2, r3, #8
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	431a      	orrs	r2, r3
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	4313      	orrs	r3, r2
 800ea64:	697a      	ldr	r2, [r7, #20]
 800ea66:	4313      	orrs	r3, r2
 800ea68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	697a      	ldr	r2, [r7, #20]
 800ea6e:	609a      	str	r2, [r3, #8]
}
 800ea70:	bf00      	nop
 800ea72:	371c      	adds	r7, #28
 800ea74:	46bd      	mov	sp, r7
 800ea76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7a:	4770      	bx	lr

0800ea7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ea7c:	b480      	push	{r7}
 800ea7e:	b087      	sub	sp, #28
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	60f8      	str	r0, [r7, #12]
 800ea84:	60b9      	str	r1, [r7, #8]
 800ea86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	f003 031f 	and.w	r3, r3, #31
 800ea8e:	2201      	movs	r2, #1
 800ea90:	fa02 f303 	lsl.w	r3, r2, r3
 800ea94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	6a1a      	ldr	r2, [r3, #32]
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	43db      	mvns	r3, r3
 800ea9e:	401a      	ands	r2, r3
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	6a1a      	ldr	r2, [r3, #32]
 800eaa8:	68bb      	ldr	r3, [r7, #8]
 800eaaa:	f003 031f 	and.w	r3, r3, #31
 800eaae:	6879      	ldr	r1, [r7, #4]
 800eab0:	fa01 f303 	lsl.w	r3, r1, r3
 800eab4:	431a      	orrs	r2, r3
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	621a      	str	r2, [r3, #32]
}
 800eaba:	bf00      	nop
 800eabc:	371c      	adds	r7, #28
 800eabe:	46bd      	mov	sp, r7
 800eac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac4:	4770      	bx	lr
	...

0800eac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d101      	bne.n	800eae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800eadc:	2302      	movs	r3, #2
 800eade:	e06d      	b.n	800ebbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2201      	movs	r2, #1
 800eae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2202      	movs	r2, #2
 800eaec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	689b      	ldr	r3, [r3, #8]
 800eafe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	4a30      	ldr	r2, [pc, #192]	; (800ebc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eb06:	4293      	cmp	r3, r2
 800eb08:	d004      	beq.n	800eb14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	4a2f      	ldr	r2, [pc, #188]	; (800ebcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800eb10:	4293      	cmp	r3, r2
 800eb12:	d108      	bne.n	800eb26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800eb1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	685b      	ldr	r3, [r3, #4]
 800eb20:	68fa      	ldr	r2, [r7, #12]
 800eb22:	4313      	orrs	r3, r2
 800eb24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	68fa      	ldr	r2, [r7, #12]
 800eb34:	4313      	orrs	r3, r2
 800eb36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	68fa      	ldr	r2, [r7, #12]
 800eb3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	4a20      	ldr	r2, [pc, #128]	; (800ebc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800eb46:	4293      	cmp	r3, r2
 800eb48:	d022      	beq.n	800eb90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb52:	d01d      	beq.n	800eb90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	4a1d      	ldr	r2, [pc, #116]	; (800ebd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d018      	beq.n	800eb90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	4a1c      	ldr	r2, [pc, #112]	; (800ebd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d013      	beq.n	800eb90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4a1a      	ldr	r2, [pc, #104]	; (800ebd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d00e      	beq.n	800eb90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4a15      	ldr	r2, [pc, #84]	; (800ebcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	d009      	beq.n	800eb90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4a16      	ldr	r2, [pc, #88]	; (800ebdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d004      	beq.n	800eb90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	4a15      	ldr	r2, [pc, #84]	; (800ebe0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d10c      	bne.n	800ebaa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	689b      	ldr	r3, [r3, #8]
 800eb9c:	68ba      	ldr	r2, [r7, #8]
 800eb9e:	4313      	orrs	r3, r2
 800eba0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	68ba      	ldr	r2, [r7, #8]
 800eba8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2201      	movs	r2, #1
 800ebae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ebba:	2300      	movs	r3, #0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3714      	adds	r7, #20
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc6:	4770      	bx	lr
 800ebc8:	40010000 	.word	0x40010000
 800ebcc:	40010400 	.word	0x40010400
 800ebd0:	40000400 	.word	0x40000400
 800ebd4:	40000800 	.word	0x40000800
 800ebd8:	40000c00 	.word	0x40000c00
 800ebdc:	40001800 	.word	0x40001800
 800ebe0:	40014000 	.word	0x40014000

0800ebe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ebe4:	b480      	push	{r7}
 800ebe6:	b083      	sub	sp, #12
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ebec:	bf00      	nop
 800ebee:	370c      	adds	r7, #12
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b083      	sub	sp, #12
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ec00:	bf00      	nop
 800ec02:	370c      	adds	r7, #12
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ec14:	bf00      	nop
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr

0800ec20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d101      	bne.n	800ec32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ec2e:	2301      	movs	r3, #1
 800ec30:	e042      	b.n	800ecb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d106      	bne.n	800ec4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f7f4 f9bf 	bl	8002fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2224      	movs	r2, #36	; 0x24
 800ec4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	681a      	ldr	r2, [r3, #0]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f022 0201 	bic.w	r2, r2, #1
 800ec60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 fcd6 	bl	800f614 <UART_SetConfig>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b01      	cmp	r3, #1
 800ec6c:	d101      	bne.n	800ec72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e022      	b.n	800ecb8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d002      	beq.n	800ec80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f001 fa32 	bl	80100e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	685a      	ldr	r2, [r3, #4]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ec8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	689a      	ldr	r2, [r3, #8]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ec9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	f042 0201 	orr.w	r2, r2, #1
 800ecae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f001 fab9 	bl	8010228 <UART_CheckIdleState>
 800ecb6:	4603      	mov	r3, r0
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3708      	adds	r7, #8
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}

0800ecc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b08a      	sub	sp, #40	; 0x28
 800ecc4:	af02      	add	r7, sp, #8
 800ecc6:	60f8      	str	r0, [r7, #12]
 800ecc8:	60b9      	str	r1, [r7, #8]
 800ecca:	603b      	str	r3, [r7, #0]
 800eccc:	4613      	mov	r3, r2
 800ecce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecd6:	2b20      	cmp	r3, #32
 800ecd8:	f040 8083 	bne.w	800ede2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d002      	beq.n	800ece8 <HAL_UART_Transmit+0x28>
 800ece2:	88fb      	ldrh	r3, [r7, #6]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d101      	bne.n	800ecec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ece8:	2301      	movs	r3, #1
 800ecea:	e07b      	b.n	800ede4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ecf2:	2b01      	cmp	r3, #1
 800ecf4:	d101      	bne.n	800ecfa <HAL_UART_Transmit+0x3a>
 800ecf6:	2302      	movs	r3, #2
 800ecf8:	e074      	b.n	800ede4 <HAL_UART_Transmit+0x124>
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2200      	movs	r2, #0
 800ed06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	2221      	movs	r2, #33	; 0x21
 800ed0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ed12:	f7f4 fb29 	bl	8003368 <HAL_GetTick>
 800ed16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	88fa      	ldrh	r2, [r7, #6]
 800ed1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	88fa      	ldrh	r2, [r7, #6]
 800ed24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ed30:	d108      	bne.n	800ed44 <HAL_UART_Transmit+0x84>
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	691b      	ldr	r3, [r3, #16]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d104      	bne.n	800ed44 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	61bb      	str	r3, [r7, #24]
 800ed42:	e003      	b.n	800ed4c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ed54:	e02c      	b.n	800edb0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	9300      	str	r3, [sp, #0]
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	2180      	movs	r1, #128	; 0x80
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	f001 faac 	bl	80102be <UART_WaitOnFlagUntilTimeout>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d001      	beq.n	800ed70 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ed6c:	2303      	movs	r3, #3
 800ed6e:	e039      	b.n	800ede4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ed70:	69fb      	ldr	r3, [r7, #28]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d10b      	bne.n	800ed8e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	881b      	ldrh	r3, [r3, #0]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ed84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ed86:	69bb      	ldr	r3, [r7, #24]
 800ed88:	3302      	adds	r3, #2
 800ed8a:	61bb      	str	r3, [r7, #24]
 800ed8c:	e007      	b.n	800ed9e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ed8e:	69fb      	ldr	r3, [r7, #28]
 800ed90:	781a      	ldrb	r2, [r3, #0]
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ed98:	69fb      	ldr	r3, [r7, #28]
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	3b01      	subs	r3, #1
 800eda8:	b29a      	uxth	r2, r3
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d1cc      	bne.n	800ed56 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	9300      	str	r3, [sp, #0]
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	2200      	movs	r2, #0
 800edc4:	2140      	movs	r1, #64	; 0x40
 800edc6:	68f8      	ldr	r0, [r7, #12]
 800edc8:	f001 fa79 	bl	80102be <UART_WaitOnFlagUntilTimeout>
 800edcc:	4603      	mov	r3, r0
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d001      	beq.n	800edd6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800edd2:	2303      	movs	r3, #3
 800edd4:	e006      	b.n	800ede4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	2220      	movs	r2, #32
 800edda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800edde:	2300      	movs	r3, #0
 800ede0:	e000      	b.n	800ede4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ede2:	2302      	movs	r3, #2
  }
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3720      	adds	r7, #32
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b08a      	sub	sp, #40	; 0x28
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	4613      	mov	r3, r2
 800edf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee00:	2b20      	cmp	r3, #32
 800ee02:	d142      	bne.n	800ee8a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d002      	beq.n	800ee10 <HAL_UART_Receive_IT+0x24>
 800ee0a:	88fb      	ldrh	r3, [r7, #6]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d101      	bne.n	800ee14 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ee10:	2301      	movs	r3, #1
 800ee12:	e03b      	b.n	800ee8c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	d101      	bne.n	800ee22 <HAL_UART_Receive_IT+0x36>
 800ee1e:	2302      	movs	r3, #2
 800ee20:	e034      	b.n	800ee8c <HAL_UART_Receive_IT+0xa0>
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2201      	movs	r2, #1
 800ee26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a17      	ldr	r2, [pc, #92]	; (800ee94 <HAL_UART_Receive_IT+0xa8>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d01f      	beq.n	800ee7a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d018      	beq.n	800ee7a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	e853 3f00 	ldrex	r3, [r3]
 800ee54:	613b      	str	r3, [r7, #16]
   return(result);
 800ee56:	693b      	ldr	r3, [r7, #16]
 800ee58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ee5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	461a      	mov	r2, r3
 800ee64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee66:	623b      	str	r3, [r7, #32]
 800ee68:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee6a:	69f9      	ldr	r1, [r7, #28]
 800ee6c:	6a3a      	ldr	r2, [r7, #32]
 800ee6e:	e841 2300 	strex	r3, r2, [r1]
 800ee72:	61bb      	str	r3, [r7, #24]
   return(result);
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1e6      	bne.n	800ee48 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ee7a:	88fb      	ldrh	r3, [r7, #6]
 800ee7c:	461a      	mov	r2, r3
 800ee7e:	68b9      	ldr	r1, [r7, #8]
 800ee80:	68f8      	ldr	r0, [r7, #12]
 800ee82:	f001 fae5 	bl	8010450 <UART_Start_Receive_IT>
 800ee86:	4603      	mov	r3, r0
 800ee88:	e000      	b.n	800ee8c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ee8a:	2302      	movs	r3, #2
  }
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3728      	adds	r7, #40	; 0x28
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	58000c00 	.word	0x58000c00

0800ee98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b0ba      	sub	sp, #232	; 0xe8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	69db      	ldr	r3, [r3, #28]
 800eea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	689b      	ldr	r3, [r3, #8]
 800eeba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800eebe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800eec2:	f640 030f 	movw	r3, #2063	; 0x80f
 800eec6:	4013      	ands	r3, r2
 800eec8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800eecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d11b      	bne.n	800ef0c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eed8:	f003 0320 	and.w	r3, r3, #32
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d015      	beq.n	800ef0c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800eee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eee4:	f003 0320 	and.w	r3, r3, #32
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d105      	bne.n	800eef8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eeec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d009      	beq.n	800ef0c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	f000 835a 	beq.w	800f5b6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	4798      	blx	r3
      }
      return;
 800ef0a:	e354      	b.n	800f5b6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ef0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	f000 811f 	beq.w	800f154 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ef16:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ef1a:	4b8b      	ldr	r3, [pc, #556]	; (800f148 <HAL_UART_IRQHandler+0x2b0>)
 800ef1c:	4013      	ands	r3, r2
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d106      	bne.n	800ef30 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ef22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ef26:	4b89      	ldr	r3, [pc, #548]	; (800f14c <HAL_UART_IRQHandler+0x2b4>)
 800ef28:	4013      	ands	r3, r2
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	f000 8112 	beq.w	800f154 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ef30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef34:	f003 0301 	and.w	r3, r3, #1
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d011      	beq.n	800ef60 <HAL_UART_IRQHandler+0xc8>
 800ef3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d00b      	beq.n	800ef60 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2201      	movs	r2, #1
 800ef4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef56:	f043 0201 	orr.w	r2, r3, #1
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef64:	f003 0302 	and.w	r3, r3, #2
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d011      	beq.n	800ef90 <HAL_UART_IRQHandler+0xf8>
 800ef6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef70:	f003 0301 	and.w	r3, r3, #1
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d00b      	beq.n	800ef90 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	2202      	movs	r2, #2
 800ef7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef86:	f043 0204 	orr.w	r2, r3, #4
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef94:	f003 0304 	and.w	r3, r3, #4
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d011      	beq.n	800efc0 <HAL_UART_IRQHandler+0x128>
 800ef9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800efa0:	f003 0301 	and.w	r3, r3, #1
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d00b      	beq.n	800efc0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2204      	movs	r2, #4
 800efae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800efb6:	f043 0202 	orr.w	r2, r3, #2
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800efc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800efc4:	f003 0308 	and.w	r3, r3, #8
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d017      	beq.n	800effc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800efcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800efd0:	f003 0320 	and.w	r3, r3, #32
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d105      	bne.n	800efe4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800efd8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800efdc:	4b5a      	ldr	r3, [pc, #360]	; (800f148 <HAL_UART_IRQHandler+0x2b0>)
 800efde:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d00b      	beq.n	800effc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	2208      	movs	r2, #8
 800efea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eff2:	f043 0208 	orr.w	r2, r3, #8
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800effc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f004:	2b00      	cmp	r3, #0
 800f006:	d012      	beq.n	800f02e <HAL_UART_IRQHandler+0x196>
 800f008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f00c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f010:	2b00      	cmp	r3, #0
 800f012:	d00c      	beq.n	800f02e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f01c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f024:	f043 0220 	orr.w	r2, r3, #32
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f034:	2b00      	cmp	r3, #0
 800f036:	f000 82c0 	beq.w	800f5ba <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f03a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f03e:	f003 0320 	and.w	r3, r3, #32
 800f042:	2b00      	cmp	r3, #0
 800f044:	d013      	beq.n	800f06e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f04a:	f003 0320 	and.w	r3, r3, #32
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d105      	bne.n	800f05e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d007      	beq.n	800f06e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f062:	2b00      	cmp	r3, #0
 800f064:	d003      	beq.n	800f06e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f074:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	689b      	ldr	r3, [r3, #8]
 800f07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f082:	2b40      	cmp	r3, #64	; 0x40
 800f084:	d005      	beq.n	800f092 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f08a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d04f      	beq.n	800f132 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f001 fb06 	bl	80106a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	689b      	ldr	r3, [r3, #8]
 800f09e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0a2:	2b40      	cmp	r3, #64	; 0x40
 800f0a4:	d141      	bne.n	800f12a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	3308      	adds	r3, #8
 800f0ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f0b4:	e853 3f00 	ldrex	r3, [r3]
 800f0b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f0bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f0c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	3308      	adds	r3, #8
 800f0ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f0d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f0d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f0de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f0e2:	e841 2300 	strex	r3, r2, [r1]
 800f0e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f0ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d1d9      	bne.n	800f0a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d013      	beq.n	800f122 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0fe:	4a14      	ldr	r2, [pc, #80]	; (800f150 <HAL_UART_IRQHandler+0x2b8>)
 800f100:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f106:	4618      	mov	r0, r3
 800f108:	f7f7 f8da 	bl	80062c0 <HAL_DMA_Abort_IT>
 800f10c:	4603      	mov	r3, r0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d017      	beq.n	800f142 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800f11c:	4610      	mov	r0, r2
 800f11e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f120:	e00f      	b.n	800f142 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 fa60 	bl	800f5e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f128:	e00b      	b.n	800f142 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 fa5c 	bl	800f5e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f130:	e007      	b.n	800f142 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f000 fa58 	bl	800f5e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2200      	movs	r2, #0
 800f13c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f140:	e23b      	b.n	800f5ba <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f142:	bf00      	nop
    return;
 800f144:	e239      	b.n	800f5ba <HAL_UART_IRQHandler+0x722>
 800f146:	bf00      	nop
 800f148:	10000001 	.word	0x10000001
 800f14c:	04000120 	.word	0x04000120
 800f150:	08010771 	.word	0x08010771

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f158:	2b01      	cmp	r3, #1
 800f15a:	f040 81ce 	bne.w	800f4fa <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f162:	f003 0310 	and.w	r3, r3, #16
 800f166:	2b00      	cmp	r3, #0
 800f168:	f000 81c7 	beq.w	800f4fa <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f16c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f170:	f003 0310 	and.w	r3, r3, #16
 800f174:	2b00      	cmp	r3, #0
 800f176:	f000 81c0 	beq.w	800f4fa <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	2210      	movs	r2, #16
 800f180:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	689b      	ldr	r3, [r3, #8]
 800f188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f18c:	2b40      	cmp	r3, #64	; 0x40
 800f18e:	f040 813b 	bne.w	800f408 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	4a8b      	ldr	r2, [pc, #556]	; (800f3c8 <HAL_UART_IRQHandler+0x530>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d059      	beq.n	800f252 <HAL_UART_IRQHandler+0x3ba>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	4a89      	ldr	r2, [pc, #548]	; (800f3cc <HAL_UART_IRQHandler+0x534>)
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d053      	beq.n	800f252 <HAL_UART_IRQHandler+0x3ba>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	4a87      	ldr	r2, [pc, #540]	; (800f3d0 <HAL_UART_IRQHandler+0x538>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d04d      	beq.n	800f252 <HAL_UART_IRQHandler+0x3ba>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	4a85      	ldr	r2, [pc, #532]	; (800f3d4 <HAL_UART_IRQHandler+0x53c>)
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	d047      	beq.n	800f252 <HAL_UART_IRQHandler+0x3ba>
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	4a83      	ldr	r2, [pc, #524]	; (800f3d8 <HAL_UART_IRQHandler+0x540>)
 800f1ca:	4293      	cmp	r3, r2
 800f1cc:	d041      	beq.n	800f252 <HAL_UART_IRQHandler+0x3ba>
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	4a81      	ldr	r2, [pc, #516]	; (800f3dc <HAL_UART_IRQHandler+0x544>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d03b      	beq.n	800f252 <HAL_UART_IRQHandler+0x3ba>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4a7f      	ldr	r2, [pc, #508]	; (800f3e0 <HAL_UART_IRQHandler+0x548>)
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d035      	beq.n	800f252 <HAL_UART_IRQHandler+0x3ba>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4a7d      	ldr	r2, [pc, #500]	; (800f3e4 <HAL_UART_IRQHandler+0x54c>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d02f      	beq.n	800f252 <HAL_UART_IRQHandler+0x3ba>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	4a7b      	ldr	r2, [pc, #492]	; (800f3e8 <HAL_UART_IRQHandler+0x550>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d029      	beq.n	800f252 <HAL_UART_IRQHandler+0x3ba>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4a79      	ldr	r2, [pc, #484]	; (800f3ec <HAL_UART_IRQHandler+0x554>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d023      	beq.n	800f252 <HAL_UART_IRQHandler+0x3ba>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4a77      	ldr	r2, [pc, #476]	; (800f3f0 <HAL_UART_IRQHandler+0x558>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d01d      	beq.n	800f252 <HAL_UART_IRQHandler+0x3ba>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4a75      	ldr	r2, [pc, #468]	; (800f3f4 <HAL_UART_IRQHandler+0x55c>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d017      	beq.n	800f252 <HAL_UART_IRQHandler+0x3ba>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	4a73      	ldr	r2, [pc, #460]	; (800f3f8 <HAL_UART_IRQHandler+0x560>)
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d011      	beq.n	800f252 <HAL_UART_IRQHandler+0x3ba>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4a71      	ldr	r2, [pc, #452]	; (800f3fc <HAL_UART_IRQHandler+0x564>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d00b      	beq.n	800f252 <HAL_UART_IRQHandler+0x3ba>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4a6f      	ldr	r2, [pc, #444]	; (800f400 <HAL_UART_IRQHandler+0x568>)
 800f242:	4293      	cmp	r3, r2
 800f244:	d005      	beq.n	800f252 <HAL_UART_IRQHandler+0x3ba>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4a6d      	ldr	r2, [pc, #436]	; (800f404 <HAL_UART_IRQHandler+0x56c>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	d105      	bne.n	800f25e <HAL_UART_IRQHandler+0x3c6>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	e004      	b.n	800f268 <HAL_UART_IRQHandler+0x3d0>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	685b      	ldr	r3, [r3, #4]
 800f266:	b29b      	uxth	r3, r3
 800f268:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f26c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f270:	2b00      	cmp	r3, #0
 800f272:	f000 81a4 	beq.w	800f5be <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f27c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f280:	429a      	cmp	r2, r3
 800f282:	f080 819c 	bcs.w	800f5be <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f28c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f294:	69db      	ldr	r3, [r3, #28]
 800f296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f29a:	f000 8086 	beq.w	800f3aa <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f2aa:	e853 3f00 	ldrex	r3, [r3]
 800f2ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f2b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f2b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f2ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f2c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f2cc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f2d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f2d8:	e841 2300 	strex	r3, r2, [r1]
 800f2dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f2e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d1da      	bne.n	800f29e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	3308      	adds	r3, #8
 800f2ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f2f2:	e853 3f00 	ldrex	r3, [r3]
 800f2f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f2f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f2fa:	f023 0301 	bic.w	r3, r3, #1
 800f2fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	3308      	adds	r3, #8
 800f308:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f30c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f310:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f312:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f314:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f318:	e841 2300 	strex	r3, r2, [r1]
 800f31c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f31e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f320:	2b00      	cmp	r3, #0
 800f322:	d1e1      	bne.n	800f2e8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	3308      	adds	r3, #8
 800f32a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f32c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f32e:	e853 3f00 	ldrex	r3, [r3]
 800f332:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f33a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	3308      	adds	r3, #8
 800f344:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f348:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f34a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f34c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f34e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f350:	e841 2300 	strex	r3, r2, [r1]
 800f354:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d1e3      	bne.n	800f324 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2220      	movs	r2, #32
 800f360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2200      	movs	r2, #0
 800f368:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f372:	e853 3f00 	ldrex	r3, [r3]
 800f376:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f37a:	f023 0310 	bic.w	r3, r3, #16
 800f37e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	461a      	mov	r2, r3
 800f388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f38c:	65bb      	str	r3, [r7, #88]	; 0x58
 800f38e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f390:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f392:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f394:	e841 2300 	strex	r3, r2, [r1]
 800f398:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f39a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d1e4      	bne.n	800f36a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7f6 fc6d 	bl	8005c84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	1ad3      	subs	r3, r2, r3
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	4619      	mov	r1, r3
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f000 f91c 	bl	800f5fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f3c4:	e0fb      	b.n	800f5be <HAL_UART_IRQHandler+0x726>
 800f3c6:	bf00      	nop
 800f3c8:	40020010 	.word	0x40020010
 800f3cc:	40020028 	.word	0x40020028
 800f3d0:	40020040 	.word	0x40020040
 800f3d4:	40020058 	.word	0x40020058
 800f3d8:	40020070 	.word	0x40020070
 800f3dc:	40020088 	.word	0x40020088
 800f3e0:	400200a0 	.word	0x400200a0
 800f3e4:	400200b8 	.word	0x400200b8
 800f3e8:	40020410 	.word	0x40020410
 800f3ec:	40020428 	.word	0x40020428
 800f3f0:	40020440 	.word	0x40020440
 800f3f4:	40020458 	.word	0x40020458
 800f3f8:	40020470 	.word	0x40020470
 800f3fc:	40020488 	.word	0x40020488
 800f400:	400204a0 	.word	0x400204a0
 800f404:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f414:	b29b      	uxth	r3, r3
 800f416:	1ad3      	subs	r3, r2, r3
 800f418:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f422:	b29b      	uxth	r3, r3
 800f424:	2b00      	cmp	r3, #0
 800f426:	f000 80cc 	beq.w	800f5c2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f42a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f42e:	2b00      	cmp	r3, #0
 800f430:	f000 80c7 	beq.w	800f5c2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43c:	e853 3f00 	ldrex	r3, [r3]
 800f440:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f448:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	461a      	mov	r2, r3
 800f452:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f456:	647b      	str	r3, [r7, #68]	; 0x44
 800f458:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f45a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f45c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f45e:	e841 2300 	strex	r3, r2, [r1]
 800f462:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f466:	2b00      	cmp	r3, #0
 800f468:	d1e4      	bne.n	800f434 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	3308      	adds	r3, #8
 800f470:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f474:	e853 3f00 	ldrex	r3, [r3]
 800f478:	623b      	str	r3, [r7, #32]
   return(result);
 800f47a:	6a3a      	ldr	r2, [r7, #32]
 800f47c:	4b54      	ldr	r3, [pc, #336]	; (800f5d0 <HAL_UART_IRQHandler+0x738>)
 800f47e:	4013      	ands	r3, r2
 800f480:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	3308      	adds	r3, #8
 800f48a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f48e:	633a      	str	r2, [r7, #48]	; 0x30
 800f490:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f496:	e841 2300 	strex	r3, r2, [r1]
 800f49a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d1e3      	bne.n	800f46a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2220      	movs	r2, #32
 800f4a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4bc:	693b      	ldr	r3, [r7, #16]
 800f4be:	e853 3f00 	ldrex	r3, [r3]
 800f4c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f023 0310 	bic.w	r3, r3, #16
 800f4ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	461a      	mov	r2, r3
 800f4d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f4d8:	61fb      	str	r3, [r7, #28]
 800f4da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4dc:	69b9      	ldr	r1, [r7, #24]
 800f4de:	69fa      	ldr	r2, [r7, #28]
 800f4e0:	e841 2300 	strex	r3, r2, [r1]
 800f4e4:	617b      	str	r3, [r7, #20]
   return(result);
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d1e4      	bne.n	800f4b6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f4ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f000 f882 	bl	800f5fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f4f8:	e063      	b.n	800f5c2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f4fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f502:	2b00      	cmp	r3, #0
 800f504:	d00e      	beq.n	800f524 <HAL_UART_IRQHandler+0x68c>
 800f506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f50a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d008      	beq.n	800f524 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f51a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f001 fdc5 	bl	80110ac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f522:	e051      	b.n	800f5c8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d014      	beq.n	800f55a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d105      	bne.n	800f548 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f53c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f544:	2b00      	cmp	r3, #0
 800f546:	d008      	beq.n	800f55a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d03a      	beq.n	800f5c6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	4798      	blx	r3
    }
    return;
 800f558:	e035      	b.n	800f5c6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f55a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f55e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f562:	2b00      	cmp	r3, #0
 800f564:	d009      	beq.n	800f57a <HAL_UART_IRQHandler+0x6e2>
 800f566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d003      	beq.n	800f57a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f001 f912 	bl	801079c <UART_EndTransmit_IT>
    return;
 800f578:	e026      	b.n	800f5c8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f57a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f57e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f582:	2b00      	cmp	r3, #0
 800f584:	d009      	beq.n	800f59a <HAL_UART_IRQHandler+0x702>
 800f586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f58a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d003      	beq.n	800f59a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f001 fd9e 	bl	80110d4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f598:	e016      	b.n	800f5c8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f59a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f59e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d010      	beq.n	800f5c8 <HAL_UART_IRQHandler+0x730>
 800f5a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	da0c      	bge.n	800f5c8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f001 fd86 	bl	80110c0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f5b4:	e008      	b.n	800f5c8 <HAL_UART_IRQHandler+0x730>
      return;
 800f5b6:	bf00      	nop
 800f5b8:	e006      	b.n	800f5c8 <HAL_UART_IRQHandler+0x730>
    return;
 800f5ba:	bf00      	nop
 800f5bc:	e004      	b.n	800f5c8 <HAL_UART_IRQHandler+0x730>
      return;
 800f5be:	bf00      	nop
 800f5c0:	e002      	b.n	800f5c8 <HAL_UART_IRQHandler+0x730>
      return;
 800f5c2:	bf00      	nop
 800f5c4:	e000      	b.n	800f5c8 <HAL_UART_IRQHandler+0x730>
    return;
 800f5c6:	bf00      	nop
  }
}
 800f5c8:	37e8      	adds	r7, #232	; 0xe8
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd80      	pop	{r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	effffffe 	.word	0xeffffffe

0800f5d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f5dc:	bf00      	nop
 800f5de:	370c      	adds	r7, #12
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr

0800f5e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b083      	sub	sp, #12
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f5f0:	bf00      	nop
 800f5f2:	370c      	adds	r7, #12
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr

0800f5fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b083      	sub	sp, #12
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	460b      	mov	r3, r1
 800f606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f608:	bf00      	nop
 800f60a:	370c      	adds	r7, #12
 800f60c:	46bd      	mov	sp, r7
 800f60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f612:	4770      	bx	lr

0800f614 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f618:	b092      	sub	sp, #72	; 0x48
 800f61a:	af00      	add	r7, sp, #0
 800f61c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f61e:	2300      	movs	r3, #0
 800f620:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	689a      	ldr	r2, [r3, #8]
 800f628:	697b      	ldr	r3, [r7, #20]
 800f62a:	691b      	ldr	r3, [r3, #16]
 800f62c:	431a      	orrs	r2, r3
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	695b      	ldr	r3, [r3, #20]
 800f632:	431a      	orrs	r2, r3
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	69db      	ldr	r3, [r3, #28]
 800f638:	4313      	orrs	r3, r2
 800f63a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	681a      	ldr	r2, [r3, #0]
 800f642:	4bbe      	ldr	r3, [pc, #760]	; (800f93c <UART_SetConfig+0x328>)
 800f644:	4013      	ands	r3, r2
 800f646:	697a      	ldr	r2, [r7, #20]
 800f648:	6812      	ldr	r2, [r2, #0]
 800f64a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f64c:	430b      	orrs	r3, r1
 800f64e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	68da      	ldr	r2, [r3, #12]
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	430a      	orrs	r2, r1
 800f664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	699b      	ldr	r3, [r3, #24]
 800f66a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4ab3      	ldr	r2, [pc, #716]	; (800f940 <UART_SetConfig+0x32c>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d004      	beq.n	800f680 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	6a1b      	ldr	r3, [r3, #32]
 800f67a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f67c:	4313      	orrs	r3, r2
 800f67e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	689a      	ldr	r2, [r3, #8]
 800f686:	4baf      	ldr	r3, [pc, #700]	; (800f944 <UART_SetConfig+0x330>)
 800f688:	4013      	ands	r3, r2
 800f68a:	697a      	ldr	r2, [r7, #20]
 800f68c:	6812      	ldr	r2, [r2, #0]
 800f68e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f690:	430b      	orrs	r3, r1
 800f692:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f69a:	f023 010f 	bic.w	r1, r3, #15
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	430a      	orrs	r2, r1
 800f6a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	4aa6      	ldr	r2, [pc, #664]	; (800f948 <UART_SetConfig+0x334>)
 800f6b0:	4293      	cmp	r3, r2
 800f6b2:	d177      	bne.n	800f7a4 <UART_SetConfig+0x190>
 800f6b4:	4ba5      	ldr	r3, [pc, #660]	; (800f94c <UART_SetConfig+0x338>)
 800f6b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f6bc:	2b28      	cmp	r3, #40	; 0x28
 800f6be:	d86d      	bhi.n	800f79c <UART_SetConfig+0x188>
 800f6c0:	a201      	add	r2, pc, #4	; (adr r2, 800f6c8 <UART_SetConfig+0xb4>)
 800f6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c6:	bf00      	nop
 800f6c8:	0800f76d 	.word	0x0800f76d
 800f6cc:	0800f79d 	.word	0x0800f79d
 800f6d0:	0800f79d 	.word	0x0800f79d
 800f6d4:	0800f79d 	.word	0x0800f79d
 800f6d8:	0800f79d 	.word	0x0800f79d
 800f6dc:	0800f79d 	.word	0x0800f79d
 800f6e0:	0800f79d 	.word	0x0800f79d
 800f6e4:	0800f79d 	.word	0x0800f79d
 800f6e8:	0800f775 	.word	0x0800f775
 800f6ec:	0800f79d 	.word	0x0800f79d
 800f6f0:	0800f79d 	.word	0x0800f79d
 800f6f4:	0800f79d 	.word	0x0800f79d
 800f6f8:	0800f79d 	.word	0x0800f79d
 800f6fc:	0800f79d 	.word	0x0800f79d
 800f700:	0800f79d 	.word	0x0800f79d
 800f704:	0800f79d 	.word	0x0800f79d
 800f708:	0800f77d 	.word	0x0800f77d
 800f70c:	0800f79d 	.word	0x0800f79d
 800f710:	0800f79d 	.word	0x0800f79d
 800f714:	0800f79d 	.word	0x0800f79d
 800f718:	0800f79d 	.word	0x0800f79d
 800f71c:	0800f79d 	.word	0x0800f79d
 800f720:	0800f79d 	.word	0x0800f79d
 800f724:	0800f79d 	.word	0x0800f79d
 800f728:	0800f785 	.word	0x0800f785
 800f72c:	0800f79d 	.word	0x0800f79d
 800f730:	0800f79d 	.word	0x0800f79d
 800f734:	0800f79d 	.word	0x0800f79d
 800f738:	0800f79d 	.word	0x0800f79d
 800f73c:	0800f79d 	.word	0x0800f79d
 800f740:	0800f79d 	.word	0x0800f79d
 800f744:	0800f79d 	.word	0x0800f79d
 800f748:	0800f78d 	.word	0x0800f78d
 800f74c:	0800f79d 	.word	0x0800f79d
 800f750:	0800f79d 	.word	0x0800f79d
 800f754:	0800f79d 	.word	0x0800f79d
 800f758:	0800f79d 	.word	0x0800f79d
 800f75c:	0800f79d 	.word	0x0800f79d
 800f760:	0800f79d 	.word	0x0800f79d
 800f764:	0800f79d 	.word	0x0800f79d
 800f768:	0800f795 	.word	0x0800f795
 800f76c:	2301      	movs	r3, #1
 800f76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f772:	e222      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f774:	2304      	movs	r3, #4
 800f776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f77a:	e21e      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f77c:	2308      	movs	r3, #8
 800f77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f782:	e21a      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f784:	2310      	movs	r3, #16
 800f786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f78a:	e216      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f78c:	2320      	movs	r3, #32
 800f78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f792:	e212      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f794:	2340      	movs	r3, #64	; 0x40
 800f796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f79a:	e20e      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f79c:	2380      	movs	r3, #128	; 0x80
 800f79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7a2:	e20a      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	4a69      	ldr	r2, [pc, #420]	; (800f950 <UART_SetConfig+0x33c>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d130      	bne.n	800f810 <UART_SetConfig+0x1fc>
 800f7ae:	4b67      	ldr	r3, [pc, #412]	; (800f94c <UART_SetConfig+0x338>)
 800f7b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7b2:	f003 0307 	and.w	r3, r3, #7
 800f7b6:	2b05      	cmp	r3, #5
 800f7b8:	d826      	bhi.n	800f808 <UART_SetConfig+0x1f4>
 800f7ba:	a201      	add	r2, pc, #4	; (adr r2, 800f7c0 <UART_SetConfig+0x1ac>)
 800f7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7c0:	0800f7d9 	.word	0x0800f7d9
 800f7c4:	0800f7e1 	.word	0x0800f7e1
 800f7c8:	0800f7e9 	.word	0x0800f7e9
 800f7cc:	0800f7f1 	.word	0x0800f7f1
 800f7d0:	0800f7f9 	.word	0x0800f7f9
 800f7d4:	0800f801 	.word	0x0800f801
 800f7d8:	2300      	movs	r3, #0
 800f7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7de:	e1ec      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f7e0:	2304      	movs	r3, #4
 800f7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7e6:	e1e8      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f7e8:	2308      	movs	r3, #8
 800f7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ee:	e1e4      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f7f0:	2310      	movs	r3, #16
 800f7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7f6:	e1e0      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f7f8:	2320      	movs	r3, #32
 800f7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7fe:	e1dc      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f800:	2340      	movs	r3, #64	; 0x40
 800f802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f806:	e1d8      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f808:	2380      	movs	r3, #128	; 0x80
 800f80a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f80e:	e1d4      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	4a4f      	ldr	r2, [pc, #316]	; (800f954 <UART_SetConfig+0x340>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d130      	bne.n	800f87c <UART_SetConfig+0x268>
 800f81a:	4b4c      	ldr	r3, [pc, #304]	; (800f94c <UART_SetConfig+0x338>)
 800f81c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f81e:	f003 0307 	and.w	r3, r3, #7
 800f822:	2b05      	cmp	r3, #5
 800f824:	d826      	bhi.n	800f874 <UART_SetConfig+0x260>
 800f826:	a201      	add	r2, pc, #4	; (adr r2, 800f82c <UART_SetConfig+0x218>)
 800f828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f82c:	0800f845 	.word	0x0800f845
 800f830:	0800f84d 	.word	0x0800f84d
 800f834:	0800f855 	.word	0x0800f855
 800f838:	0800f85d 	.word	0x0800f85d
 800f83c:	0800f865 	.word	0x0800f865
 800f840:	0800f86d 	.word	0x0800f86d
 800f844:	2300      	movs	r3, #0
 800f846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f84a:	e1b6      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f84c:	2304      	movs	r3, #4
 800f84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f852:	e1b2      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f854:	2308      	movs	r3, #8
 800f856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f85a:	e1ae      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f85c:	2310      	movs	r3, #16
 800f85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f862:	e1aa      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f864:	2320      	movs	r3, #32
 800f866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f86a:	e1a6      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f86c:	2340      	movs	r3, #64	; 0x40
 800f86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f872:	e1a2      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f874:	2380      	movs	r3, #128	; 0x80
 800f876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f87a:	e19e      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4a35      	ldr	r2, [pc, #212]	; (800f958 <UART_SetConfig+0x344>)
 800f882:	4293      	cmp	r3, r2
 800f884:	d130      	bne.n	800f8e8 <UART_SetConfig+0x2d4>
 800f886:	4b31      	ldr	r3, [pc, #196]	; (800f94c <UART_SetConfig+0x338>)
 800f888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f88a:	f003 0307 	and.w	r3, r3, #7
 800f88e:	2b05      	cmp	r3, #5
 800f890:	d826      	bhi.n	800f8e0 <UART_SetConfig+0x2cc>
 800f892:	a201      	add	r2, pc, #4	; (adr r2, 800f898 <UART_SetConfig+0x284>)
 800f894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f898:	0800f8b1 	.word	0x0800f8b1
 800f89c:	0800f8b9 	.word	0x0800f8b9
 800f8a0:	0800f8c1 	.word	0x0800f8c1
 800f8a4:	0800f8c9 	.word	0x0800f8c9
 800f8a8:	0800f8d1 	.word	0x0800f8d1
 800f8ac:	0800f8d9 	.word	0x0800f8d9
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8b6:	e180      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f8b8:	2304      	movs	r3, #4
 800f8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8be:	e17c      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f8c0:	2308      	movs	r3, #8
 800f8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8c6:	e178      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f8c8:	2310      	movs	r3, #16
 800f8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ce:	e174      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f8d0:	2320      	movs	r3, #32
 800f8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8d6:	e170      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f8d8:	2340      	movs	r3, #64	; 0x40
 800f8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8de:	e16c      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f8e0:	2380      	movs	r3, #128	; 0x80
 800f8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8e6:	e168      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	4a1b      	ldr	r2, [pc, #108]	; (800f95c <UART_SetConfig+0x348>)
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d142      	bne.n	800f978 <UART_SetConfig+0x364>
 800f8f2:	4b16      	ldr	r3, [pc, #88]	; (800f94c <UART_SetConfig+0x338>)
 800f8f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8f6:	f003 0307 	and.w	r3, r3, #7
 800f8fa:	2b05      	cmp	r3, #5
 800f8fc:	d838      	bhi.n	800f970 <UART_SetConfig+0x35c>
 800f8fe:	a201      	add	r2, pc, #4	; (adr r2, 800f904 <UART_SetConfig+0x2f0>)
 800f900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f904:	0800f91d 	.word	0x0800f91d
 800f908:	0800f925 	.word	0x0800f925
 800f90c:	0800f92d 	.word	0x0800f92d
 800f910:	0800f935 	.word	0x0800f935
 800f914:	0800f961 	.word	0x0800f961
 800f918:	0800f969 	.word	0x0800f969
 800f91c:	2300      	movs	r3, #0
 800f91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f922:	e14a      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f924:	2304      	movs	r3, #4
 800f926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f92a:	e146      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f92c:	2308      	movs	r3, #8
 800f92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f932:	e142      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f934:	2310      	movs	r3, #16
 800f936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f93a:	e13e      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f93c:	cfff69f3 	.word	0xcfff69f3
 800f940:	58000c00 	.word	0x58000c00
 800f944:	11fff4ff 	.word	0x11fff4ff
 800f948:	40011000 	.word	0x40011000
 800f94c:	58024400 	.word	0x58024400
 800f950:	40004400 	.word	0x40004400
 800f954:	40004800 	.word	0x40004800
 800f958:	40004c00 	.word	0x40004c00
 800f95c:	40005000 	.word	0x40005000
 800f960:	2320      	movs	r3, #32
 800f962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f966:	e128      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f968:	2340      	movs	r3, #64	; 0x40
 800f96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f96e:	e124      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f970:	2380      	movs	r3, #128	; 0x80
 800f972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f976:	e120      	b.n	800fbba <UART_SetConfig+0x5a6>
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4acb      	ldr	r2, [pc, #812]	; (800fcac <UART_SetConfig+0x698>)
 800f97e:	4293      	cmp	r3, r2
 800f980:	d176      	bne.n	800fa70 <UART_SetConfig+0x45c>
 800f982:	4bcb      	ldr	r3, [pc, #812]	; (800fcb0 <UART_SetConfig+0x69c>)
 800f984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f98a:	2b28      	cmp	r3, #40	; 0x28
 800f98c:	d86c      	bhi.n	800fa68 <UART_SetConfig+0x454>
 800f98e:	a201      	add	r2, pc, #4	; (adr r2, 800f994 <UART_SetConfig+0x380>)
 800f990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f994:	0800fa39 	.word	0x0800fa39
 800f998:	0800fa69 	.word	0x0800fa69
 800f99c:	0800fa69 	.word	0x0800fa69
 800f9a0:	0800fa69 	.word	0x0800fa69
 800f9a4:	0800fa69 	.word	0x0800fa69
 800f9a8:	0800fa69 	.word	0x0800fa69
 800f9ac:	0800fa69 	.word	0x0800fa69
 800f9b0:	0800fa69 	.word	0x0800fa69
 800f9b4:	0800fa41 	.word	0x0800fa41
 800f9b8:	0800fa69 	.word	0x0800fa69
 800f9bc:	0800fa69 	.word	0x0800fa69
 800f9c0:	0800fa69 	.word	0x0800fa69
 800f9c4:	0800fa69 	.word	0x0800fa69
 800f9c8:	0800fa69 	.word	0x0800fa69
 800f9cc:	0800fa69 	.word	0x0800fa69
 800f9d0:	0800fa69 	.word	0x0800fa69
 800f9d4:	0800fa49 	.word	0x0800fa49
 800f9d8:	0800fa69 	.word	0x0800fa69
 800f9dc:	0800fa69 	.word	0x0800fa69
 800f9e0:	0800fa69 	.word	0x0800fa69
 800f9e4:	0800fa69 	.word	0x0800fa69
 800f9e8:	0800fa69 	.word	0x0800fa69
 800f9ec:	0800fa69 	.word	0x0800fa69
 800f9f0:	0800fa69 	.word	0x0800fa69
 800f9f4:	0800fa51 	.word	0x0800fa51
 800f9f8:	0800fa69 	.word	0x0800fa69
 800f9fc:	0800fa69 	.word	0x0800fa69
 800fa00:	0800fa69 	.word	0x0800fa69
 800fa04:	0800fa69 	.word	0x0800fa69
 800fa08:	0800fa69 	.word	0x0800fa69
 800fa0c:	0800fa69 	.word	0x0800fa69
 800fa10:	0800fa69 	.word	0x0800fa69
 800fa14:	0800fa59 	.word	0x0800fa59
 800fa18:	0800fa69 	.word	0x0800fa69
 800fa1c:	0800fa69 	.word	0x0800fa69
 800fa20:	0800fa69 	.word	0x0800fa69
 800fa24:	0800fa69 	.word	0x0800fa69
 800fa28:	0800fa69 	.word	0x0800fa69
 800fa2c:	0800fa69 	.word	0x0800fa69
 800fa30:	0800fa69 	.word	0x0800fa69
 800fa34:	0800fa61 	.word	0x0800fa61
 800fa38:	2301      	movs	r3, #1
 800fa3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa3e:	e0bc      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fa40:	2304      	movs	r3, #4
 800fa42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa46:	e0b8      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fa48:	2308      	movs	r3, #8
 800fa4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa4e:	e0b4      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fa50:	2310      	movs	r3, #16
 800fa52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa56:	e0b0      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fa58:	2320      	movs	r3, #32
 800fa5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa5e:	e0ac      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fa60:	2340      	movs	r3, #64	; 0x40
 800fa62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa66:	e0a8      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fa68:	2380      	movs	r3, #128	; 0x80
 800fa6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa6e:	e0a4      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a8f      	ldr	r2, [pc, #572]	; (800fcb4 <UART_SetConfig+0x6a0>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d130      	bne.n	800fadc <UART_SetConfig+0x4c8>
 800fa7a:	4b8d      	ldr	r3, [pc, #564]	; (800fcb0 <UART_SetConfig+0x69c>)
 800fa7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa7e:	f003 0307 	and.w	r3, r3, #7
 800fa82:	2b05      	cmp	r3, #5
 800fa84:	d826      	bhi.n	800fad4 <UART_SetConfig+0x4c0>
 800fa86:	a201      	add	r2, pc, #4	; (adr r2, 800fa8c <UART_SetConfig+0x478>)
 800fa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa8c:	0800faa5 	.word	0x0800faa5
 800fa90:	0800faad 	.word	0x0800faad
 800fa94:	0800fab5 	.word	0x0800fab5
 800fa98:	0800fabd 	.word	0x0800fabd
 800fa9c:	0800fac5 	.word	0x0800fac5
 800faa0:	0800facd 	.word	0x0800facd
 800faa4:	2300      	movs	r3, #0
 800faa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faaa:	e086      	b.n	800fbba <UART_SetConfig+0x5a6>
 800faac:	2304      	movs	r3, #4
 800faae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fab2:	e082      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fab4:	2308      	movs	r3, #8
 800fab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faba:	e07e      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fabc:	2310      	movs	r3, #16
 800fabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fac2:	e07a      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fac4:	2320      	movs	r3, #32
 800fac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faca:	e076      	b.n	800fbba <UART_SetConfig+0x5a6>
 800facc:	2340      	movs	r3, #64	; 0x40
 800face:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fad2:	e072      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fad4:	2380      	movs	r3, #128	; 0x80
 800fad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fada:	e06e      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fadc:	697b      	ldr	r3, [r7, #20]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a75      	ldr	r2, [pc, #468]	; (800fcb8 <UART_SetConfig+0x6a4>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d130      	bne.n	800fb48 <UART_SetConfig+0x534>
 800fae6:	4b72      	ldr	r3, [pc, #456]	; (800fcb0 <UART_SetConfig+0x69c>)
 800fae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800faea:	f003 0307 	and.w	r3, r3, #7
 800faee:	2b05      	cmp	r3, #5
 800faf0:	d826      	bhi.n	800fb40 <UART_SetConfig+0x52c>
 800faf2:	a201      	add	r2, pc, #4	; (adr r2, 800faf8 <UART_SetConfig+0x4e4>)
 800faf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf8:	0800fb11 	.word	0x0800fb11
 800fafc:	0800fb19 	.word	0x0800fb19
 800fb00:	0800fb21 	.word	0x0800fb21
 800fb04:	0800fb29 	.word	0x0800fb29
 800fb08:	0800fb31 	.word	0x0800fb31
 800fb0c:	0800fb39 	.word	0x0800fb39
 800fb10:	2300      	movs	r3, #0
 800fb12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb16:	e050      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fb18:	2304      	movs	r3, #4
 800fb1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb1e:	e04c      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fb20:	2308      	movs	r3, #8
 800fb22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb26:	e048      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fb28:	2310      	movs	r3, #16
 800fb2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb2e:	e044      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fb30:	2320      	movs	r3, #32
 800fb32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb36:	e040      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fb38:	2340      	movs	r3, #64	; 0x40
 800fb3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb3e:	e03c      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fb40:	2380      	movs	r3, #128	; 0x80
 800fb42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb46:	e038      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	4a5b      	ldr	r2, [pc, #364]	; (800fcbc <UART_SetConfig+0x6a8>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d130      	bne.n	800fbb4 <UART_SetConfig+0x5a0>
 800fb52:	4b57      	ldr	r3, [pc, #348]	; (800fcb0 <UART_SetConfig+0x69c>)
 800fb54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb56:	f003 0307 	and.w	r3, r3, #7
 800fb5a:	2b05      	cmp	r3, #5
 800fb5c:	d826      	bhi.n	800fbac <UART_SetConfig+0x598>
 800fb5e:	a201      	add	r2, pc, #4	; (adr r2, 800fb64 <UART_SetConfig+0x550>)
 800fb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb64:	0800fb7d 	.word	0x0800fb7d
 800fb68:	0800fb85 	.word	0x0800fb85
 800fb6c:	0800fb8d 	.word	0x0800fb8d
 800fb70:	0800fb95 	.word	0x0800fb95
 800fb74:	0800fb9d 	.word	0x0800fb9d
 800fb78:	0800fba5 	.word	0x0800fba5
 800fb7c:	2302      	movs	r3, #2
 800fb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb82:	e01a      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fb84:	2304      	movs	r3, #4
 800fb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb8a:	e016      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fb8c:	2308      	movs	r3, #8
 800fb8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb92:	e012      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fb94:	2310      	movs	r3, #16
 800fb96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb9a:	e00e      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fb9c:	2320      	movs	r3, #32
 800fb9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fba2:	e00a      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fba4:	2340      	movs	r3, #64	; 0x40
 800fba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbaa:	e006      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fbac:	2380      	movs	r3, #128	; 0x80
 800fbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbb2:	e002      	b.n	800fbba <UART_SetConfig+0x5a6>
 800fbb4:	2380      	movs	r3, #128	; 0x80
 800fbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fbba:	697b      	ldr	r3, [r7, #20]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	4a3f      	ldr	r2, [pc, #252]	; (800fcbc <UART_SetConfig+0x6a8>)
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	f040 80f8 	bne.w	800fdb6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fbc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fbca:	2b20      	cmp	r3, #32
 800fbcc:	dc46      	bgt.n	800fc5c <UART_SetConfig+0x648>
 800fbce:	2b02      	cmp	r3, #2
 800fbd0:	f2c0 8082 	blt.w	800fcd8 <UART_SetConfig+0x6c4>
 800fbd4:	3b02      	subs	r3, #2
 800fbd6:	2b1e      	cmp	r3, #30
 800fbd8:	d87e      	bhi.n	800fcd8 <UART_SetConfig+0x6c4>
 800fbda:	a201      	add	r2, pc, #4	; (adr r2, 800fbe0 <UART_SetConfig+0x5cc>)
 800fbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe0:	0800fc63 	.word	0x0800fc63
 800fbe4:	0800fcd9 	.word	0x0800fcd9
 800fbe8:	0800fc6b 	.word	0x0800fc6b
 800fbec:	0800fcd9 	.word	0x0800fcd9
 800fbf0:	0800fcd9 	.word	0x0800fcd9
 800fbf4:	0800fcd9 	.word	0x0800fcd9
 800fbf8:	0800fc7b 	.word	0x0800fc7b
 800fbfc:	0800fcd9 	.word	0x0800fcd9
 800fc00:	0800fcd9 	.word	0x0800fcd9
 800fc04:	0800fcd9 	.word	0x0800fcd9
 800fc08:	0800fcd9 	.word	0x0800fcd9
 800fc0c:	0800fcd9 	.word	0x0800fcd9
 800fc10:	0800fcd9 	.word	0x0800fcd9
 800fc14:	0800fcd9 	.word	0x0800fcd9
 800fc18:	0800fc8b 	.word	0x0800fc8b
 800fc1c:	0800fcd9 	.word	0x0800fcd9
 800fc20:	0800fcd9 	.word	0x0800fcd9
 800fc24:	0800fcd9 	.word	0x0800fcd9
 800fc28:	0800fcd9 	.word	0x0800fcd9
 800fc2c:	0800fcd9 	.word	0x0800fcd9
 800fc30:	0800fcd9 	.word	0x0800fcd9
 800fc34:	0800fcd9 	.word	0x0800fcd9
 800fc38:	0800fcd9 	.word	0x0800fcd9
 800fc3c:	0800fcd9 	.word	0x0800fcd9
 800fc40:	0800fcd9 	.word	0x0800fcd9
 800fc44:	0800fcd9 	.word	0x0800fcd9
 800fc48:	0800fcd9 	.word	0x0800fcd9
 800fc4c:	0800fcd9 	.word	0x0800fcd9
 800fc50:	0800fcd9 	.word	0x0800fcd9
 800fc54:	0800fcd9 	.word	0x0800fcd9
 800fc58:	0800fccb 	.word	0x0800fccb
 800fc5c:	2b40      	cmp	r3, #64	; 0x40
 800fc5e:	d037      	beq.n	800fcd0 <UART_SetConfig+0x6bc>
 800fc60:	e03a      	b.n	800fcd8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fc62:	f7fb fa55 	bl	800b110 <HAL_RCCEx_GetD3PCLK1Freq>
 800fc66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fc68:	e03c      	b.n	800fce4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fc6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fb fa64 	bl	800b13c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc78:	e034      	b.n	800fce4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fc7a:	f107 0318 	add.w	r3, r7, #24
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fb fbb0 	bl	800b3e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fc88:	e02c      	b.n	800fce4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fc8a:	4b09      	ldr	r3, [pc, #36]	; (800fcb0 <UART_SetConfig+0x69c>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f003 0320 	and.w	r3, r3, #32
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d016      	beq.n	800fcc4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fc96:	4b06      	ldr	r3, [pc, #24]	; (800fcb0 <UART_SetConfig+0x69c>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	08db      	lsrs	r3, r3, #3
 800fc9c:	f003 0303 	and.w	r3, r3, #3
 800fca0:	4a07      	ldr	r2, [pc, #28]	; (800fcc0 <UART_SetConfig+0x6ac>)
 800fca2:	fa22 f303 	lsr.w	r3, r2, r3
 800fca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fca8:	e01c      	b.n	800fce4 <UART_SetConfig+0x6d0>
 800fcaa:	bf00      	nop
 800fcac:	40011400 	.word	0x40011400
 800fcb0:	58024400 	.word	0x58024400
 800fcb4:	40007800 	.word	0x40007800
 800fcb8:	40007c00 	.word	0x40007c00
 800fcbc:	58000c00 	.word	0x58000c00
 800fcc0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fcc4:	4b9d      	ldr	r3, [pc, #628]	; (800ff3c <UART_SetConfig+0x928>)
 800fcc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcc8:	e00c      	b.n	800fce4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fcca:	4b9d      	ldr	r3, [pc, #628]	; (800ff40 <UART_SetConfig+0x92c>)
 800fccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcce:	e009      	b.n	800fce4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fcd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fcd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcd6:	e005      	b.n	800fce4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fcdc:	2301      	movs	r3, #1
 800fcde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fce2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	f000 81de 	beq.w	80100a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fcec:	697b      	ldr	r3, [r7, #20]
 800fcee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf0:	4a94      	ldr	r2, [pc, #592]	; (800ff44 <UART_SetConfig+0x930>)
 800fcf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcfa:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcfe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	685a      	ldr	r2, [r3, #4]
 800fd04:	4613      	mov	r3, r2
 800fd06:	005b      	lsls	r3, r3, #1
 800fd08:	4413      	add	r3, r2
 800fd0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d305      	bcc.n	800fd1c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	685b      	ldr	r3, [r3, #4]
 800fd14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d903      	bls.n	800fd24 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fd1c:	2301      	movs	r3, #1
 800fd1e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fd22:	e1c1      	b.n	80100a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd26:	2200      	movs	r2, #0
 800fd28:	60bb      	str	r3, [r7, #8]
 800fd2a:	60fa      	str	r2, [r7, #12]
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd30:	4a84      	ldr	r2, [pc, #528]	; (800ff44 <UART_SetConfig+0x930>)
 800fd32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	2200      	movs	r2, #0
 800fd3a:	603b      	str	r3, [r7, #0]
 800fd3c:	607a      	str	r2, [r7, #4]
 800fd3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fd42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fd46:	f7f0 fb23 	bl	8000390 <__aeabi_uldivmod>
 800fd4a:	4602      	mov	r2, r0
 800fd4c:	460b      	mov	r3, r1
 800fd4e:	4610      	mov	r0, r2
 800fd50:	4619      	mov	r1, r3
 800fd52:	f04f 0200 	mov.w	r2, #0
 800fd56:	f04f 0300 	mov.w	r3, #0
 800fd5a:	020b      	lsls	r3, r1, #8
 800fd5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fd60:	0202      	lsls	r2, r0, #8
 800fd62:	6979      	ldr	r1, [r7, #20]
 800fd64:	6849      	ldr	r1, [r1, #4]
 800fd66:	0849      	lsrs	r1, r1, #1
 800fd68:	2000      	movs	r0, #0
 800fd6a:	460c      	mov	r4, r1
 800fd6c:	4605      	mov	r5, r0
 800fd6e:	eb12 0804 	adds.w	r8, r2, r4
 800fd72:	eb43 0905 	adc.w	r9, r3, r5
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	685b      	ldr	r3, [r3, #4]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	469a      	mov	sl, r3
 800fd7e:	4693      	mov	fp, r2
 800fd80:	4652      	mov	r2, sl
 800fd82:	465b      	mov	r3, fp
 800fd84:	4640      	mov	r0, r8
 800fd86:	4649      	mov	r1, r9
 800fd88:	f7f0 fb02 	bl	8000390 <__aeabi_uldivmod>
 800fd8c:	4602      	mov	r2, r0
 800fd8e:	460b      	mov	r3, r1
 800fd90:	4613      	mov	r3, r2
 800fd92:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fd9a:	d308      	bcc.n	800fdae <UART_SetConfig+0x79a>
 800fd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fda2:	d204      	bcs.n	800fdae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fda4:	697b      	ldr	r3, [r7, #20]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdaa:	60da      	str	r2, [r3, #12]
 800fdac:	e17c      	b.n	80100a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fdae:	2301      	movs	r3, #1
 800fdb0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fdb4:	e178      	b.n	80100a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	69db      	ldr	r3, [r3, #28]
 800fdba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fdbe:	f040 80c5 	bne.w	800ff4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fdc2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fdc6:	2b20      	cmp	r3, #32
 800fdc8:	dc48      	bgt.n	800fe5c <UART_SetConfig+0x848>
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	db7b      	blt.n	800fec6 <UART_SetConfig+0x8b2>
 800fdce:	2b20      	cmp	r3, #32
 800fdd0:	d879      	bhi.n	800fec6 <UART_SetConfig+0x8b2>
 800fdd2:	a201      	add	r2, pc, #4	; (adr r2, 800fdd8 <UART_SetConfig+0x7c4>)
 800fdd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdd8:	0800fe63 	.word	0x0800fe63
 800fddc:	0800fe6b 	.word	0x0800fe6b
 800fde0:	0800fec7 	.word	0x0800fec7
 800fde4:	0800fec7 	.word	0x0800fec7
 800fde8:	0800fe73 	.word	0x0800fe73
 800fdec:	0800fec7 	.word	0x0800fec7
 800fdf0:	0800fec7 	.word	0x0800fec7
 800fdf4:	0800fec7 	.word	0x0800fec7
 800fdf8:	0800fe83 	.word	0x0800fe83
 800fdfc:	0800fec7 	.word	0x0800fec7
 800fe00:	0800fec7 	.word	0x0800fec7
 800fe04:	0800fec7 	.word	0x0800fec7
 800fe08:	0800fec7 	.word	0x0800fec7
 800fe0c:	0800fec7 	.word	0x0800fec7
 800fe10:	0800fec7 	.word	0x0800fec7
 800fe14:	0800fec7 	.word	0x0800fec7
 800fe18:	0800fe93 	.word	0x0800fe93
 800fe1c:	0800fec7 	.word	0x0800fec7
 800fe20:	0800fec7 	.word	0x0800fec7
 800fe24:	0800fec7 	.word	0x0800fec7
 800fe28:	0800fec7 	.word	0x0800fec7
 800fe2c:	0800fec7 	.word	0x0800fec7
 800fe30:	0800fec7 	.word	0x0800fec7
 800fe34:	0800fec7 	.word	0x0800fec7
 800fe38:	0800fec7 	.word	0x0800fec7
 800fe3c:	0800fec7 	.word	0x0800fec7
 800fe40:	0800fec7 	.word	0x0800fec7
 800fe44:	0800fec7 	.word	0x0800fec7
 800fe48:	0800fec7 	.word	0x0800fec7
 800fe4c:	0800fec7 	.word	0x0800fec7
 800fe50:	0800fec7 	.word	0x0800fec7
 800fe54:	0800fec7 	.word	0x0800fec7
 800fe58:	0800feb9 	.word	0x0800feb9
 800fe5c:	2b40      	cmp	r3, #64	; 0x40
 800fe5e:	d02e      	beq.n	800febe <UART_SetConfig+0x8aa>
 800fe60:	e031      	b.n	800fec6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe62:	f7f9 fd11 	bl	8009888 <HAL_RCC_GetPCLK1Freq>
 800fe66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fe68:	e033      	b.n	800fed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fe6a:	f7f9 fd23 	bl	80098b4 <HAL_RCC_GetPCLK2Freq>
 800fe6e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fe70:	e02f      	b.n	800fed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fe72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fb f960 	bl	800b13c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fe7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe80:	e027      	b.n	800fed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fe82:	f107 0318 	add.w	r3, r7, #24
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7fb faac 	bl	800b3e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fe90:	e01f      	b.n	800fed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe92:	4b2d      	ldr	r3, [pc, #180]	; (800ff48 <UART_SetConfig+0x934>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	f003 0320 	and.w	r3, r3, #32
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d009      	beq.n	800feb2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fe9e:	4b2a      	ldr	r3, [pc, #168]	; (800ff48 <UART_SetConfig+0x934>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	08db      	lsrs	r3, r3, #3
 800fea4:	f003 0303 	and.w	r3, r3, #3
 800fea8:	4a24      	ldr	r2, [pc, #144]	; (800ff3c <UART_SetConfig+0x928>)
 800feaa:	fa22 f303 	lsr.w	r3, r2, r3
 800feae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800feb0:	e00f      	b.n	800fed2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800feb2:	4b22      	ldr	r3, [pc, #136]	; (800ff3c <UART_SetConfig+0x928>)
 800feb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800feb6:	e00c      	b.n	800fed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800feb8:	4b21      	ldr	r3, [pc, #132]	; (800ff40 <UART_SetConfig+0x92c>)
 800feba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800febc:	e009      	b.n	800fed2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800febe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fec4:	e005      	b.n	800fed2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fec6:	2300      	movs	r3, #0
 800fec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800feca:	2301      	movs	r3, #1
 800fecc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fed0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	f000 80e7 	beq.w	80100a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fede:	4a19      	ldr	r2, [pc, #100]	; (800ff44 <UART_SetConfig+0x930>)
 800fee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fee4:	461a      	mov	r2, r3
 800fee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fee8:	fbb3 f3f2 	udiv	r3, r3, r2
 800feec:	005a      	lsls	r2, r3, #1
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	085b      	lsrs	r3, r3, #1
 800fef4:	441a      	add	r2, r3
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	685b      	ldr	r3, [r3, #4]
 800fefa:	fbb2 f3f3 	udiv	r3, r2, r3
 800fefe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff02:	2b0f      	cmp	r3, #15
 800ff04:	d916      	bls.n	800ff34 <UART_SetConfig+0x920>
 800ff06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff0c:	d212      	bcs.n	800ff34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ff0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff10:	b29b      	uxth	r3, r3
 800ff12:	f023 030f 	bic.w	r3, r3, #15
 800ff16:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ff18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1a:	085b      	lsrs	r3, r3, #1
 800ff1c:	b29b      	uxth	r3, r3
 800ff1e:	f003 0307 	and.w	r3, r3, #7
 800ff22:	b29a      	uxth	r2, r3
 800ff24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ff26:	4313      	orrs	r3, r2
 800ff28:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ff30:	60da      	str	r2, [r3, #12]
 800ff32:	e0b9      	b.n	80100a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ff34:	2301      	movs	r3, #1
 800ff36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ff3a:	e0b5      	b.n	80100a8 <UART_SetConfig+0xa94>
 800ff3c:	03d09000 	.word	0x03d09000
 800ff40:	003d0900 	.word	0x003d0900
 800ff44:	080123f0 	.word	0x080123f0
 800ff48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ff4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ff50:	2b20      	cmp	r3, #32
 800ff52:	dc49      	bgt.n	800ffe8 <UART_SetConfig+0x9d4>
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	db7c      	blt.n	8010052 <UART_SetConfig+0xa3e>
 800ff58:	2b20      	cmp	r3, #32
 800ff5a:	d87a      	bhi.n	8010052 <UART_SetConfig+0xa3e>
 800ff5c:	a201      	add	r2, pc, #4	; (adr r2, 800ff64 <UART_SetConfig+0x950>)
 800ff5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff62:	bf00      	nop
 800ff64:	0800ffef 	.word	0x0800ffef
 800ff68:	0800fff7 	.word	0x0800fff7
 800ff6c:	08010053 	.word	0x08010053
 800ff70:	08010053 	.word	0x08010053
 800ff74:	0800ffff 	.word	0x0800ffff
 800ff78:	08010053 	.word	0x08010053
 800ff7c:	08010053 	.word	0x08010053
 800ff80:	08010053 	.word	0x08010053
 800ff84:	0801000f 	.word	0x0801000f
 800ff88:	08010053 	.word	0x08010053
 800ff8c:	08010053 	.word	0x08010053
 800ff90:	08010053 	.word	0x08010053
 800ff94:	08010053 	.word	0x08010053
 800ff98:	08010053 	.word	0x08010053
 800ff9c:	08010053 	.word	0x08010053
 800ffa0:	08010053 	.word	0x08010053
 800ffa4:	0801001f 	.word	0x0801001f
 800ffa8:	08010053 	.word	0x08010053
 800ffac:	08010053 	.word	0x08010053
 800ffb0:	08010053 	.word	0x08010053
 800ffb4:	08010053 	.word	0x08010053
 800ffb8:	08010053 	.word	0x08010053
 800ffbc:	08010053 	.word	0x08010053
 800ffc0:	08010053 	.word	0x08010053
 800ffc4:	08010053 	.word	0x08010053
 800ffc8:	08010053 	.word	0x08010053
 800ffcc:	08010053 	.word	0x08010053
 800ffd0:	08010053 	.word	0x08010053
 800ffd4:	08010053 	.word	0x08010053
 800ffd8:	08010053 	.word	0x08010053
 800ffdc:	08010053 	.word	0x08010053
 800ffe0:	08010053 	.word	0x08010053
 800ffe4:	08010045 	.word	0x08010045
 800ffe8:	2b40      	cmp	r3, #64	; 0x40
 800ffea:	d02e      	beq.n	801004a <UART_SetConfig+0xa36>
 800ffec:	e031      	b.n	8010052 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ffee:	f7f9 fc4b 	bl	8009888 <HAL_RCC_GetPCLK1Freq>
 800fff2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fff4:	e033      	b.n	801005e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fff6:	f7f9 fc5d 	bl	80098b4 <HAL_RCC_GetPCLK2Freq>
 800fffa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fffc:	e02f      	b.n	801005e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010002:	4618      	mov	r0, r3
 8010004:	f7fb f89a 	bl	800b13c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801000a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801000c:	e027      	b.n	801005e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801000e:	f107 0318 	add.w	r3, r7, #24
 8010012:	4618      	mov	r0, r3
 8010014:	f7fb f9e6 	bl	800b3e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010018:	69fb      	ldr	r3, [r7, #28]
 801001a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801001c:	e01f      	b.n	801005e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801001e:	4b2d      	ldr	r3, [pc, #180]	; (80100d4 <UART_SetConfig+0xac0>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	f003 0320 	and.w	r3, r3, #32
 8010026:	2b00      	cmp	r3, #0
 8010028:	d009      	beq.n	801003e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801002a:	4b2a      	ldr	r3, [pc, #168]	; (80100d4 <UART_SetConfig+0xac0>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	08db      	lsrs	r3, r3, #3
 8010030:	f003 0303 	and.w	r3, r3, #3
 8010034:	4a28      	ldr	r2, [pc, #160]	; (80100d8 <UART_SetConfig+0xac4>)
 8010036:	fa22 f303 	lsr.w	r3, r2, r3
 801003a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801003c:	e00f      	b.n	801005e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801003e:	4b26      	ldr	r3, [pc, #152]	; (80100d8 <UART_SetConfig+0xac4>)
 8010040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010042:	e00c      	b.n	801005e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010044:	4b25      	ldr	r3, [pc, #148]	; (80100dc <UART_SetConfig+0xac8>)
 8010046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010048:	e009      	b.n	801005e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801004a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801004e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010050:	e005      	b.n	801005e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8010052:	2300      	movs	r3, #0
 8010054:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010056:	2301      	movs	r3, #1
 8010058:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801005c:	bf00      	nop
    }

    if (pclk != 0U)
 801005e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010060:	2b00      	cmp	r3, #0
 8010062:	d021      	beq.n	80100a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010068:	4a1d      	ldr	r2, [pc, #116]	; (80100e0 <UART_SetConfig+0xacc>)
 801006a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801006e:	461a      	mov	r2, r3
 8010070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010072:	fbb3 f2f2 	udiv	r2, r3, r2
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	085b      	lsrs	r3, r3, #1
 801007c:	441a      	add	r2, r3
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	685b      	ldr	r3, [r3, #4]
 8010082:	fbb2 f3f3 	udiv	r3, r2, r3
 8010086:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008a:	2b0f      	cmp	r3, #15
 801008c:	d909      	bls.n	80100a2 <UART_SetConfig+0xa8e>
 801008e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010094:	d205      	bcs.n	80100a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010098:	b29a      	uxth	r2, r3
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	60da      	str	r2, [r3, #12]
 80100a0:	e002      	b.n	80100a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80100a2:	2301      	movs	r3, #1
 80100a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	2201      	movs	r2, #1
 80100ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	2201      	movs	r2, #1
 80100b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80100b8:	697b      	ldr	r3, [r7, #20]
 80100ba:	2200      	movs	r2, #0
 80100bc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80100be:	697b      	ldr	r3, [r7, #20]
 80100c0:	2200      	movs	r2, #0
 80100c2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80100c4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3748      	adds	r7, #72	; 0x48
 80100cc:	46bd      	mov	sp, r7
 80100ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80100d2:	bf00      	nop
 80100d4:	58024400 	.word	0x58024400
 80100d8:	03d09000 	.word	0x03d09000
 80100dc:	003d0900 	.word	0x003d0900
 80100e0:	080123f0 	.word	0x080123f0

080100e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80100e4:	b480      	push	{r7}
 80100e6:	b083      	sub	sp, #12
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100f0:	f003 0301 	and.w	r3, r3, #1
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d00a      	beq.n	801010e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	430a      	orrs	r2, r1
 801010c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010112:	f003 0302 	and.w	r3, r3, #2
 8010116:	2b00      	cmp	r3, #0
 8010118:	d00a      	beq.n	8010130 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	685b      	ldr	r3, [r3, #4]
 8010120:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	430a      	orrs	r2, r1
 801012e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010134:	f003 0304 	and.w	r3, r3, #4
 8010138:	2b00      	cmp	r3, #0
 801013a:	d00a      	beq.n	8010152 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	430a      	orrs	r2, r1
 8010150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010156:	f003 0308 	and.w	r3, r3, #8
 801015a:	2b00      	cmp	r3, #0
 801015c:	d00a      	beq.n	8010174 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	430a      	orrs	r2, r1
 8010172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010178:	f003 0310 	and.w	r3, r3, #16
 801017c:	2b00      	cmp	r3, #0
 801017e:	d00a      	beq.n	8010196 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	689b      	ldr	r3, [r3, #8]
 8010186:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	430a      	orrs	r2, r1
 8010194:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801019a:	f003 0320 	and.w	r3, r3, #32
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d00a      	beq.n	80101b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	689b      	ldr	r3, [r3, #8]
 80101a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	430a      	orrs	r2, r1
 80101b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d01a      	beq.n	80101fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	685b      	ldr	r3, [r3, #4]
 80101ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	430a      	orrs	r2, r1
 80101d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80101e2:	d10a      	bne.n	80101fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	685b      	ldr	r3, [r3, #4]
 80101ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	430a      	orrs	r2, r1
 80101f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010202:	2b00      	cmp	r3, #0
 8010204:	d00a      	beq.n	801021c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	430a      	orrs	r2, r1
 801021a:	605a      	str	r2, [r3, #4]
  }
}
 801021c:	bf00      	nop
 801021e:	370c      	adds	r7, #12
 8010220:	46bd      	mov	sp, r7
 8010222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010226:	4770      	bx	lr

08010228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b086      	sub	sp, #24
 801022c:	af02      	add	r7, sp, #8
 801022e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2200      	movs	r2, #0
 8010234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010238:	f7f3 f896 	bl	8003368 <HAL_GetTick>
 801023c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f003 0308 	and.w	r3, r3, #8
 8010248:	2b08      	cmp	r3, #8
 801024a:	d10e      	bne.n	801026a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801024c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010250:	9300      	str	r3, [sp, #0]
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	2200      	movs	r2, #0
 8010256:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f000 f82f 	bl	80102be <UART_WaitOnFlagUntilTimeout>
 8010260:	4603      	mov	r3, r0
 8010262:	2b00      	cmp	r3, #0
 8010264:	d001      	beq.n	801026a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010266:	2303      	movs	r3, #3
 8010268:	e025      	b.n	80102b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f003 0304 	and.w	r3, r3, #4
 8010274:	2b04      	cmp	r3, #4
 8010276:	d10e      	bne.n	8010296 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010278:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801027c:	9300      	str	r3, [sp, #0]
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2200      	movs	r2, #0
 8010282:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f000 f819 	bl	80102be <UART_WaitOnFlagUntilTimeout>
 801028c:	4603      	mov	r3, r0
 801028e:	2b00      	cmp	r3, #0
 8010290:	d001      	beq.n	8010296 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010292:	2303      	movs	r3, #3
 8010294:	e00f      	b.n	80102b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2220      	movs	r2, #32
 801029a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2220      	movs	r2, #32
 80102a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2200      	movs	r2, #0
 80102aa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2200      	movs	r2, #0
 80102b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80102b4:	2300      	movs	r3, #0
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3710      	adds	r7, #16
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}

080102be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80102be:	b580      	push	{r7, lr}
 80102c0:	b09c      	sub	sp, #112	; 0x70
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	60f8      	str	r0, [r7, #12]
 80102c6:	60b9      	str	r1, [r7, #8]
 80102c8:	603b      	str	r3, [r7, #0]
 80102ca:	4613      	mov	r3, r2
 80102cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102ce:	e0a9      	b.n	8010424 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80102d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80102d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102d6:	f000 80a5 	beq.w	8010424 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80102da:	f7f3 f845 	bl	8003368 <HAL_GetTick>
 80102de:	4602      	mov	r2, r0
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	1ad3      	subs	r3, r2, r3
 80102e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d302      	bcc.n	80102f0 <UART_WaitOnFlagUntilTimeout+0x32>
 80102ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d140      	bne.n	8010372 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102f8:	e853 3f00 	ldrex	r3, [r3]
 80102fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80102fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010300:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010304:	667b      	str	r3, [r7, #100]	; 0x64
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	461a      	mov	r2, r3
 801030c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801030e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010310:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010312:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010314:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010316:	e841 2300 	strex	r3, r2, [r1]
 801031a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801031c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801031e:	2b00      	cmp	r3, #0
 8010320:	d1e6      	bne.n	80102f0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	3308      	adds	r3, #8
 8010328:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801032a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801032c:	e853 3f00 	ldrex	r3, [r3]
 8010330:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010334:	f023 0301 	bic.w	r3, r3, #1
 8010338:	663b      	str	r3, [r7, #96]	; 0x60
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	3308      	adds	r3, #8
 8010340:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010342:	64ba      	str	r2, [r7, #72]	; 0x48
 8010344:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010346:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801034a:	e841 2300 	strex	r3, r2, [r1]
 801034e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010352:	2b00      	cmp	r3, #0
 8010354:	d1e5      	bne.n	8010322 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2220      	movs	r2, #32
 801035a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2220      	movs	r2, #32
 8010362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	2200      	movs	r2, #0
 801036a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801036e:	2303      	movs	r3, #3
 8010370:	e069      	b.n	8010446 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	f003 0304 	and.w	r3, r3, #4
 801037c:	2b00      	cmp	r3, #0
 801037e:	d051      	beq.n	8010424 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	69db      	ldr	r3, [r3, #28]
 8010386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801038a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801038e:	d149      	bne.n	8010424 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010398:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a2:	e853 3f00 	ldrex	r3, [r3]
 80103a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80103a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80103ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	461a      	mov	r2, r3
 80103b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80103b8:	637b      	str	r3, [r7, #52]	; 0x34
 80103ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80103be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103c0:	e841 2300 	strex	r3, r2, [r1]
 80103c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80103c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d1e6      	bne.n	801039a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	3308      	adds	r3, #8
 80103d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	e853 3f00 	ldrex	r3, [r3]
 80103da:	613b      	str	r3, [r7, #16]
   return(result);
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	f023 0301 	bic.w	r3, r3, #1
 80103e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	3308      	adds	r3, #8
 80103ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80103ec:	623a      	str	r2, [r7, #32]
 80103ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103f0:	69f9      	ldr	r1, [r7, #28]
 80103f2:	6a3a      	ldr	r2, [r7, #32]
 80103f4:	e841 2300 	strex	r3, r2, [r1]
 80103f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d1e5      	bne.n	80103cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	2220      	movs	r2, #32
 8010404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	2220      	movs	r2, #32
 801040c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	2220      	movs	r2, #32
 8010414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	2200      	movs	r2, #0
 801041c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010420:	2303      	movs	r3, #3
 8010422:	e010      	b.n	8010446 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	69da      	ldr	r2, [r3, #28]
 801042a:	68bb      	ldr	r3, [r7, #8]
 801042c:	4013      	ands	r3, r2
 801042e:	68ba      	ldr	r2, [r7, #8]
 8010430:	429a      	cmp	r2, r3
 8010432:	bf0c      	ite	eq
 8010434:	2301      	moveq	r3, #1
 8010436:	2300      	movne	r3, #0
 8010438:	b2db      	uxtb	r3, r3
 801043a:	461a      	mov	r2, r3
 801043c:	79fb      	ldrb	r3, [r7, #7]
 801043e:	429a      	cmp	r2, r3
 8010440:	f43f af46 	beq.w	80102d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010444:	2300      	movs	r3, #0
}
 8010446:	4618      	mov	r0, r3
 8010448:	3770      	adds	r7, #112	; 0x70
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
	...

08010450 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010450:	b480      	push	{r7}
 8010452:	b0a3      	sub	sp, #140	; 0x8c
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	4613      	mov	r3, r2
 801045c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	68ba      	ldr	r2, [r7, #8]
 8010462:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	88fa      	ldrh	r2, [r7, #6]
 8010468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	88fa      	ldrh	r2, [r7, #6]
 8010470:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	2200      	movs	r2, #0
 8010478:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	689b      	ldr	r3, [r3, #8]
 801047e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010482:	d10e      	bne.n	80104a2 <UART_Start_Receive_IT+0x52>
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	691b      	ldr	r3, [r3, #16]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d105      	bne.n	8010498 <UART_Start_Receive_IT+0x48>
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010492:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010496:	e02d      	b.n	80104f4 <UART_Start_Receive_IT+0xa4>
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	22ff      	movs	r2, #255	; 0xff
 801049c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80104a0:	e028      	b.n	80104f4 <UART_Start_Receive_IT+0xa4>
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	689b      	ldr	r3, [r3, #8]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d10d      	bne.n	80104c6 <UART_Start_Receive_IT+0x76>
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	691b      	ldr	r3, [r3, #16]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d104      	bne.n	80104bc <UART_Start_Receive_IT+0x6c>
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	22ff      	movs	r2, #255	; 0xff
 80104b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80104ba:	e01b      	b.n	80104f4 <UART_Start_Receive_IT+0xa4>
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	227f      	movs	r2, #127	; 0x7f
 80104c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80104c4:	e016      	b.n	80104f4 <UART_Start_Receive_IT+0xa4>
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	689b      	ldr	r3, [r3, #8]
 80104ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80104ce:	d10d      	bne.n	80104ec <UART_Start_Receive_IT+0x9c>
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	691b      	ldr	r3, [r3, #16]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d104      	bne.n	80104e2 <UART_Start_Receive_IT+0x92>
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	227f      	movs	r2, #127	; 0x7f
 80104dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80104e0:	e008      	b.n	80104f4 <UART_Start_Receive_IT+0xa4>
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	223f      	movs	r2, #63	; 0x3f
 80104e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80104ea:	e003      	b.n	80104f4 <UART_Start_Receive_IT+0xa4>
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2200      	movs	r2, #0
 80104f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	2200      	movs	r2, #0
 80104f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2222      	movs	r2, #34	; 0x22
 8010500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	3308      	adds	r3, #8
 801050a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801050c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801050e:	e853 3f00 	ldrex	r3, [r3]
 8010512:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010516:	f043 0301 	orr.w	r3, r3, #1
 801051a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	3308      	adds	r3, #8
 8010524:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010528:	673a      	str	r2, [r7, #112]	; 0x70
 801052a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801052c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801052e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010530:	e841 2300 	strex	r3, r2, [r1]
 8010534:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8010536:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010538:	2b00      	cmp	r3, #0
 801053a:	d1e3      	bne.n	8010504 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010544:	d153      	bne.n	80105ee <UART_Start_Receive_IT+0x19e>
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801054c:	88fa      	ldrh	r2, [r7, #6]
 801054e:	429a      	cmp	r2, r3
 8010550:	d34d      	bcc.n	80105ee <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	689b      	ldr	r3, [r3, #8]
 8010556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801055a:	d107      	bne.n	801056c <UART_Start_Receive_IT+0x11c>
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	691b      	ldr	r3, [r3, #16]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d103      	bne.n	801056c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	4a4b      	ldr	r2, [pc, #300]	; (8010694 <UART_Start_Receive_IT+0x244>)
 8010568:	671a      	str	r2, [r3, #112]	; 0x70
 801056a:	e002      	b.n	8010572 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	4a4a      	ldr	r2, [pc, #296]	; (8010698 <UART_Start_Receive_IT+0x248>)
 8010570:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	2200      	movs	r2, #0
 8010576:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	691b      	ldr	r3, [r3, #16]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d01a      	beq.n	80105b8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801058a:	e853 3f00 	ldrex	r3, [r3]
 801058e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010596:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	461a      	mov	r2, r3
 80105a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80105a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80105a6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80105aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80105ac:	e841 2300 	strex	r3, r2, [r1]
 80105b0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80105b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d1e4      	bne.n	8010582 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	3308      	adds	r3, #8
 80105be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105c2:	e853 3f00 	ldrex	r3, [r3]
 80105c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80105c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80105ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	3308      	adds	r3, #8
 80105d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80105d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80105da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80105de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80105e0:	e841 2300 	strex	r3, r2, [r1]
 80105e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80105e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d1e5      	bne.n	80105b8 <UART_Start_Receive_IT+0x168>
 80105ec:	e04a      	b.n	8010684 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	689b      	ldr	r3, [r3, #8]
 80105f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105f6:	d107      	bne.n	8010608 <UART_Start_Receive_IT+0x1b8>
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	691b      	ldr	r3, [r3, #16]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d103      	bne.n	8010608 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	4a26      	ldr	r2, [pc, #152]	; (801069c <UART_Start_Receive_IT+0x24c>)
 8010604:	671a      	str	r2, [r3, #112]	; 0x70
 8010606:	e002      	b.n	801060e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	4a25      	ldr	r2, [pc, #148]	; (80106a0 <UART_Start_Receive_IT+0x250>)
 801060c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	2200      	movs	r2, #0
 8010612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	691b      	ldr	r3, [r3, #16]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d019      	beq.n	8010652 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010626:	e853 3f00 	ldrex	r3, [r3]
 801062a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8010632:	677b      	str	r3, [r7, #116]	; 0x74
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	461a      	mov	r2, r3
 801063a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801063c:	637b      	str	r3, [r7, #52]	; 0x34
 801063e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010640:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010642:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010644:	e841 2300 	strex	r3, r2, [r1]
 8010648:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064c:	2b00      	cmp	r3, #0
 801064e:	d1e6      	bne.n	801061e <UART_Start_Receive_IT+0x1ce>
 8010650:	e018      	b.n	8010684 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	e853 3f00 	ldrex	r3, [r3]
 801065e:	613b      	str	r3, [r7, #16]
   return(result);
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	f043 0320 	orr.w	r3, r3, #32
 8010666:	67bb      	str	r3, [r7, #120]	; 0x78
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	461a      	mov	r2, r3
 801066e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010670:	623b      	str	r3, [r7, #32]
 8010672:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010674:	69f9      	ldr	r1, [r7, #28]
 8010676:	6a3a      	ldr	r2, [r7, #32]
 8010678:	e841 2300 	strex	r3, r2, [r1]
 801067c:	61bb      	str	r3, [r7, #24]
   return(result);
 801067e:	69bb      	ldr	r3, [r7, #24]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d1e6      	bne.n	8010652 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8010684:	2300      	movs	r3, #0
}
 8010686:	4618      	mov	r0, r3
 8010688:	378c      	adds	r7, #140	; 0x8c
 801068a:	46bd      	mov	sp, r7
 801068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010690:	4770      	bx	lr
 8010692:	bf00      	nop
 8010694:	08010dad 	.word	0x08010dad
 8010698:	08010ab5 	.word	0x08010ab5
 801069c:	08010953 	.word	0x08010953
 80106a0:	080107f3 	.word	0x080107f3

080106a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b095      	sub	sp, #84	; 0x54
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106b4:	e853 3f00 	ldrex	r3, [r3]
 80106b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80106ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80106c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	461a      	mov	r2, r3
 80106c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106ca:	643b      	str	r3, [r7, #64]	; 0x40
 80106cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80106d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106d2:	e841 2300 	strex	r3, r2, [r1]
 80106d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80106d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d1e6      	bne.n	80106ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	3308      	adds	r3, #8
 80106e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106e6:	6a3b      	ldr	r3, [r7, #32]
 80106e8:	e853 3f00 	ldrex	r3, [r3]
 80106ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80106ee:	69fa      	ldr	r2, [r7, #28]
 80106f0:	4b1e      	ldr	r3, [pc, #120]	; (801076c <UART_EndRxTransfer+0xc8>)
 80106f2:	4013      	ands	r3, r2
 80106f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	3308      	adds	r3, #8
 80106fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010700:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010706:	e841 2300 	strex	r3, r2, [r1]
 801070a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070e:	2b00      	cmp	r3, #0
 8010710:	d1e5      	bne.n	80106de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010716:	2b01      	cmp	r3, #1
 8010718:	d118      	bne.n	801074c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	e853 3f00 	ldrex	r3, [r3]
 8010726:	60bb      	str	r3, [r7, #8]
   return(result);
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	f023 0310 	bic.w	r3, r3, #16
 801072e:	647b      	str	r3, [r7, #68]	; 0x44
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	461a      	mov	r2, r3
 8010736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010738:	61bb      	str	r3, [r7, #24]
 801073a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801073c:	6979      	ldr	r1, [r7, #20]
 801073e:	69ba      	ldr	r2, [r7, #24]
 8010740:	e841 2300 	strex	r3, r2, [r1]
 8010744:	613b      	str	r3, [r7, #16]
   return(result);
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d1e6      	bne.n	801071a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2220      	movs	r2, #32
 8010750:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2200      	movs	r2, #0
 8010758:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2200      	movs	r2, #0
 801075e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8010760:	bf00      	nop
 8010762:	3754      	adds	r7, #84	; 0x54
 8010764:	46bd      	mov	sp, r7
 8010766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076a:	4770      	bx	lr
 801076c:	effffffe 	.word	0xeffffffe

08010770 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010770:	b580      	push	{r7, lr}
 8010772:	b084      	sub	sp, #16
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801077c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	2200      	movs	r2, #0
 8010782:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	2200      	movs	r2, #0
 801078a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801078e:	68f8      	ldr	r0, [r7, #12]
 8010790:	f7fe ff2a 	bl	800f5e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010794:	bf00      	nop
 8010796:	3710      	adds	r7, #16
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}

0801079c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b088      	sub	sp, #32
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	e853 3f00 	ldrex	r3, [r3]
 80107b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80107b8:	61fb      	str	r3, [r7, #28]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	461a      	mov	r2, r3
 80107c0:	69fb      	ldr	r3, [r7, #28]
 80107c2:	61bb      	str	r3, [r7, #24]
 80107c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c6:	6979      	ldr	r1, [r7, #20]
 80107c8:	69ba      	ldr	r2, [r7, #24]
 80107ca:	e841 2300 	strex	r3, r2, [r1]
 80107ce:	613b      	str	r3, [r7, #16]
   return(result);
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d1e6      	bne.n	80107a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2220      	movs	r2, #32
 80107da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2200      	movs	r2, #0
 80107e2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f7fe fef5 	bl	800f5d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80107ea:	bf00      	nop
 80107ec:	3720      	adds	r7, #32
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}

080107f2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80107f2:	b580      	push	{r7, lr}
 80107f4:	b096      	sub	sp, #88	; 0x58
 80107f6:	af00      	add	r7, sp, #0
 80107f8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010800:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801080a:	2b22      	cmp	r3, #34	; 0x22
 801080c:	f040 8095 	bne.w	801093a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010816:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801081a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801081e:	b2d9      	uxtb	r1, r3
 8010820:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010824:	b2da      	uxtb	r2, r3
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801082a:	400a      	ands	r2, r1
 801082c:	b2d2      	uxtb	r2, r2
 801082e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010834:	1c5a      	adds	r2, r3, #1
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010840:	b29b      	uxth	r3, r3
 8010842:	3b01      	subs	r3, #1
 8010844:	b29a      	uxth	r2, r3
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010852:	b29b      	uxth	r3, r3
 8010854:	2b00      	cmp	r3, #0
 8010856:	d178      	bne.n	801094a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801085e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010860:	e853 3f00 	ldrex	r3, [r3]
 8010864:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801086c:	653b      	str	r3, [r7, #80]	; 0x50
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	461a      	mov	r2, r3
 8010874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010876:	647b      	str	r3, [r7, #68]	; 0x44
 8010878:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801087a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801087c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801087e:	e841 2300 	strex	r3, r2, [r1]
 8010882:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010886:	2b00      	cmp	r3, #0
 8010888:	d1e6      	bne.n	8010858 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	3308      	adds	r3, #8
 8010890:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010894:	e853 3f00 	ldrex	r3, [r3]
 8010898:	623b      	str	r3, [r7, #32]
   return(result);
 801089a:	6a3b      	ldr	r3, [r7, #32]
 801089c:	f023 0301 	bic.w	r3, r3, #1
 80108a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	3308      	adds	r3, #8
 80108a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80108aa:	633a      	str	r2, [r7, #48]	; 0x30
 80108ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80108b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80108b2:	e841 2300 	strex	r3, r2, [r1]
 80108b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80108b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d1e5      	bne.n	801088a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2220      	movs	r2, #32
 80108c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2200      	movs	r2, #0
 80108ca:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	d12e      	bne.n	8010932 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2200      	movs	r2, #0
 80108d8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108e0:	693b      	ldr	r3, [r7, #16]
 80108e2:	e853 3f00 	ldrex	r3, [r3]
 80108e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f023 0310 	bic.w	r3, r3, #16
 80108ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	461a      	mov	r2, r3
 80108f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80108f8:	61fb      	str	r3, [r7, #28]
 80108fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108fc:	69b9      	ldr	r1, [r7, #24]
 80108fe:	69fa      	ldr	r2, [r7, #28]
 8010900:	e841 2300 	strex	r3, r2, [r1]
 8010904:	617b      	str	r3, [r7, #20]
   return(result);
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d1e6      	bne.n	80108da <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	69db      	ldr	r3, [r3, #28]
 8010912:	f003 0310 	and.w	r3, r3, #16
 8010916:	2b10      	cmp	r3, #16
 8010918:	d103      	bne.n	8010922 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	2210      	movs	r2, #16
 8010920:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010928:	4619      	mov	r1, r3
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f7fe fe66 	bl	800f5fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010930:	e00b      	b.n	801094a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010932:	6878      	ldr	r0, [r7, #4]
 8010934:	f7f0 ff34 	bl	80017a0 <HAL_UART_RxCpltCallback>
}
 8010938:	e007      	b.n	801094a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	699a      	ldr	r2, [r3, #24]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	f042 0208 	orr.w	r2, r2, #8
 8010948:	619a      	str	r2, [r3, #24]
}
 801094a:	bf00      	nop
 801094c:	3758      	adds	r7, #88	; 0x58
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}

08010952 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010952:	b580      	push	{r7, lr}
 8010954:	b096      	sub	sp, #88	; 0x58
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010960:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801096a:	2b22      	cmp	r3, #34	; 0x22
 801096c:	f040 8095 	bne.w	8010a9a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010976:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801097e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8010980:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010984:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010988:	4013      	ands	r3, r2
 801098a:	b29a      	uxth	r2, r3
 801098c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801098e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010994:	1c9a      	adds	r2, r3, #2
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	3b01      	subs	r3, #1
 80109a4:	b29a      	uxth	r2, r3
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d178      	bne.n	8010aaa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109c0:	e853 3f00 	ldrex	r3, [r3]
 80109c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80109c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80109cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	461a      	mov	r2, r3
 80109d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109d6:	643b      	str	r3, [r7, #64]	; 0x40
 80109d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80109dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80109de:	e841 2300 	strex	r3, r2, [r1]
 80109e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80109e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d1e6      	bne.n	80109b8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	3308      	adds	r3, #8
 80109f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109f2:	6a3b      	ldr	r3, [r7, #32]
 80109f4:	e853 3f00 	ldrex	r3, [r3]
 80109f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80109fa:	69fb      	ldr	r3, [r7, #28]
 80109fc:	f023 0301 	bic.w	r3, r3, #1
 8010a00:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	3308      	adds	r3, #8
 8010a08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a12:	e841 2300 	strex	r3, r2, [r1]
 8010a16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d1e5      	bne.n	80109ea <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2220      	movs	r2, #32
 8010a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a30:	2b01      	cmp	r3, #1
 8010a32:	d12e      	bne.n	8010a92 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2200      	movs	r2, #0
 8010a38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	e853 3f00 	ldrex	r3, [r3]
 8010a46:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	f023 0310 	bic.w	r3, r3, #16
 8010a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	461a      	mov	r2, r3
 8010a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a58:	61bb      	str	r3, [r7, #24]
 8010a5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a5c:	6979      	ldr	r1, [r7, #20]
 8010a5e:	69ba      	ldr	r2, [r7, #24]
 8010a60:	e841 2300 	strex	r3, r2, [r1]
 8010a64:	613b      	str	r3, [r7, #16]
   return(result);
 8010a66:	693b      	ldr	r3, [r7, #16]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d1e6      	bne.n	8010a3a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	69db      	ldr	r3, [r3, #28]
 8010a72:	f003 0310 	and.w	r3, r3, #16
 8010a76:	2b10      	cmp	r3, #16
 8010a78:	d103      	bne.n	8010a82 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	2210      	movs	r2, #16
 8010a80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010a88:	4619      	mov	r1, r3
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f7fe fdb6 	bl	800f5fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010a90:	e00b      	b.n	8010aaa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f7f0 fe84 	bl	80017a0 <HAL_UART_RxCpltCallback>
}
 8010a98:	e007      	b.n	8010aaa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	699a      	ldr	r2, [r3, #24]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	f042 0208 	orr.w	r2, r2, #8
 8010aa8:	619a      	str	r2, [r3, #24]
}
 8010aaa:	bf00      	nop
 8010aac:	3758      	adds	r7, #88	; 0x58
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}
	...

08010ab4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b0a6      	sub	sp, #152	; 0x98
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ac2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	69db      	ldr	r3, [r3, #28]
 8010acc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	689b      	ldr	r3, [r3, #8]
 8010ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010aea:	2b22      	cmp	r3, #34	; 0x22
 8010aec:	f040 814d 	bne.w	8010d8a <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010af6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010afa:	e0f4      	b.n	8010ce6 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b02:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010b06:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8010b0a:	b2d9      	uxtb	r1, r3
 8010b0c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010b10:	b2da      	uxtb	r2, r3
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b16:	400a      	ands	r2, r1
 8010b18:	b2d2      	uxtb	r2, r2
 8010b1a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b20:	1c5a      	adds	r2, r3, #1
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010b2c:	b29b      	uxth	r3, r3
 8010b2e:	3b01      	subs	r3, #1
 8010b30:	b29a      	uxth	r2, r3
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	69db      	ldr	r3, [r3, #28]
 8010b3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010b42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b46:	f003 0307 	and.w	r3, r3, #7
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d053      	beq.n	8010bf6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010b4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b52:	f003 0301 	and.w	r3, r3, #1
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d011      	beq.n	8010b7e <UART_RxISR_8BIT_FIFOEN+0xca>
 8010b5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d00b      	beq.n	8010b7e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010b74:	f043 0201 	orr.w	r2, r3, #1
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010b7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010b82:	f003 0302 	and.w	r3, r3, #2
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d011      	beq.n	8010bae <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010b8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010b8e:	f003 0301 	and.w	r3, r3, #1
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d00b      	beq.n	8010bae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	2202      	movs	r2, #2
 8010b9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ba4:	f043 0204 	orr.w	r2, r3, #4
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010bae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bb2:	f003 0304 	and.w	r3, r3, #4
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d011      	beq.n	8010bde <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010bba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010bbe:	f003 0301 	and.w	r3, r3, #1
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d00b      	beq.n	8010bde <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	2204      	movs	r2, #4
 8010bcc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010bd4:	f043 0202 	orr.w	r2, r3, #2
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d006      	beq.n	8010bf6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010be8:	6878      	ldr	r0, [r7, #4]
 8010bea:	f7fe fcfd 	bl	800f5e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d171      	bne.n	8010ce6 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c0a:	e853 3f00 	ldrex	r3, [r3]
 8010c0e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	461a      	mov	r2, r3
 8010c20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8010c26:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c28:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010c2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010c2c:	e841 2300 	strex	r3, r2, [r1]
 8010c30:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d1e4      	bne.n	8010c02 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	3308      	adds	r3, #8
 8010c3e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c42:	e853 3f00 	ldrex	r3, [r3]
 8010c46:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010c48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c4a:	4b56      	ldr	r3, [pc, #344]	; (8010da4 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8010c4c:	4013      	ands	r3, r2
 8010c4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	3308      	adds	r3, #8
 8010c56:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010c58:	657a      	str	r2, [r7, #84]	; 0x54
 8010c5a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010c5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010c60:	e841 2300 	strex	r3, r2, [r1]
 8010c64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d1e5      	bne.n	8010c38 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2220      	movs	r2, #32
 8010c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2200      	movs	r2, #0
 8010c78:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c7e:	2b01      	cmp	r3, #1
 8010c80:	d12e      	bne.n	8010ce0 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2200      	movs	r2, #0
 8010c86:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c90:	e853 3f00 	ldrex	r3, [r3]
 8010c94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c98:	f023 0310 	bic.w	r3, r3, #16
 8010c9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8010ca8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010caa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010cac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010cae:	e841 2300 	strex	r3, r2, [r1]
 8010cb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d1e6      	bne.n	8010c88 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	69db      	ldr	r3, [r3, #28]
 8010cc0:	f003 0310 	and.w	r3, r3, #16
 8010cc4:	2b10      	cmp	r3, #16
 8010cc6:	d103      	bne.n	8010cd0 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	2210      	movs	r2, #16
 8010cce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010cd6:	4619      	mov	r1, r3
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	f7fe fc8f 	bl	800f5fc <HAL_UARTEx_RxEventCallback>
 8010cde:	e002      	b.n	8010ce6 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f7f0 fd5d 	bl	80017a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010ce6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d006      	beq.n	8010cfc <UART_RxISR_8BIT_FIFOEN+0x248>
 8010cee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010cf2:	f003 0320 	and.w	r3, r3, #32
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	f47f af00 	bne.w	8010afc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d02:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010d06:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d045      	beq.n	8010d9a <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010d14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d23e      	bcs.n	8010d9a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	3308      	adds	r3, #8
 8010d22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d24:	6a3b      	ldr	r3, [r7, #32]
 8010d26:	e853 3f00 	ldrex	r3, [r3]
 8010d2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d2c:	69fb      	ldr	r3, [r7, #28]
 8010d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010d32:	673b      	str	r3, [r7, #112]	; 0x70
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	3308      	adds	r3, #8
 8010d3a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d44:	e841 2300 	strex	r3, r2, [r1]
 8010d48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d1e5      	bne.n	8010d1c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	4a15      	ldr	r2, [pc, #84]	; (8010da8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8010d54:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	e853 3f00 	ldrex	r3, [r3]
 8010d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	f043 0320 	orr.w	r3, r3, #32
 8010d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	461a      	mov	r2, r3
 8010d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010d74:	61bb      	str	r3, [r7, #24]
 8010d76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d78:	6979      	ldr	r1, [r7, #20]
 8010d7a:	69ba      	ldr	r2, [r7, #24]
 8010d7c:	e841 2300 	strex	r3, r2, [r1]
 8010d80:	613b      	str	r3, [r7, #16]
   return(result);
 8010d82:	693b      	ldr	r3, [r7, #16]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d1e6      	bne.n	8010d56 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010d88:	e007      	b.n	8010d9a <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	699a      	ldr	r2, [r3, #24]
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	f042 0208 	orr.w	r2, r2, #8
 8010d98:	619a      	str	r2, [r3, #24]
}
 8010d9a:	bf00      	nop
 8010d9c:	3798      	adds	r7, #152	; 0x98
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
 8010da2:	bf00      	nop
 8010da4:	effffffe 	.word	0xeffffffe
 8010da8:	080107f3 	.word	0x080107f3

08010dac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b0a8      	sub	sp, #160	; 0xa0
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010dba:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	69db      	ldr	r3, [r3, #28]
 8010dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	689b      	ldr	r3, [r3, #8]
 8010dd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010de2:	2b22      	cmp	r3, #34	; 0x22
 8010de4:	f040 8151 	bne.w	801108a <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010dee:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010df2:	e0f8      	b.n	8010fe6 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dfa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8010e06:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8010e0a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8010e0e:	4013      	ands	r3, r2
 8010e10:	b29a      	uxth	r2, r3
 8010e12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010e16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e1c:	1c9a      	adds	r2, r3, #2
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010e28:	b29b      	uxth	r3, r3
 8010e2a:	3b01      	subs	r3, #1
 8010e2c:	b29a      	uxth	r2, r3
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	69db      	ldr	r3, [r3, #28]
 8010e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010e3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e42:	f003 0307 	and.w	r3, r3, #7
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d053      	beq.n	8010ef2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010e4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e4e:	f003 0301 	and.w	r3, r3, #1
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d011      	beq.n	8010e7a <UART_RxISR_16BIT_FIFOEN+0xce>
 8010e56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d00b      	beq.n	8010e7a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	2201      	movs	r2, #1
 8010e68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e70:	f043 0201 	orr.w	r2, r3, #1
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010e7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010e7e:	f003 0302 	and.w	r3, r3, #2
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d011      	beq.n	8010eaa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010e8a:	f003 0301 	and.w	r3, r3, #1
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d00b      	beq.n	8010eaa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	2202      	movs	r2, #2
 8010e98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ea0:	f043 0204 	orr.w	r2, r3, #4
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010eaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010eae:	f003 0304 	and.w	r3, r3, #4
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d011      	beq.n	8010eda <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010eb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010eba:	f003 0301 	and.w	r3, r3, #1
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d00b      	beq.n	8010eda <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	2204      	movs	r2, #4
 8010ec8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ed0:	f043 0202 	orr.w	r2, r3, #2
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d006      	beq.n	8010ef2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010ee4:	6878      	ldr	r0, [r7, #4]
 8010ee6:	f7fe fb7f 	bl	800f5e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2200      	movs	r2, #0
 8010eee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d173      	bne.n	8010fe6 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f06:	e853 3f00 	ldrex	r3, [r3]
 8010f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010f0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010f12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010f20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010f22:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f24:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010f26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010f28:	e841 2300 	strex	r3, r2, [r1]
 8010f2c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d1e4      	bne.n	8010efe <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	3308      	adds	r3, #8
 8010f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f3e:	e853 3f00 	ldrex	r3, [r3]
 8010f42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010f44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f46:	4b57      	ldr	r3, [pc, #348]	; (80110a4 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8010f48:	4013      	ands	r3, r2
 8010f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	3308      	adds	r3, #8
 8010f54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010f58:	65ba      	str	r2, [r7, #88]	; 0x58
 8010f5a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f60:	e841 2300 	strex	r3, r2, [r1]
 8010f64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010f66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d1e3      	bne.n	8010f34 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2220      	movs	r2, #32
 8010f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2200      	movs	r2, #0
 8010f78:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f7e:	2b01      	cmp	r3, #1
 8010f80:	d12e      	bne.n	8010fe0 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	2200      	movs	r2, #0
 8010f86:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f90:	e853 3f00 	ldrex	r3, [r3]
 8010f94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f98:	f023 0310 	bic.w	r3, r3, #16
 8010f9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8010fa8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010faa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010fac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010fae:	e841 2300 	strex	r3, r2, [r1]
 8010fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d1e6      	bne.n	8010f88 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	69db      	ldr	r3, [r3, #28]
 8010fc0:	f003 0310 	and.w	r3, r3, #16
 8010fc4:	2b10      	cmp	r3, #16
 8010fc6:	d103      	bne.n	8010fd0 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	2210      	movs	r2, #16
 8010fce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f7fe fb0f 	bl	800f5fc <HAL_UARTEx_RxEventCallback>
 8010fde:	e002      	b.n	8010fe6 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f7f0 fbdd 	bl	80017a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010fe6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d006      	beq.n	8010ffc <UART_RxISR_16BIT_FIFOEN+0x250>
 8010fee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010ff2:	f003 0320 	and.w	r3, r3, #32
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	f47f aefc 	bne.w	8010df4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011002:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011006:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801100a:	2b00      	cmp	r3, #0
 801100c:	d045      	beq.n	801109a <UART_RxISR_16BIT_FIFOEN+0x2ee>
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011014:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8011018:	429a      	cmp	r2, r3
 801101a:	d23e      	bcs.n	801109a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	3308      	adds	r3, #8
 8011022:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011026:	e853 3f00 	ldrex	r3, [r3]
 801102a:	623b      	str	r3, [r7, #32]
   return(result);
 801102c:	6a3b      	ldr	r3, [r7, #32]
 801102e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011032:	677b      	str	r3, [r7, #116]	; 0x74
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	3308      	adds	r3, #8
 801103a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801103c:	633a      	str	r2, [r7, #48]	; 0x30
 801103e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011044:	e841 2300 	strex	r3, r2, [r1]
 8011048:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801104a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801104c:	2b00      	cmp	r3, #0
 801104e:	d1e5      	bne.n	801101c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	4a15      	ldr	r2, [pc, #84]	; (80110a8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8011054:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801105c:	693b      	ldr	r3, [r7, #16]
 801105e:	e853 3f00 	ldrex	r3, [r3]
 8011062:	60fb      	str	r3, [r7, #12]
   return(result);
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f043 0320 	orr.w	r3, r3, #32
 801106a:	673b      	str	r3, [r7, #112]	; 0x70
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	461a      	mov	r2, r3
 8011072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011074:	61fb      	str	r3, [r7, #28]
 8011076:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011078:	69b9      	ldr	r1, [r7, #24]
 801107a:	69fa      	ldr	r2, [r7, #28]
 801107c:	e841 2300 	strex	r3, r2, [r1]
 8011080:	617b      	str	r3, [r7, #20]
   return(result);
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d1e6      	bne.n	8011056 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011088:	e007      	b.n	801109a <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	699a      	ldr	r2, [r3, #24]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	f042 0208 	orr.w	r2, r2, #8
 8011098:	619a      	str	r2, [r3, #24]
}
 801109a:	bf00      	nop
 801109c:	37a0      	adds	r7, #160	; 0xa0
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}
 80110a2:	bf00      	nop
 80110a4:	effffffe 	.word	0xeffffffe
 80110a8:	08010953 	.word	0x08010953

080110ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80110ac:	b480      	push	{r7}
 80110ae:	b083      	sub	sp, #12
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80110b4:	bf00      	nop
 80110b6:	370c      	adds	r7, #12
 80110b8:	46bd      	mov	sp, r7
 80110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110be:	4770      	bx	lr

080110c0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80110c0:	b480      	push	{r7}
 80110c2:	b083      	sub	sp, #12
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80110c8:	bf00      	nop
 80110ca:	370c      	adds	r7, #12
 80110cc:	46bd      	mov	sp, r7
 80110ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d2:	4770      	bx	lr

080110d4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80110d4:	b480      	push	{r7}
 80110d6:	b083      	sub	sp, #12
 80110d8:	af00      	add	r7, sp, #0
 80110da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80110dc:	bf00      	nop
 80110de:	370c      	adds	r7, #12
 80110e0:	46bd      	mov	sp, r7
 80110e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e6:	4770      	bx	lr

080110e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80110e8:	b480      	push	{r7}
 80110ea:	b085      	sub	sp, #20
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80110f6:	2b01      	cmp	r3, #1
 80110f8:	d101      	bne.n	80110fe <HAL_UARTEx_DisableFifoMode+0x16>
 80110fa:	2302      	movs	r3, #2
 80110fc:	e027      	b.n	801114e <HAL_UARTEx_DisableFifoMode+0x66>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	2201      	movs	r2, #1
 8011102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2224      	movs	r2, #36	; 0x24
 801110a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	681a      	ldr	r2, [r3, #0]
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f022 0201 	bic.w	r2, r2, #1
 8011124:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801112c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2200      	movs	r2, #0
 8011132:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	68fa      	ldr	r2, [r7, #12]
 801113a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2220      	movs	r2, #32
 8011140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2200      	movs	r2, #0
 8011148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801114c:	2300      	movs	r3, #0
}
 801114e:	4618      	mov	r0, r3
 8011150:	3714      	adds	r7, #20
 8011152:	46bd      	mov	sp, r7
 8011154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011158:	4770      	bx	lr

0801115a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801115a:	b580      	push	{r7, lr}
 801115c:	b084      	sub	sp, #16
 801115e:	af00      	add	r7, sp, #0
 8011160:	6078      	str	r0, [r7, #4]
 8011162:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801116a:	2b01      	cmp	r3, #1
 801116c:	d101      	bne.n	8011172 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801116e:	2302      	movs	r3, #2
 8011170:	e02d      	b.n	80111ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2201      	movs	r2, #1
 8011176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2224      	movs	r2, #36	; 0x24
 801117e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	681a      	ldr	r2, [r3, #0]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f022 0201 	bic.w	r2, r2, #1
 8011198:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	689b      	ldr	r3, [r3, #8]
 80111a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	683a      	ldr	r2, [r7, #0]
 80111aa:	430a      	orrs	r2, r1
 80111ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f000 f850 	bl	8011254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	68fa      	ldr	r2, [r7, #12]
 80111ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	2220      	movs	r2, #32
 80111c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2200      	movs	r2, #0
 80111c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80111cc:	2300      	movs	r3, #0
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3710      	adds	r7, #16
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}

080111d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80111d6:	b580      	push	{r7, lr}
 80111d8:	b084      	sub	sp, #16
 80111da:	af00      	add	r7, sp, #0
 80111dc:	6078      	str	r0, [r7, #4]
 80111de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80111e6:	2b01      	cmp	r3, #1
 80111e8:	d101      	bne.n	80111ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80111ea:	2302      	movs	r3, #2
 80111ec:	e02d      	b.n	801124a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2201      	movs	r2, #1
 80111f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2224      	movs	r2, #36	; 0x24
 80111fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	681a      	ldr	r2, [r3, #0]
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	f022 0201 	bic.w	r2, r2, #1
 8011214:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	689b      	ldr	r3, [r3, #8]
 801121c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	683a      	ldr	r2, [r7, #0]
 8011226:	430a      	orrs	r2, r1
 8011228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f000 f812 	bl	8011254 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	68fa      	ldr	r2, [r7, #12]
 8011236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2220      	movs	r2, #32
 801123c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2200      	movs	r2, #0
 8011244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011248:	2300      	movs	r3, #0
}
 801124a:	4618      	mov	r0, r3
 801124c:	3710      	adds	r7, #16
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
	...

08011254 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011254:	b480      	push	{r7}
 8011256:	b085      	sub	sp, #20
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011260:	2b00      	cmp	r3, #0
 8011262:	d108      	bne.n	8011276 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2201      	movs	r2, #1
 8011268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2201      	movs	r2, #1
 8011270:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011274:	e031      	b.n	80112da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011276:	2310      	movs	r3, #16
 8011278:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801127a:	2310      	movs	r3, #16
 801127c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	689b      	ldr	r3, [r3, #8]
 8011284:	0e5b      	lsrs	r3, r3, #25
 8011286:	b2db      	uxtb	r3, r3
 8011288:	f003 0307 	and.w	r3, r3, #7
 801128c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	689b      	ldr	r3, [r3, #8]
 8011294:	0f5b      	lsrs	r3, r3, #29
 8011296:	b2db      	uxtb	r3, r3
 8011298:	f003 0307 	and.w	r3, r3, #7
 801129c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801129e:	7bbb      	ldrb	r3, [r7, #14]
 80112a0:	7b3a      	ldrb	r2, [r7, #12]
 80112a2:	4911      	ldr	r1, [pc, #68]	; (80112e8 <UARTEx_SetNbDataToProcess+0x94>)
 80112a4:	5c8a      	ldrb	r2, [r1, r2]
 80112a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80112aa:	7b3a      	ldrb	r2, [r7, #12]
 80112ac:	490f      	ldr	r1, [pc, #60]	; (80112ec <UARTEx_SetNbDataToProcess+0x98>)
 80112ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80112b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80112b4:	b29a      	uxth	r2, r3
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80112bc:	7bfb      	ldrb	r3, [r7, #15]
 80112be:	7b7a      	ldrb	r2, [r7, #13]
 80112c0:	4909      	ldr	r1, [pc, #36]	; (80112e8 <UARTEx_SetNbDataToProcess+0x94>)
 80112c2:	5c8a      	ldrb	r2, [r1, r2]
 80112c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80112c8:	7b7a      	ldrb	r2, [r7, #13]
 80112ca:	4908      	ldr	r1, [pc, #32]	; (80112ec <UARTEx_SetNbDataToProcess+0x98>)
 80112cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80112ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80112d2:	b29a      	uxth	r2, r3
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80112da:	bf00      	nop
 80112dc:	3714      	adds	r7, #20
 80112de:	46bd      	mov	sp, r7
 80112e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e4:	4770      	bx	lr
 80112e6:	bf00      	nop
 80112e8:	08012408 	.word	0x08012408
 80112ec:	08012410 	.word	0x08012410

080112f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80112f0:	b084      	sub	sp, #16
 80112f2:	b580      	push	{r7, lr}
 80112f4:	b084      	sub	sp, #16
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
 80112fa:	f107 001c 	add.w	r0, r7, #28
 80112fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011304:	2b01      	cmp	r3, #1
 8011306:	d120      	bne.n	801134a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801130c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	68da      	ldr	r2, [r3, #12]
 8011318:	4b2a      	ldr	r3, [pc, #168]	; (80113c4 <USB_CoreInit+0xd4>)
 801131a:	4013      	ands	r3, r2
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	68db      	ldr	r3, [r3, #12]
 8011324:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801132c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801132e:	2b01      	cmp	r3, #1
 8011330:	d105      	bne.n	801133e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	68db      	ldr	r3, [r3, #12]
 8011336:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f000 f914 	bl	801156c <USB_CoreReset>
 8011344:	4603      	mov	r3, r0
 8011346:	73fb      	strb	r3, [r7, #15]
 8011348:	e01a      	b.n	8011380 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	68db      	ldr	r3, [r3, #12]
 801134e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f000 f908 	bl	801156c <USB_CoreReset>
 801135c:	4603      	mov	r3, r0
 801135e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011362:	2b00      	cmp	r3, #0
 8011364:	d106      	bne.n	8011374 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801136a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	639a      	str	r2, [r3, #56]	; 0x38
 8011372:	e005      	b.n	8011380 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011378:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011382:	2b01      	cmp	r3, #1
 8011384:	d116      	bne.n	80113b4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801138a:	b29a      	uxth	r2, r3
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011394:	4b0c      	ldr	r3, [pc, #48]	; (80113c8 <USB_CoreInit+0xd8>)
 8011396:	4313      	orrs	r3, r2
 8011398:	687a      	ldr	r2, [r7, #4]
 801139a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	689b      	ldr	r3, [r3, #8]
 80113a0:	f043 0206 	orr.w	r2, r3, #6
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	689b      	ldr	r3, [r3, #8]
 80113ac:	f043 0220 	orr.w	r2, r3, #32
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80113b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	3710      	adds	r7, #16
 80113ba:	46bd      	mov	sp, r7
 80113bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80113c0:	b004      	add	sp, #16
 80113c2:	4770      	bx	lr
 80113c4:	ffbdffbf 	.word	0xffbdffbf
 80113c8:	03ee0000 	.word	0x03ee0000

080113cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80113cc:	b480      	push	{r7}
 80113ce:	b083      	sub	sp, #12
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	689b      	ldr	r3, [r3, #8]
 80113d8:	f023 0201 	bic.w	r2, r3, #1
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80113e0:	2300      	movs	r3, #0
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	370c      	adds	r7, #12
 80113e6:	46bd      	mov	sp, r7
 80113e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ec:	4770      	bx	lr

080113ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80113ee:	b580      	push	{r7, lr}
 80113f0:	b084      	sub	sp, #16
 80113f2:	af00      	add	r7, sp, #0
 80113f4:	6078      	str	r0, [r7, #4]
 80113f6:	460b      	mov	r3, r1
 80113f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80113fa:	2300      	movs	r3, #0
 80113fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	68db      	ldr	r3, [r3, #12]
 8011402:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801140a:	78fb      	ldrb	r3, [r7, #3]
 801140c:	2b01      	cmp	r3, #1
 801140e:	d115      	bne.n	801143c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	68db      	ldr	r3, [r3, #12]
 8011414:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801141c:	2001      	movs	r0, #1
 801141e:	f7f1 ffaf 	bl	8003380 <HAL_Delay>
      ms++;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	3301      	adds	r3, #1
 8011426:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f000 f891 	bl	8011550 <USB_GetMode>
 801142e:	4603      	mov	r3, r0
 8011430:	2b01      	cmp	r3, #1
 8011432:	d01e      	beq.n	8011472 <USB_SetCurrentMode+0x84>
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	2b31      	cmp	r3, #49	; 0x31
 8011438:	d9f0      	bls.n	801141c <USB_SetCurrentMode+0x2e>
 801143a:	e01a      	b.n	8011472 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801143c:	78fb      	ldrb	r3, [r7, #3]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d115      	bne.n	801146e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	68db      	ldr	r3, [r3, #12]
 8011446:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801144e:	2001      	movs	r0, #1
 8011450:	f7f1 ff96 	bl	8003380 <HAL_Delay>
      ms++;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	3301      	adds	r3, #1
 8011458:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f000 f878 	bl	8011550 <USB_GetMode>
 8011460:	4603      	mov	r3, r0
 8011462:	2b00      	cmp	r3, #0
 8011464:	d005      	beq.n	8011472 <USB_SetCurrentMode+0x84>
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	2b31      	cmp	r3, #49	; 0x31
 801146a:	d9f0      	bls.n	801144e <USB_SetCurrentMode+0x60>
 801146c:	e001      	b.n	8011472 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801146e:	2301      	movs	r3, #1
 8011470:	e005      	b.n	801147e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	2b32      	cmp	r3, #50	; 0x32
 8011476:	d101      	bne.n	801147c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011478:	2301      	movs	r3, #1
 801147a:	e000      	b.n	801147e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801147c:	2300      	movs	r3, #0
}
 801147e:	4618      	mov	r0, r3
 8011480:	3710      	adds	r7, #16
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}
	...

08011488 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011488:	b480      	push	{r7}
 801148a:	b085      	sub	sp, #20
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
 8011490:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011492:	2300      	movs	r3, #0
 8011494:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	3301      	adds	r3, #1
 801149a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	4a13      	ldr	r2, [pc, #76]	; (80114ec <USB_FlushTxFifo+0x64>)
 80114a0:	4293      	cmp	r3, r2
 80114a2:	d901      	bls.n	80114a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80114a4:	2303      	movs	r3, #3
 80114a6:	e01b      	b.n	80114e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	691b      	ldr	r3, [r3, #16]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	daf2      	bge.n	8011496 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80114b0:	2300      	movs	r3, #0
 80114b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	019b      	lsls	r3, r3, #6
 80114b8:	f043 0220 	orr.w	r2, r3, #32
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	3301      	adds	r3, #1
 80114c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	4a08      	ldr	r2, [pc, #32]	; (80114ec <USB_FlushTxFifo+0x64>)
 80114ca:	4293      	cmp	r3, r2
 80114cc:	d901      	bls.n	80114d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80114ce:	2303      	movs	r3, #3
 80114d0:	e006      	b.n	80114e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	691b      	ldr	r3, [r3, #16]
 80114d6:	f003 0320 	and.w	r3, r3, #32
 80114da:	2b20      	cmp	r3, #32
 80114dc:	d0f0      	beq.n	80114c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80114de:	2300      	movs	r3, #0
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	3714      	adds	r7, #20
 80114e4:	46bd      	mov	sp, r7
 80114e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ea:	4770      	bx	lr
 80114ec:	00030d40 	.word	0x00030d40

080114f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80114f0:	b480      	push	{r7}
 80114f2:	b085      	sub	sp, #20
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80114f8:	2300      	movs	r3, #0
 80114fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	3301      	adds	r3, #1
 8011500:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	4a11      	ldr	r2, [pc, #68]	; (801154c <USB_FlushRxFifo+0x5c>)
 8011506:	4293      	cmp	r3, r2
 8011508:	d901      	bls.n	801150e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801150a:	2303      	movs	r3, #3
 801150c:	e018      	b.n	8011540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	691b      	ldr	r3, [r3, #16]
 8011512:	2b00      	cmp	r3, #0
 8011514:	daf2      	bge.n	80114fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011516:	2300      	movs	r3, #0
 8011518:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	2210      	movs	r2, #16
 801151e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	3301      	adds	r3, #1
 8011524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	4a08      	ldr	r2, [pc, #32]	; (801154c <USB_FlushRxFifo+0x5c>)
 801152a:	4293      	cmp	r3, r2
 801152c:	d901      	bls.n	8011532 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801152e:	2303      	movs	r3, #3
 8011530:	e006      	b.n	8011540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	691b      	ldr	r3, [r3, #16]
 8011536:	f003 0310 	and.w	r3, r3, #16
 801153a:	2b10      	cmp	r3, #16
 801153c:	d0f0      	beq.n	8011520 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801153e:	2300      	movs	r3, #0
}
 8011540:	4618      	mov	r0, r3
 8011542:	3714      	adds	r7, #20
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr
 801154c:	00030d40 	.word	0x00030d40

08011550 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011550:	b480      	push	{r7}
 8011552:	b083      	sub	sp, #12
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	695b      	ldr	r3, [r3, #20]
 801155c:	f003 0301 	and.w	r3, r3, #1
}
 8011560:	4618      	mov	r0, r3
 8011562:	370c      	adds	r7, #12
 8011564:	46bd      	mov	sp, r7
 8011566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156a:	4770      	bx	lr

0801156c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801156c:	b480      	push	{r7}
 801156e:	b085      	sub	sp, #20
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011574:	2300      	movs	r3, #0
 8011576:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	3301      	adds	r3, #1
 801157c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	4a13      	ldr	r2, [pc, #76]	; (80115d0 <USB_CoreReset+0x64>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d901      	bls.n	801158a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011586:	2303      	movs	r3, #3
 8011588:	e01b      	b.n	80115c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	691b      	ldr	r3, [r3, #16]
 801158e:	2b00      	cmp	r3, #0
 8011590:	daf2      	bge.n	8011578 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011592:	2300      	movs	r3, #0
 8011594:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	691b      	ldr	r3, [r3, #16]
 801159a:	f043 0201 	orr.w	r2, r3, #1
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	3301      	adds	r3, #1
 80115a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	4a09      	ldr	r2, [pc, #36]	; (80115d0 <USB_CoreReset+0x64>)
 80115ac:	4293      	cmp	r3, r2
 80115ae:	d901      	bls.n	80115b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80115b0:	2303      	movs	r3, #3
 80115b2:	e006      	b.n	80115c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	691b      	ldr	r3, [r3, #16]
 80115b8:	f003 0301 	and.w	r3, r3, #1
 80115bc:	2b01      	cmp	r3, #1
 80115be:	d0f0      	beq.n	80115a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80115c0:	2300      	movs	r3, #0
}
 80115c2:	4618      	mov	r0, r3
 80115c4:	3714      	adds	r7, #20
 80115c6:	46bd      	mov	sp, r7
 80115c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115cc:	4770      	bx	lr
 80115ce:	bf00      	nop
 80115d0:	00030d40 	.word	0x00030d40

080115d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80115d4:	b084      	sub	sp, #16
 80115d6:	b580      	push	{r7, lr}
 80115d8:	b086      	sub	sp, #24
 80115da:	af00      	add	r7, sp, #0
 80115dc:	6078      	str	r0, [r7, #4]
 80115de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80115e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80115e6:	2300      	movs	r3, #0
 80115e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80115f4:	461a      	mov	r2, r3
 80115f6:	2300      	movs	r3, #0
 80115f8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801160a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	639a      	str	r2, [r3, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801161a:	2b00      	cmp	r3, #0
 801161c:	d018      	beq.n	8011650 <USB_HostInit+0x7c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 801161e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011620:	2b01      	cmp	r3, #1
 8011622:	d10a      	bne.n	801163a <USB_HostInit+0x66>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	68fa      	ldr	r2, [r7, #12]
 801162e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011632:	f043 0304 	orr.w	r3, r3, #4
 8011636:	6013      	str	r3, [r2, #0]
 8011638:	e014      	b.n	8011664 <USB_HostInit+0x90>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	68fa      	ldr	r2, [r7, #12]
 8011644:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011648:	f023 0304 	bic.w	r3, r3, #4
 801164c:	6013      	str	r3, [r2, #0]
 801164e:	e009      	b.n	8011664 <USB_HostInit+0x90>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	68fa      	ldr	r2, [r7, #12]
 801165a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801165e:	f023 0304 	bic.w	r3, r3, #4
 8011662:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011664:	2110      	movs	r1, #16
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f7ff ff0e 	bl	8011488 <USB_FlushTxFifo>
 801166c:	4603      	mov	r3, r0
 801166e:	2b00      	cmp	r3, #0
 8011670:	d001      	beq.n	8011676 <USB_HostInit+0xa2>
  {
    ret = HAL_ERROR;
 8011672:	2301      	movs	r3, #1
 8011674:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f7ff ff3a 	bl	80114f0 <USB_FlushRxFifo>
 801167c:	4603      	mov	r3, r0
 801167e:	2b00      	cmp	r3, #0
 8011680:	d001      	beq.n	8011686 <USB_HostInit+0xb2>
  {
    ret = HAL_ERROR;
 8011682:	2301      	movs	r3, #1
 8011684:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8011686:	2300      	movs	r3, #0
 8011688:	613b      	str	r3, [r7, #16]
 801168a:	e015      	b.n	80116b8 <USB_HostInit+0xe4>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	015a      	lsls	r2, r3, #5
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	4413      	add	r3, r2
 8011694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8011698:	461a      	mov	r2, r3
 801169a:	f04f 33ff 	mov.w	r3, #4294967295
 801169e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	015a      	lsls	r2, r3, #5
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	4413      	add	r3, r2
 80116a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80116ac:	461a      	mov	r2, r3
 80116ae:	2300      	movs	r3, #0
 80116b0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80116b2:	693b      	ldr	r3, [r7, #16]
 80116b4:	3301      	adds	r3, #1
 80116b6:	613b      	str	r3, [r7, #16]
 80116b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ba:	693a      	ldr	r2, [r7, #16]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d3e5      	bcc.n	801168c <USB_HostInit+0xb8>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2200      	movs	r2, #0
 80116c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	f04f 32ff 	mov.w	r2, #4294967295
 80116cc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d00b      	beq.n	80116f2 <USB_HostInit+0x11e>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80116e0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	4a13      	ldr	r2, [pc, #76]	; (8011734 <USB_HostInit+0x160>)
 80116e6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	4a13      	ldr	r2, [pc, #76]	; (8011738 <USB_HostInit+0x164>)
 80116ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80116f0:	e009      	b.n	8011706 <USB_HostInit+0x132>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2280      	movs	r2, #128	; 0x80
 80116f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	4a10      	ldr	r2, [pc, #64]	; (801173c <USB_HostInit+0x168>)
 80116fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	4a0f      	ldr	r2, [pc, #60]	; (8011740 <USB_HostInit+0x16c>)
 8011702:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011708:	2b00      	cmp	r3, #0
 801170a:	d105      	bne.n	8011718 <USB_HostInit+0x144>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	699b      	ldr	r3, [r3, #24]
 8011710:	f043 0210 	orr.w	r2, r3, #16
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	699a      	ldr	r2, [r3, #24]
 801171c:	4b09      	ldr	r3, [pc, #36]	; (8011744 <USB_HostInit+0x170>)
 801171e:	4313      	orrs	r3, r2
 8011720:	687a      	ldr	r2, [r7, #4]
 8011722:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8011724:	7dfb      	ldrb	r3, [r7, #23]
}
 8011726:	4618      	mov	r0, r3
 8011728:	3718      	adds	r7, #24
 801172a:	46bd      	mov	sp, r7
 801172c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011730:	b004      	add	sp, #16
 8011732:	4770      	bx	lr
 8011734:	01000200 	.word	0x01000200
 8011738:	00e00300 	.word	0x00e00300
 801173c:	00600080 	.word	0x00600080
 8011740:	004000e0 	.word	0x004000e0
 8011744:	a3200008 	.word	0xa3200008

08011748 <__errno>:
 8011748:	4b01      	ldr	r3, [pc, #4]	; (8011750 <__errno+0x8>)
 801174a:	6818      	ldr	r0, [r3, #0]
 801174c:	4770      	bx	lr
 801174e:	bf00      	nop
 8011750:	24000410 	.word	0x24000410

08011754 <__libc_init_array>:
 8011754:	b570      	push	{r4, r5, r6, lr}
 8011756:	4d0d      	ldr	r5, [pc, #52]	; (801178c <__libc_init_array+0x38>)
 8011758:	4c0d      	ldr	r4, [pc, #52]	; (8011790 <__libc_init_array+0x3c>)
 801175a:	1b64      	subs	r4, r4, r5
 801175c:	10a4      	asrs	r4, r4, #2
 801175e:	2600      	movs	r6, #0
 8011760:	42a6      	cmp	r6, r4
 8011762:	d109      	bne.n	8011778 <__libc_init_array+0x24>
 8011764:	4d0b      	ldr	r5, [pc, #44]	; (8011794 <__libc_init_array+0x40>)
 8011766:	4c0c      	ldr	r4, [pc, #48]	; (8011798 <__libc_init_array+0x44>)
 8011768:	f000 fc8e 	bl	8012088 <_init>
 801176c:	1b64      	subs	r4, r4, r5
 801176e:	10a4      	asrs	r4, r4, #2
 8011770:	2600      	movs	r6, #0
 8011772:	42a6      	cmp	r6, r4
 8011774:	d105      	bne.n	8011782 <__libc_init_array+0x2e>
 8011776:	bd70      	pop	{r4, r5, r6, pc}
 8011778:	f855 3b04 	ldr.w	r3, [r5], #4
 801177c:	4798      	blx	r3
 801177e:	3601      	adds	r6, #1
 8011780:	e7ee      	b.n	8011760 <__libc_init_array+0xc>
 8011782:	f855 3b04 	ldr.w	r3, [r5], #4
 8011786:	4798      	blx	r3
 8011788:	3601      	adds	r6, #1
 801178a:	e7f2      	b.n	8011772 <__libc_init_array+0x1e>
 801178c:	08012454 	.word	0x08012454
 8011790:	08012454 	.word	0x08012454
 8011794:	08012454 	.word	0x08012454
 8011798:	08012458 	.word	0x08012458

0801179c <memset>:
 801179c:	4402      	add	r2, r0
 801179e:	4603      	mov	r3, r0
 80117a0:	4293      	cmp	r3, r2
 80117a2:	d100      	bne.n	80117a6 <memset+0xa>
 80117a4:	4770      	bx	lr
 80117a6:	f803 1b01 	strb.w	r1, [r3], #1
 80117aa:	e7f9      	b.n	80117a0 <memset+0x4>

080117ac <siprintf>:
 80117ac:	b40e      	push	{r1, r2, r3}
 80117ae:	b500      	push	{lr}
 80117b0:	b09c      	sub	sp, #112	; 0x70
 80117b2:	ab1d      	add	r3, sp, #116	; 0x74
 80117b4:	9002      	str	r0, [sp, #8]
 80117b6:	9006      	str	r0, [sp, #24]
 80117b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80117bc:	4809      	ldr	r0, [pc, #36]	; (80117e4 <siprintf+0x38>)
 80117be:	9107      	str	r1, [sp, #28]
 80117c0:	9104      	str	r1, [sp, #16]
 80117c2:	4909      	ldr	r1, [pc, #36]	; (80117e8 <siprintf+0x3c>)
 80117c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80117c8:	9105      	str	r1, [sp, #20]
 80117ca:	6800      	ldr	r0, [r0, #0]
 80117cc:	9301      	str	r3, [sp, #4]
 80117ce:	a902      	add	r1, sp, #8
 80117d0:	f000 f868 	bl	80118a4 <_svfiprintf_r>
 80117d4:	9b02      	ldr	r3, [sp, #8]
 80117d6:	2200      	movs	r2, #0
 80117d8:	701a      	strb	r2, [r3, #0]
 80117da:	b01c      	add	sp, #112	; 0x70
 80117dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80117e0:	b003      	add	sp, #12
 80117e2:	4770      	bx	lr
 80117e4:	24000410 	.word	0x24000410
 80117e8:	ffff0208 	.word	0xffff0208

080117ec <__ssputs_r>:
 80117ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117f0:	688e      	ldr	r6, [r1, #8]
 80117f2:	429e      	cmp	r6, r3
 80117f4:	4682      	mov	sl, r0
 80117f6:	460c      	mov	r4, r1
 80117f8:	4690      	mov	r8, r2
 80117fa:	461f      	mov	r7, r3
 80117fc:	d838      	bhi.n	8011870 <__ssputs_r+0x84>
 80117fe:	898a      	ldrh	r2, [r1, #12]
 8011800:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011804:	d032      	beq.n	801186c <__ssputs_r+0x80>
 8011806:	6825      	ldr	r5, [r4, #0]
 8011808:	6909      	ldr	r1, [r1, #16]
 801180a:	eba5 0901 	sub.w	r9, r5, r1
 801180e:	6965      	ldr	r5, [r4, #20]
 8011810:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011814:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011818:	3301      	adds	r3, #1
 801181a:	444b      	add	r3, r9
 801181c:	106d      	asrs	r5, r5, #1
 801181e:	429d      	cmp	r5, r3
 8011820:	bf38      	it	cc
 8011822:	461d      	movcc	r5, r3
 8011824:	0553      	lsls	r3, r2, #21
 8011826:	d531      	bpl.n	801188c <__ssputs_r+0xa0>
 8011828:	4629      	mov	r1, r5
 801182a:	f000 fb63 	bl	8011ef4 <_malloc_r>
 801182e:	4606      	mov	r6, r0
 8011830:	b950      	cbnz	r0, 8011848 <__ssputs_r+0x5c>
 8011832:	230c      	movs	r3, #12
 8011834:	f8ca 3000 	str.w	r3, [sl]
 8011838:	89a3      	ldrh	r3, [r4, #12]
 801183a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801183e:	81a3      	strh	r3, [r4, #12]
 8011840:	f04f 30ff 	mov.w	r0, #4294967295
 8011844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011848:	6921      	ldr	r1, [r4, #16]
 801184a:	464a      	mov	r2, r9
 801184c:	f000 fabe 	bl	8011dcc <memcpy>
 8011850:	89a3      	ldrh	r3, [r4, #12]
 8011852:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801185a:	81a3      	strh	r3, [r4, #12]
 801185c:	6126      	str	r6, [r4, #16]
 801185e:	6165      	str	r5, [r4, #20]
 8011860:	444e      	add	r6, r9
 8011862:	eba5 0509 	sub.w	r5, r5, r9
 8011866:	6026      	str	r6, [r4, #0]
 8011868:	60a5      	str	r5, [r4, #8]
 801186a:	463e      	mov	r6, r7
 801186c:	42be      	cmp	r6, r7
 801186e:	d900      	bls.n	8011872 <__ssputs_r+0x86>
 8011870:	463e      	mov	r6, r7
 8011872:	6820      	ldr	r0, [r4, #0]
 8011874:	4632      	mov	r2, r6
 8011876:	4641      	mov	r1, r8
 8011878:	f000 fab6 	bl	8011de8 <memmove>
 801187c:	68a3      	ldr	r3, [r4, #8]
 801187e:	1b9b      	subs	r3, r3, r6
 8011880:	60a3      	str	r3, [r4, #8]
 8011882:	6823      	ldr	r3, [r4, #0]
 8011884:	4433      	add	r3, r6
 8011886:	6023      	str	r3, [r4, #0]
 8011888:	2000      	movs	r0, #0
 801188a:	e7db      	b.n	8011844 <__ssputs_r+0x58>
 801188c:	462a      	mov	r2, r5
 801188e:	f000 fba5 	bl	8011fdc <_realloc_r>
 8011892:	4606      	mov	r6, r0
 8011894:	2800      	cmp	r0, #0
 8011896:	d1e1      	bne.n	801185c <__ssputs_r+0x70>
 8011898:	6921      	ldr	r1, [r4, #16]
 801189a:	4650      	mov	r0, sl
 801189c:	f000 fabe 	bl	8011e1c <_free_r>
 80118a0:	e7c7      	b.n	8011832 <__ssputs_r+0x46>
	...

080118a4 <_svfiprintf_r>:
 80118a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118a8:	4698      	mov	r8, r3
 80118aa:	898b      	ldrh	r3, [r1, #12]
 80118ac:	061b      	lsls	r3, r3, #24
 80118ae:	b09d      	sub	sp, #116	; 0x74
 80118b0:	4607      	mov	r7, r0
 80118b2:	460d      	mov	r5, r1
 80118b4:	4614      	mov	r4, r2
 80118b6:	d50e      	bpl.n	80118d6 <_svfiprintf_r+0x32>
 80118b8:	690b      	ldr	r3, [r1, #16]
 80118ba:	b963      	cbnz	r3, 80118d6 <_svfiprintf_r+0x32>
 80118bc:	2140      	movs	r1, #64	; 0x40
 80118be:	f000 fb19 	bl	8011ef4 <_malloc_r>
 80118c2:	6028      	str	r0, [r5, #0]
 80118c4:	6128      	str	r0, [r5, #16]
 80118c6:	b920      	cbnz	r0, 80118d2 <_svfiprintf_r+0x2e>
 80118c8:	230c      	movs	r3, #12
 80118ca:	603b      	str	r3, [r7, #0]
 80118cc:	f04f 30ff 	mov.w	r0, #4294967295
 80118d0:	e0d1      	b.n	8011a76 <_svfiprintf_r+0x1d2>
 80118d2:	2340      	movs	r3, #64	; 0x40
 80118d4:	616b      	str	r3, [r5, #20]
 80118d6:	2300      	movs	r3, #0
 80118d8:	9309      	str	r3, [sp, #36]	; 0x24
 80118da:	2320      	movs	r3, #32
 80118dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80118e4:	2330      	movs	r3, #48	; 0x30
 80118e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011a90 <_svfiprintf_r+0x1ec>
 80118ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118ee:	f04f 0901 	mov.w	r9, #1
 80118f2:	4623      	mov	r3, r4
 80118f4:	469a      	mov	sl, r3
 80118f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118fa:	b10a      	cbz	r2, 8011900 <_svfiprintf_r+0x5c>
 80118fc:	2a25      	cmp	r2, #37	; 0x25
 80118fe:	d1f9      	bne.n	80118f4 <_svfiprintf_r+0x50>
 8011900:	ebba 0b04 	subs.w	fp, sl, r4
 8011904:	d00b      	beq.n	801191e <_svfiprintf_r+0x7a>
 8011906:	465b      	mov	r3, fp
 8011908:	4622      	mov	r2, r4
 801190a:	4629      	mov	r1, r5
 801190c:	4638      	mov	r0, r7
 801190e:	f7ff ff6d 	bl	80117ec <__ssputs_r>
 8011912:	3001      	adds	r0, #1
 8011914:	f000 80aa 	beq.w	8011a6c <_svfiprintf_r+0x1c8>
 8011918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801191a:	445a      	add	r2, fp
 801191c:	9209      	str	r2, [sp, #36]	; 0x24
 801191e:	f89a 3000 	ldrb.w	r3, [sl]
 8011922:	2b00      	cmp	r3, #0
 8011924:	f000 80a2 	beq.w	8011a6c <_svfiprintf_r+0x1c8>
 8011928:	2300      	movs	r3, #0
 801192a:	f04f 32ff 	mov.w	r2, #4294967295
 801192e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011932:	f10a 0a01 	add.w	sl, sl, #1
 8011936:	9304      	str	r3, [sp, #16]
 8011938:	9307      	str	r3, [sp, #28]
 801193a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801193e:	931a      	str	r3, [sp, #104]	; 0x68
 8011940:	4654      	mov	r4, sl
 8011942:	2205      	movs	r2, #5
 8011944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011948:	4851      	ldr	r0, [pc, #324]	; (8011a90 <_svfiprintf_r+0x1ec>)
 801194a:	f7ee fcd1 	bl	80002f0 <memchr>
 801194e:	9a04      	ldr	r2, [sp, #16]
 8011950:	b9d8      	cbnz	r0, 801198a <_svfiprintf_r+0xe6>
 8011952:	06d0      	lsls	r0, r2, #27
 8011954:	bf44      	itt	mi
 8011956:	2320      	movmi	r3, #32
 8011958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801195c:	0711      	lsls	r1, r2, #28
 801195e:	bf44      	itt	mi
 8011960:	232b      	movmi	r3, #43	; 0x2b
 8011962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011966:	f89a 3000 	ldrb.w	r3, [sl]
 801196a:	2b2a      	cmp	r3, #42	; 0x2a
 801196c:	d015      	beq.n	801199a <_svfiprintf_r+0xf6>
 801196e:	9a07      	ldr	r2, [sp, #28]
 8011970:	4654      	mov	r4, sl
 8011972:	2000      	movs	r0, #0
 8011974:	f04f 0c0a 	mov.w	ip, #10
 8011978:	4621      	mov	r1, r4
 801197a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801197e:	3b30      	subs	r3, #48	; 0x30
 8011980:	2b09      	cmp	r3, #9
 8011982:	d94e      	bls.n	8011a22 <_svfiprintf_r+0x17e>
 8011984:	b1b0      	cbz	r0, 80119b4 <_svfiprintf_r+0x110>
 8011986:	9207      	str	r2, [sp, #28]
 8011988:	e014      	b.n	80119b4 <_svfiprintf_r+0x110>
 801198a:	eba0 0308 	sub.w	r3, r0, r8
 801198e:	fa09 f303 	lsl.w	r3, r9, r3
 8011992:	4313      	orrs	r3, r2
 8011994:	9304      	str	r3, [sp, #16]
 8011996:	46a2      	mov	sl, r4
 8011998:	e7d2      	b.n	8011940 <_svfiprintf_r+0x9c>
 801199a:	9b03      	ldr	r3, [sp, #12]
 801199c:	1d19      	adds	r1, r3, #4
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	9103      	str	r1, [sp, #12]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	bfbb      	ittet	lt
 80119a6:	425b      	neglt	r3, r3
 80119a8:	f042 0202 	orrlt.w	r2, r2, #2
 80119ac:	9307      	strge	r3, [sp, #28]
 80119ae:	9307      	strlt	r3, [sp, #28]
 80119b0:	bfb8      	it	lt
 80119b2:	9204      	strlt	r2, [sp, #16]
 80119b4:	7823      	ldrb	r3, [r4, #0]
 80119b6:	2b2e      	cmp	r3, #46	; 0x2e
 80119b8:	d10c      	bne.n	80119d4 <_svfiprintf_r+0x130>
 80119ba:	7863      	ldrb	r3, [r4, #1]
 80119bc:	2b2a      	cmp	r3, #42	; 0x2a
 80119be:	d135      	bne.n	8011a2c <_svfiprintf_r+0x188>
 80119c0:	9b03      	ldr	r3, [sp, #12]
 80119c2:	1d1a      	adds	r2, r3, #4
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	9203      	str	r2, [sp, #12]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	bfb8      	it	lt
 80119cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80119d0:	3402      	adds	r4, #2
 80119d2:	9305      	str	r3, [sp, #20]
 80119d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011aa0 <_svfiprintf_r+0x1fc>
 80119d8:	7821      	ldrb	r1, [r4, #0]
 80119da:	2203      	movs	r2, #3
 80119dc:	4650      	mov	r0, sl
 80119de:	f7ee fc87 	bl	80002f0 <memchr>
 80119e2:	b140      	cbz	r0, 80119f6 <_svfiprintf_r+0x152>
 80119e4:	2340      	movs	r3, #64	; 0x40
 80119e6:	eba0 000a 	sub.w	r0, r0, sl
 80119ea:	fa03 f000 	lsl.w	r0, r3, r0
 80119ee:	9b04      	ldr	r3, [sp, #16]
 80119f0:	4303      	orrs	r3, r0
 80119f2:	3401      	adds	r4, #1
 80119f4:	9304      	str	r3, [sp, #16]
 80119f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119fa:	4826      	ldr	r0, [pc, #152]	; (8011a94 <_svfiprintf_r+0x1f0>)
 80119fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011a00:	2206      	movs	r2, #6
 8011a02:	f7ee fc75 	bl	80002f0 <memchr>
 8011a06:	2800      	cmp	r0, #0
 8011a08:	d038      	beq.n	8011a7c <_svfiprintf_r+0x1d8>
 8011a0a:	4b23      	ldr	r3, [pc, #140]	; (8011a98 <_svfiprintf_r+0x1f4>)
 8011a0c:	bb1b      	cbnz	r3, 8011a56 <_svfiprintf_r+0x1b2>
 8011a0e:	9b03      	ldr	r3, [sp, #12]
 8011a10:	3307      	adds	r3, #7
 8011a12:	f023 0307 	bic.w	r3, r3, #7
 8011a16:	3308      	adds	r3, #8
 8011a18:	9303      	str	r3, [sp, #12]
 8011a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a1c:	4433      	add	r3, r6
 8011a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8011a20:	e767      	b.n	80118f2 <_svfiprintf_r+0x4e>
 8011a22:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a26:	460c      	mov	r4, r1
 8011a28:	2001      	movs	r0, #1
 8011a2a:	e7a5      	b.n	8011978 <_svfiprintf_r+0xd4>
 8011a2c:	2300      	movs	r3, #0
 8011a2e:	3401      	adds	r4, #1
 8011a30:	9305      	str	r3, [sp, #20]
 8011a32:	4619      	mov	r1, r3
 8011a34:	f04f 0c0a 	mov.w	ip, #10
 8011a38:	4620      	mov	r0, r4
 8011a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a3e:	3a30      	subs	r2, #48	; 0x30
 8011a40:	2a09      	cmp	r2, #9
 8011a42:	d903      	bls.n	8011a4c <_svfiprintf_r+0x1a8>
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d0c5      	beq.n	80119d4 <_svfiprintf_r+0x130>
 8011a48:	9105      	str	r1, [sp, #20]
 8011a4a:	e7c3      	b.n	80119d4 <_svfiprintf_r+0x130>
 8011a4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a50:	4604      	mov	r4, r0
 8011a52:	2301      	movs	r3, #1
 8011a54:	e7f0      	b.n	8011a38 <_svfiprintf_r+0x194>
 8011a56:	ab03      	add	r3, sp, #12
 8011a58:	9300      	str	r3, [sp, #0]
 8011a5a:	462a      	mov	r2, r5
 8011a5c:	4b0f      	ldr	r3, [pc, #60]	; (8011a9c <_svfiprintf_r+0x1f8>)
 8011a5e:	a904      	add	r1, sp, #16
 8011a60:	4638      	mov	r0, r7
 8011a62:	f3af 8000 	nop.w
 8011a66:	1c42      	adds	r2, r0, #1
 8011a68:	4606      	mov	r6, r0
 8011a6a:	d1d6      	bne.n	8011a1a <_svfiprintf_r+0x176>
 8011a6c:	89ab      	ldrh	r3, [r5, #12]
 8011a6e:	065b      	lsls	r3, r3, #25
 8011a70:	f53f af2c 	bmi.w	80118cc <_svfiprintf_r+0x28>
 8011a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a76:	b01d      	add	sp, #116	; 0x74
 8011a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a7c:	ab03      	add	r3, sp, #12
 8011a7e:	9300      	str	r3, [sp, #0]
 8011a80:	462a      	mov	r2, r5
 8011a82:	4b06      	ldr	r3, [pc, #24]	; (8011a9c <_svfiprintf_r+0x1f8>)
 8011a84:	a904      	add	r1, sp, #16
 8011a86:	4638      	mov	r0, r7
 8011a88:	f000 f87a 	bl	8011b80 <_printf_i>
 8011a8c:	e7eb      	b.n	8011a66 <_svfiprintf_r+0x1c2>
 8011a8e:	bf00      	nop
 8011a90:	08012418 	.word	0x08012418
 8011a94:	08012422 	.word	0x08012422
 8011a98:	00000000 	.word	0x00000000
 8011a9c:	080117ed 	.word	0x080117ed
 8011aa0:	0801241e 	.word	0x0801241e

08011aa4 <_printf_common>:
 8011aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011aa8:	4616      	mov	r6, r2
 8011aaa:	4699      	mov	r9, r3
 8011aac:	688a      	ldr	r2, [r1, #8]
 8011aae:	690b      	ldr	r3, [r1, #16]
 8011ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	bfb8      	it	lt
 8011ab8:	4613      	movlt	r3, r2
 8011aba:	6033      	str	r3, [r6, #0]
 8011abc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ac0:	4607      	mov	r7, r0
 8011ac2:	460c      	mov	r4, r1
 8011ac4:	b10a      	cbz	r2, 8011aca <_printf_common+0x26>
 8011ac6:	3301      	adds	r3, #1
 8011ac8:	6033      	str	r3, [r6, #0]
 8011aca:	6823      	ldr	r3, [r4, #0]
 8011acc:	0699      	lsls	r1, r3, #26
 8011ace:	bf42      	ittt	mi
 8011ad0:	6833      	ldrmi	r3, [r6, #0]
 8011ad2:	3302      	addmi	r3, #2
 8011ad4:	6033      	strmi	r3, [r6, #0]
 8011ad6:	6825      	ldr	r5, [r4, #0]
 8011ad8:	f015 0506 	ands.w	r5, r5, #6
 8011adc:	d106      	bne.n	8011aec <_printf_common+0x48>
 8011ade:	f104 0a19 	add.w	sl, r4, #25
 8011ae2:	68e3      	ldr	r3, [r4, #12]
 8011ae4:	6832      	ldr	r2, [r6, #0]
 8011ae6:	1a9b      	subs	r3, r3, r2
 8011ae8:	42ab      	cmp	r3, r5
 8011aea:	dc26      	bgt.n	8011b3a <_printf_common+0x96>
 8011aec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011af0:	1e13      	subs	r3, r2, #0
 8011af2:	6822      	ldr	r2, [r4, #0]
 8011af4:	bf18      	it	ne
 8011af6:	2301      	movne	r3, #1
 8011af8:	0692      	lsls	r2, r2, #26
 8011afa:	d42b      	bmi.n	8011b54 <_printf_common+0xb0>
 8011afc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011b00:	4649      	mov	r1, r9
 8011b02:	4638      	mov	r0, r7
 8011b04:	47c0      	blx	r8
 8011b06:	3001      	adds	r0, #1
 8011b08:	d01e      	beq.n	8011b48 <_printf_common+0xa4>
 8011b0a:	6823      	ldr	r3, [r4, #0]
 8011b0c:	68e5      	ldr	r5, [r4, #12]
 8011b0e:	6832      	ldr	r2, [r6, #0]
 8011b10:	f003 0306 	and.w	r3, r3, #6
 8011b14:	2b04      	cmp	r3, #4
 8011b16:	bf08      	it	eq
 8011b18:	1aad      	subeq	r5, r5, r2
 8011b1a:	68a3      	ldr	r3, [r4, #8]
 8011b1c:	6922      	ldr	r2, [r4, #16]
 8011b1e:	bf0c      	ite	eq
 8011b20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b24:	2500      	movne	r5, #0
 8011b26:	4293      	cmp	r3, r2
 8011b28:	bfc4      	itt	gt
 8011b2a:	1a9b      	subgt	r3, r3, r2
 8011b2c:	18ed      	addgt	r5, r5, r3
 8011b2e:	2600      	movs	r6, #0
 8011b30:	341a      	adds	r4, #26
 8011b32:	42b5      	cmp	r5, r6
 8011b34:	d11a      	bne.n	8011b6c <_printf_common+0xc8>
 8011b36:	2000      	movs	r0, #0
 8011b38:	e008      	b.n	8011b4c <_printf_common+0xa8>
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	4652      	mov	r2, sl
 8011b3e:	4649      	mov	r1, r9
 8011b40:	4638      	mov	r0, r7
 8011b42:	47c0      	blx	r8
 8011b44:	3001      	adds	r0, #1
 8011b46:	d103      	bne.n	8011b50 <_printf_common+0xac>
 8011b48:	f04f 30ff 	mov.w	r0, #4294967295
 8011b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b50:	3501      	adds	r5, #1
 8011b52:	e7c6      	b.n	8011ae2 <_printf_common+0x3e>
 8011b54:	18e1      	adds	r1, r4, r3
 8011b56:	1c5a      	adds	r2, r3, #1
 8011b58:	2030      	movs	r0, #48	; 0x30
 8011b5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011b5e:	4422      	add	r2, r4
 8011b60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b68:	3302      	adds	r3, #2
 8011b6a:	e7c7      	b.n	8011afc <_printf_common+0x58>
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	4622      	mov	r2, r4
 8011b70:	4649      	mov	r1, r9
 8011b72:	4638      	mov	r0, r7
 8011b74:	47c0      	blx	r8
 8011b76:	3001      	adds	r0, #1
 8011b78:	d0e6      	beq.n	8011b48 <_printf_common+0xa4>
 8011b7a:	3601      	adds	r6, #1
 8011b7c:	e7d9      	b.n	8011b32 <_printf_common+0x8e>
	...

08011b80 <_printf_i>:
 8011b80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b84:	7e0f      	ldrb	r7, [r1, #24]
 8011b86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011b88:	2f78      	cmp	r7, #120	; 0x78
 8011b8a:	4691      	mov	r9, r2
 8011b8c:	4680      	mov	r8, r0
 8011b8e:	460c      	mov	r4, r1
 8011b90:	469a      	mov	sl, r3
 8011b92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011b96:	d807      	bhi.n	8011ba8 <_printf_i+0x28>
 8011b98:	2f62      	cmp	r7, #98	; 0x62
 8011b9a:	d80a      	bhi.n	8011bb2 <_printf_i+0x32>
 8011b9c:	2f00      	cmp	r7, #0
 8011b9e:	f000 80d8 	beq.w	8011d52 <_printf_i+0x1d2>
 8011ba2:	2f58      	cmp	r7, #88	; 0x58
 8011ba4:	f000 80a3 	beq.w	8011cee <_printf_i+0x16e>
 8011ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011bac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011bb0:	e03a      	b.n	8011c28 <_printf_i+0xa8>
 8011bb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011bb6:	2b15      	cmp	r3, #21
 8011bb8:	d8f6      	bhi.n	8011ba8 <_printf_i+0x28>
 8011bba:	a101      	add	r1, pc, #4	; (adr r1, 8011bc0 <_printf_i+0x40>)
 8011bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011bc0:	08011c19 	.word	0x08011c19
 8011bc4:	08011c2d 	.word	0x08011c2d
 8011bc8:	08011ba9 	.word	0x08011ba9
 8011bcc:	08011ba9 	.word	0x08011ba9
 8011bd0:	08011ba9 	.word	0x08011ba9
 8011bd4:	08011ba9 	.word	0x08011ba9
 8011bd8:	08011c2d 	.word	0x08011c2d
 8011bdc:	08011ba9 	.word	0x08011ba9
 8011be0:	08011ba9 	.word	0x08011ba9
 8011be4:	08011ba9 	.word	0x08011ba9
 8011be8:	08011ba9 	.word	0x08011ba9
 8011bec:	08011d39 	.word	0x08011d39
 8011bf0:	08011c5d 	.word	0x08011c5d
 8011bf4:	08011d1b 	.word	0x08011d1b
 8011bf8:	08011ba9 	.word	0x08011ba9
 8011bfc:	08011ba9 	.word	0x08011ba9
 8011c00:	08011d5b 	.word	0x08011d5b
 8011c04:	08011ba9 	.word	0x08011ba9
 8011c08:	08011c5d 	.word	0x08011c5d
 8011c0c:	08011ba9 	.word	0x08011ba9
 8011c10:	08011ba9 	.word	0x08011ba9
 8011c14:	08011d23 	.word	0x08011d23
 8011c18:	682b      	ldr	r3, [r5, #0]
 8011c1a:	1d1a      	adds	r2, r3, #4
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	602a      	str	r2, [r5, #0]
 8011c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c28:	2301      	movs	r3, #1
 8011c2a:	e0a3      	b.n	8011d74 <_printf_i+0x1f4>
 8011c2c:	6820      	ldr	r0, [r4, #0]
 8011c2e:	6829      	ldr	r1, [r5, #0]
 8011c30:	0606      	lsls	r6, r0, #24
 8011c32:	f101 0304 	add.w	r3, r1, #4
 8011c36:	d50a      	bpl.n	8011c4e <_printf_i+0xce>
 8011c38:	680e      	ldr	r6, [r1, #0]
 8011c3a:	602b      	str	r3, [r5, #0]
 8011c3c:	2e00      	cmp	r6, #0
 8011c3e:	da03      	bge.n	8011c48 <_printf_i+0xc8>
 8011c40:	232d      	movs	r3, #45	; 0x2d
 8011c42:	4276      	negs	r6, r6
 8011c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c48:	485e      	ldr	r0, [pc, #376]	; (8011dc4 <_printf_i+0x244>)
 8011c4a:	230a      	movs	r3, #10
 8011c4c:	e019      	b.n	8011c82 <_printf_i+0x102>
 8011c4e:	680e      	ldr	r6, [r1, #0]
 8011c50:	602b      	str	r3, [r5, #0]
 8011c52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011c56:	bf18      	it	ne
 8011c58:	b236      	sxthne	r6, r6
 8011c5a:	e7ef      	b.n	8011c3c <_printf_i+0xbc>
 8011c5c:	682b      	ldr	r3, [r5, #0]
 8011c5e:	6820      	ldr	r0, [r4, #0]
 8011c60:	1d19      	adds	r1, r3, #4
 8011c62:	6029      	str	r1, [r5, #0]
 8011c64:	0601      	lsls	r1, r0, #24
 8011c66:	d501      	bpl.n	8011c6c <_printf_i+0xec>
 8011c68:	681e      	ldr	r6, [r3, #0]
 8011c6a:	e002      	b.n	8011c72 <_printf_i+0xf2>
 8011c6c:	0646      	lsls	r6, r0, #25
 8011c6e:	d5fb      	bpl.n	8011c68 <_printf_i+0xe8>
 8011c70:	881e      	ldrh	r6, [r3, #0]
 8011c72:	4854      	ldr	r0, [pc, #336]	; (8011dc4 <_printf_i+0x244>)
 8011c74:	2f6f      	cmp	r7, #111	; 0x6f
 8011c76:	bf0c      	ite	eq
 8011c78:	2308      	moveq	r3, #8
 8011c7a:	230a      	movne	r3, #10
 8011c7c:	2100      	movs	r1, #0
 8011c7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c82:	6865      	ldr	r5, [r4, #4]
 8011c84:	60a5      	str	r5, [r4, #8]
 8011c86:	2d00      	cmp	r5, #0
 8011c88:	bfa2      	ittt	ge
 8011c8a:	6821      	ldrge	r1, [r4, #0]
 8011c8c:	f021 0104 	bicge.w	r1, r1, #4
 8011c90:	6021      	strge	r1, [r4, #0]
 8011c92:	b90e      	cbnz	r6, 8011c98 <_printf_i+0x118>
 8011c94:	2d00      	cmp	r5, #0
 8011c96:	d04d      	beq.n	8011d34 <_printf_i+0x1b4>
 8011c98:	4615      	mov	r5, r2
 8011c9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8011c9e:	fb03 6711 	mls	r7, r3, r1, r6
 8011ca2:	5dc7      	ldrb	r7, [r0, r7]
 8011ca4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011ca8:	4637      	mov	r7, r6
 8011caa:	42bb      	cmp	r3, r7
 8011cac:	460e      	mov	r6, r1
 8011cae:	d9f4      	bls.n	8011c9a <_printf_i+0x11a>
 8011cb0:	2b08      	cmp	r3, #8
 8011cb2:	d10b      	bne.n	8011ccc <_printf_i+0x14c>
 8011cb4:	6823      	ldr	r3, [r4, #0]
 8011cb6:	07de      	lsls	r6, r3, #31
 8011cb8:	d508      	bpl.n	8011ccc <_printf_i+0x14c>
 8011cba:	6923      	ldr	r3, [r4, #16]
 8011cbc:	6861      	ldr	r1, [r4, #4]
 8011cbe:	4299      	cmp	r1, r3
 8011cc0:	bfde      	ittt	le
 8011cc2:	2330      	movle	r3, #48	; 0x30
 8011cc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011cc8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011ccc:	1b52      	subs	r2, r2, r5
 8011cce:	6122      	str	r2, [r4, #16]
 8011cd0:	f8cd a000 	str.w	sl, [sp]
 8011cd4:	464b      	mov	r3, r9
 8011cd6:	aa03      	add	r2, sp, #12
 8011cd8:	4621      	mov	r1, r4
 8011cda:	4640      	mov	r0, r8
 8011cdc:	f7ff fee2 	bl	8011aa4 <_printf_common>
 8011ce0:	3001      	adds	r0, #1
 8011ce2:	d14c      	bne.n	8011d7e <_printf_i+0x1fe>
 8011ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce8:	b004      	add	sp, #16
 8011cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cee:	4835      	ldr	r0, [pc, #212]	; (8011dc4 <_printf_i+0x244>)
 8011cf0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011cf4:	6829      	ldr	r1, [r5, #0]
 8011cf6:	6823      	ldr	r3, [r4, #0]
 8011cf8:	f851 6b04 	ldr.w	r6, [r1], #4
 8011cfc:	6029      	str	r1, [r5, #0]
 8011cfe:	061d      	lsls	r5, r3, #24
 8011d00:	d514      	bpl.n	8011d2c <_printf_i+0x1ac>
 8011d02:	07df      	lsls	r7, r3, #31
 8011d04:	bf44      	itt	mi
 8011d06:	f043 0320 	orrmi.w	r3, r3, #32
 8011d0a:	6023      	strmi	r3, [r4, #0]
 8011d0c:	b91e      	cbnz	r6, 8011d16 <_printf_i+0x196>
 8011d0e:	6823      	ldr	r3, [r4, #0]
 8011d10:	f023 0320 	bic.w	r3, r3, #32
 8011d14:	6023      	str	r3, [r4, #0]
 8011d16:	2310      	movs	r3, #16
 8011d18:	e7b0      	b.n	8011c7c <_printf_i+0xfc>
 8011d1a:	6823      	ldr	r3, [r4, #0]
 8011d1c:	f043 0320 	orr.w	r3, r3, #32
 8011d20:	6023      	str	r3, [r4, #0]
 8011d22:	2378      	movs	r3, #120	; 0x78
 8011d24:	4828      	ldr	r0, [pc, #160]	; (8011dc8 <_printf_i+0x248>)
 8011d26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011d2a:	e7e3      	b.n	8011cf4 <_printf_i+0x174>
 8011d2c:	0659      	lsls	r1, r3, #25
 8011d2e:	bf48      	it	mi
 8011d30:	b2b6      	uxthmi	r6, r6
 8011d32:	e7e6      	b.n	8011d02 <_printf_i+0x182>
 8011d34:	4615      	mov	r5, r2
 8011d36:	e7bb      	b.n	8011cb0 <_printf_i+0x130>
 8011d38:	682b      	ldr	r3, [r5, #0]
 8011d3a:	6826      	ldr	r6, [r4, #0]
 8011d3c:	6961      	ldr	r1, [r4, #20]
 8011d3e:	1d18      	adds	r0, r3, #4
 8011d40:	6028      	str	r0, [r5, #0]
 8011d42:	0635      	lsls	r5, r6, #24
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	d501      	bpl.n	8011d4c <_printf_i+0x1cc>
 8011d48:	6019      	str	r1, [r3, #0]
 8011d4a:	e002      	b.n	8011d52 <_printf_i+0x1d2>
 8011d4c:	0670      	lsls	r0, r6, #25
 8011d4e:	d5fb      	bpl.n	8011d48 <_printf_i+0x1c8>
 8011d50:	8019      	strh	r1, [r3, #0]
 8011d52:	2300      	movs	r3, #0
 8011d54:	6123      	str	r3, [r4, #16]
 8011d56:	4615      	mov	r5, r2
 8011d58:	e7ba      	b.n	8011cd0 <_printf_i+0x150>
 8011d5a:	682b      	ldr	r3, [r5, #0]
 8011d5c:	1d1a      	adds	r2, r3, #4
 8011d5e:	602a      	str	r2, [r5, #0]
 8011d60:	681d      	ldr	r5, [r3, #0]
 8011d62:	6862      	ldr	r2, [r4, #4]
 8011d64:	2100      	movs	r1, #0
 8011d66:	4628      	mov	r0, r5
 8011d68:	f7ee fac2 	bl	80002f0 <memchr>
 8011d6c:	b108      	cbz	r0, 8011d72 <_printf_i+0x1f2>
 8011d6e:	1b40      	subs	r0, r0, r5
 8011d70:	6060      	str	r0, [r4, #4]
 8011d72:	6863      	ldr	r3, [r4, #4]
 8011d74:	6123      	str	r3, [r4, #16]
 8011d76:	2300      	movs	r3, #0
 8011d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d7c:	e7a8      	b.n	8011cd0 <_printf_i+0x150>
 8011d7e:	6923      	ldr	r3, [r4, #16]
 8011d80:	462a      	mov	r2, r5
 8011d82:	4649      	mov	r1, r9
 8011d84:	4640      	mov	r0, r8
 8011d86:	47d0      	blx	sl
 8011d88:	3001      	adds	r0, #1
 8011d8a:	d0ab      	beq.n	8011ce4 <_printf_i+0x164>
 8011d8c:	6823      	ldr	r3, [r4, #0]
 8011d8e:	079b      	lsls	r3, r3, #30
 8011d90:	d413      	bmi.n	8011dba <_printf_i+0x23a>
 8011d92:	68e0      	ldr	r0, [r4, #12]
 8011d94:	9b03      	ldr	r3, [sp, #12]
 8011d96:	4298      	cmp	r0, r3
 8011d98:	bfb8      	it	lt
 8011d9a:	4618      	movlt	r0, r3
 8011d9c:	e7a4      	b.n	8011ce8 <_printf_i+0x168>
 8011d9e:	2301      	movs	r3, #1
 8011da0:	4632      	mov	r2, r6
 8011da2:	4649      	mov	r1, r9
 8011da4:	4640      	mov	r0, r8
 8011da6:	47d0      	blx	sl
 8011da8:	3001      	adds	r0, #1
 8011daa:	d09b      	beq.n	8011ce4 <_printf_i+0x164>
 8011dac:	3501      	adds	r5, #1
 8011dae:	68e3      	ldr	r3, [r4, #12]
 8011db0:	9903      	ldr	r1, [sp, #12]
 8011db2:	1a5b      	subs	r3, r3, r1
 8011db4:	42ab      	cmp	r3, r5
 8011db6:	dcf2      	bgt.n	8011d9e <_printf_i+0x21e>
 8011db8:	e7eb      	b.n	8011d92 <_printf_i+0x212>
 8011dba:	2500      	movs	r5, #0
 8011dbc:	f104 0619 	add.w	r6, r4, #25
 8011dc0:	e7f5      	b.n	8011dae <_printf_i+0x22e>
 8011dc2:	bf00      	nop
 8011dc4:	08012429 	.word	0x08012429
 8011dc8:	0801243a 	.word	0x0801243a

08011dcc <memcpy>:
 8011dcc:	440a      	add	r2, r1
 8011dce:	4291      	cmp	r1, r2
 8011dd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011dd4:	d100      	bne.n	8011dd8 <memcpy+0xc>
 8011dd6:	4770      	bx	lr
 8011dd8:	b510      	push	{r4, lr}
 8011dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011dde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011de2:	4291      	cmp	r1, r2
 8011de4:	d1f9      	bne.n	8011dda <memcpy+0xe>
 8011de6:	bd10      	pop	{r4, pc}

08011de8 <memmove>:
 8011de8:	4288      	cmp	r0, r1
 8011dea:	b510      	push	{r4, lr}
 8011dec:	eb01 0402 	add.w	r4, r1, r2
 8011df0:	d902      	bls.n	8011df8 <memmove+0x10>
 8011df2:	4284      	cmp	r4, r0
 8011df4:	4623      	mov	r3, r4
 8011df6:	d807      	bhi.n	8011e08 <memmove+0x20>
 8011df8:	1e43      	subs	r3, r0, #1
 8011dfa:	42a1      	cmp	r1, r4
 8011dfc:	d008      	beq.n	8011e10 <memmove+0x28>
 8011dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011e02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011e06:	e7f8      	b.n	8011dfa <memmove+0x12>
 8011e08:	4402      	add	r2, r0
 8011e0a:	4601      	mov	r1, r0
 8011e0c:	428a      	cmp	r2, r1
 8011e0e:	d100      	bne.n	8011e12 <memmove+0x2a>
 8011e10:	bd10      	pop	{r4, pc}
 8011e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011e16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011e1a:	e7f7      	b.n	8011e0c <memmove+0x24>

08011e1c <_free_r>:
 8011e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e1e:	2900      	cmp	r1, #0
 8011e20:	d044      	beq.n	8011eac <_free_r+0x90>
 8011e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e26:	9001      	str	r0, [sp, #4]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8011e2e:	bfb8      	it	lt
 8011e30:	18e4      	addlt	r4, r4, r3
 8011e32:	f000 f913 	bl	801205c <__malloc_lock>
 8011e36:	4a1e      	ldr	r2, [pc, #120]	; (8011eb0 <_free_r+0x94>)
 8011e38:	9801      	ldr	r0, [sp, #4]
 8011e3a:	6813      	ldr	r3, [r2, #0]
 8011e3c:	b933      	cbnz	r3, 8011e4c <_free_r+0x30>
 8011e3e:	6063      	str	r3, [r4, #4]
 8011e40:	6014      	str	r4, [r2, #0]
 8011e42:	b003      	add	sp, #12
 8011e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e48:	f000 b90e 	b.w	8012068 <__malloc_unlock>
 8011e4c:	42a3      	cmp	r3, r4
 8011e4e:	d908      	bls.n	8011e62 <_free_r+0x46>
 8011e50:	6825      	ldr	r5, [r4, #0]
 8011e52:	1961      	adds	r1, r4, r5
 8011e54:	428b      	cmp	r3, r1
 8011e56:	bf01      	itttt	eq
 8011e58:	6819      	ldreq	r1, [r3, #0]
 8011e5a:	685b      	ldreq	r3, [r3, #4]
 8011e5c:	1949      	addeq	r1, r1, r5
 8011e5e:	6021      	streq	r1, [r4, #0]
 8011e60:	e7ed      	b.n	8011e3e <_free_r+0x22>
 8011e62:	461a      	mov	r2, r3
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	b10b      	cbz	r3, 8011e6c <_free_r+0x50>
 8011e68:	42a3      	cmp	r3, r4
 8011e6a:	d9fa      	bls.n	8011e62 <_free_r+0x46>
 8011e6c:	6811      	ldr	r1, [r2, #0]
 8011e6e:	1855      	adds	r5, r2, r1
 8011e70:	42a5      	cmp	r5, r4
 8011e72:	d10b      	bne.n	8011e8c <_free_r+0x70>
 8011e74:	6824      	ldr	r4, [r4, #0]
 8011e76:	4421      	add	r1, r4
 8011e78:	1854      	adds	r4, r2, r1
 8011e7a:	42a3      	cmp	r3, r4
 8011e7c:	6011      	str	r1, [r2, #0]
 8011e7e:	d1e0      	bne.n	8011e42 <_free_r+0x26>
 8011e80:	681c      	ldr	r4, [r3, #0]
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	6053      	str	r3, [r2, #4]
 8011e86:	4421      	add	r1, r4
 8011e88:	6011      	str	r1, [r2, #0]
 8011e8a:	e7da      	b.n	8011e42 <_free_r+0x26>
 8011e8c:	d902      	bls.n	8011e94 <_free_r+0x78>
 8011e8e:	230c      	movs	r3, #12
 8011e90:	6003      	str	r3, [r0, #0]
 8011e92:	e7d6      	b.n	8011e42 <_free_r+0x26>
 8011e94:	6825      	ldr	r5, [r4, #0]
 8011e96:	1961      	adds	r1, r4, r5
 8011e98:	428b      	cmp	r3, r1
 8011e9a:	bf04      	itt	eq
 8011e9c:	6819      	ldreq	r1, [r3, #0]
 8011e9e:	685b      	ldreq	r3, [r3, #4]
 8011ea0:	6063      	str	r3, [r4, #4]
 8011ea2:	bf04      	itt	eq
 8011ea4:	1949      	addeq	r1, r1, r5
 8011ea6:	6021      	streq	r1, [r4, #0]
 8011ea8:	6054      	str	r4, [r2, #4]
 8011eaa:	e7ca      	b.n	8011e42 <_free_r+0x26>
 8011eac:	b003      	add	sp, #12
 8011eae:	bd30      	pop	{r4, r5, pc}
 8011eb0:	240011c4 	.word	0x240011c4

08011eb4 <sbrk_aligned>:
 8011eb4:	b570      	push	{r4, r5, r6, lr}
 8011eb6:	4e0e      	ldr	r6, [pc, #56]	; (8011ef0 <sbrk_aligned+0x3c>)
 8011eb8:	460c      	mov	r4, r1
 8011eba:	6831      	ldr	r1, [r6, #0]
 8011ebc:	4605      	mov	r5, r0
 8011ebe:	b911      	cbnz	r1, 8011ec6 <sbrk_aligned+0x12>
 8011ec0:	f000 f8bc 	bl	801203c <_sbrk_r>
 8011ec4:	6030      	str	r0, [r6, #0]
 8011ec6:	4621      	mov	r1, r4
 8011ec8:	4628      	mov	r0, r5
 8011eca:	f000 f8b7 	bl	801203c <_sbrk_r>
 8011ece:	1c43      	adds	r3, r0, #1
 8011ed0:	d00a      	beq.n	8011ee8 <sbrk_aligned+0x34>
 8011ed2:	1cc4      	adds	r4, r0, #3
 8011ed4:	f024 0403 	bic.w	r4, r4, #3
 8011ed8:	42a0      	cmp	r0, r4
 8011eda:	d007      	beq.n	8011eec <sbrk_aligned+0x38>
 8011edc:	1a21      	subs	r1, r4, r0
 8011ede:	4628      	mov	r0, r5
 8011ee0:	f000 f8ac 	bl	801203c <_sbrk_r>
 8011ee4:	3001      	adds	r0, #1
 8011ee6:	d101      	bne.n	8011eec <sbrk_aligned+0x38>
 8011ee8:	f04f 34ff 	mov.w	r4, #4294967295
 8011eec:	4620      	mov	r0, r4
 8011eee:	bd70      	pop	{r4, r5, r6, pc}
 8011ef0:	240011c8 	.word	0x240011c8

08011ef4 <_malloc_r>:
 8011ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ef8:	1ccd      	adds	r5, r1, #3
 8011efa:	f025 0503 	bic.w	r5, r5, #3
 8011efe:	3508      	adds	r5, #8
 8011f00:	2d0c      	cmp	r5, #12
 8011f02:	bf38      	it	cc
 8011f04:	250c      	movcc	r5, #12
 8011f06:	2d00      	cmp	r5, #0
 8011f08:	4607      	mov	r7, r0
 8011f0a:	db01      	blt.n	8011f10 <_malloc_r+0x1c>
 8011f0c:	42a9      	cmp	r1, r5
 8011f0e:	d905      	bls.n	8011f1c <_malloc_r+0x28>
 8011f10:	230c      	movs	r3, #12
 8011f12:	603b      	str	r3, [r7, #0]
 8011f14:	2600      	movs	r6, #0
 8011f16:	4630      	mov	r0, r6
 8011f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f1c:	4e2e      	ldr	r6, [pc, #184]	; (8011fd8 <_malloc_r+0xe4>)
 8011f1e:	f000 f89d 	bl	801205c <__malloc_lock>
 8011f22:	6833      	ldr	r3, [r6, #0]
 8011f24:	461c      	mov	r4, r3
 8011f26:	bb34      	cbnz	r4, 8011f76 <_malloc_r+0x82>
 8011f28:	4629      	mov	r1, r5
 8011f2a:	4638      	mov	r0, r7
 8011f2c:	f7ff ffc2 	bl	8011eb4 <sbrk_aligned>
 8011f30:	1c43      	adds	r3, r0, #1
 8011f32:	4604      	mov	r4, r0
 8011f34:	d14d      	bne.n	8011fd2 <_malloc_r+0xde>
 8011f36:	6834      	ldr	r4, [r6, #0]
 8011f38:	4626      	mov	r6, r4
 8011f3a:	2e00      	cmp	r6, #0
 8011f3c:	d140      	bne.n	8011fc0 <_malloc_r+0xcc>
 8011f3e:	6823      	ldr	r3, [r4, #0]
 8011f40:	4631      	mov	r1, r6
 8011f42:	4638      	mov	r0, r7
 8011f44:	eb04 0803 	add.w	r8, r4, r3
 8011f48:	f000 f878 	bl	801203c <_sbrk_r>
 8011f4c:	4580      	cmp	r8, r0
 8011f4e:	d13a      	bne.n	8011fc6 <_malloc_r+0xd2>
 8011f50:	6821      	ldr	r1, [r4, #0]
 8011f52:	3503      	adds	r5, #3
 8011f54:	1a6d      	subs	r5, r5, r1
 8011f56:	f025 0503 	bic.w	r5, r5, #3
 8011f5a:	3508      	adds	r5, #8
 8011f5c:	2d0c      	cmp	r5, #12
 8011f5e:	bf38      	it	cc
 8011f60:	250c      	movcc	r5, #12
 8011f62:	4629      	mov	r1, r5
 8011f64:	4638      	mov	r0, r7
 8011f66:	f7ff ffa5 	bl	8011eb4 <sbrk_aligned>
 8011f6a:	3001      	adds	r0, #1
 8011f6c:	d02b      	beq.n	8011fc6 <_malloc_r+0xd2>
 8011f6e:	6823      	ldr	r3, [r4, #0]
 8011f70:	442b      	add	r3, r5
 8011f72:	6023      	str	r3, [r4, #0]
 8011f74:	e00e      	b.n	8011f94 <_malloc_r+0xa0>
 8011f76:	6822      	ldr	r2, [r4, #0]
 8011f78:	1b52      	subs	r2, r2, r5
 8011f7a:	d41e      	bmi.n	8011fba <_malloc_r+0xc6>
 8011f7c:	2a0b      	cmp	r2, #11
 8011f7e:	d916      	bls.n	8011fae <_malloc_r+0xba>
 8011f80:	1961      	adds	r1, r4, r5
 8011f82:	42a3      	cmp	r3, r4
 8011f84:	6025      	str	r5, [r4, #0]
 8011f86:	bf18      	it	ne
 8011f88:	6059      	strne	r1, [r3, #4]
 8011f8a:	6863      	ldr	r3, [r4, #4]
 8011f8c:	bf08      	it	eq
 8011f8e:	6031      	streq	r1, [r6, #0]
 8011f90:	5162      	str	r2, [r4, r5]
 8011f92:	604b      	str	r3, [r1, #4]
 8011f94:	4638      	mov	r0, r7
 8011f96:	f104 060b 	add.w	r6, r4, #11
 8011f9a:	f000 f865 	bl	8012068 <__malloc_unlock>
 8011f9e:	f026 0607 	bic.w	r6, r6, #7
 8011fa2:	1d23      	adds	r3, r4, #4
 8011fa4:	1af2      	subs	r2, r6, r3
 8011fa6:	d0b6      	beq.n	8011f16 <_malloc_r+0x22>
 8011fa8:	1b9b      	subs	r3, r3, r6
 8011faa:	50a3      	str	r3, [r4, r2]
 8011fac:	e7b3      	b.n	8011f16 <_malloc_r+0x22>
 8011fae:	6862      	ldr	r2, [r4, #4]
 8011fb0:	42a3      	cmp	r3, r4
 8011fb2:	bf0c      	ite	eq
 8011fb4:	6032      	streq	r2, [r6, #0]
 8011fb6:	605a      	strne	r2, [r3, #4]
 8011fb8:	e7ec      	b.n	8011f94 <_malloc_r+0xa0>
 8011fba:	4623      	mov	r3, r4
 8011fbc:	6864      	ldr	r4, [r4, #4]
 8011fbe:	e7b2      	b.n	8011f26 <_malloc_r+0x32>
 8011fc0:	4634      	mov	r4, r6
 8011fc2:	6876      	ldr	r6, [r6, #4]
 8011fc4:	e7b9      	b.n	8011f3a <_malloc_r+0x46>
 8011fc6:	230c      	movs	r3, #12
 8011fc8:	603b      	str	r3, [r7, #0]
 8011fca:	4638      	mov	r0, r7
 8011fcc:	f000 f84c 	bl	8012068 <__malloc_unlock>
 8011fd0:	e7a1      	b.n	8011f16 <_malloc_r+0x22>
 8011fd2:	6025      	str	r5, [r4, #0]
 8011fd4:	e7de      	b.n	8011f94 <_malloc_r+0xa0>
 8011fd6:	bf00      	nop
 8011fd8:	240011c4 	.word	0x240011c4

08011fdc <_realloc_r>:
 8011fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fe0:	4680      	mov	r8, r0
 8011fe2:	4614      	mov	r4, r2
 8011fe4:	460e      	mov	r6, r1
 8011fe6:	b921      	cbnz	r1, 8011ff2 <_realloc_r+0x16>
 8011fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fec:	4611      	mov	r1, r2
 8011fee:	f7ff bf81 	b.w	8011ef4 <_malloc_r>
 8011ff2:	b92a      	cbnz	r2, 8012000 <_realloc_r+0x24>
 8011ff4:	f7ff ff12 	bl	8011e1c <_free_r>
 8011ff8:	4625      	mov	r5, r4
 8011ffa:	4628      	mov	r0, r5
 8011ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012000:	f000 f838 	bl	8012074 <_malloc_usable_size_r>
 8012004:	4284      	cmp	r4, r0
 8012006:	4607      	mov	r7, r0
 8012008:	d802      	bhi.n	8012010 <_realloc_r+0x34>
 801200a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801200e:	d812      	bhi.n	8012036 <_realloc_r+0x5a>
 8012010:	4621      	mov	r1, r4
 8012012:	4640      	mov	r0, r8
 8012014:	f7ff ff6e 	bl	8011ef4 <_malloc_r>
 8012018:	4605      	mov	r5, r0
 801201a:	2800      	cmp	r0, #0
 801201c:	d0ed      	beq.n	8011ffa <_realloc_r+0x1e>
 801201e:	42bc      	cmp	r4, r7
 8012020:	4622      	mov	r2, r4
 8012022:	4631      	mov	r1, r6
 8012024:	bf28      	it	cs
 8012026:	463a      	movcs	r2, r7
 8012028:	f7ff fed0 	bl	8011dcc <memcpy>
 801202c:	4631      	mov	r1, r6
 801202e:	4640      	mov	r0, r8
 8012030:	f7ff fef4 	bl	8011e1c <_free_r>
 8012034:	e7e1      	b.n	8011ffa <_realloc_r+0x1e>
 8012036:	4635      	mov	r5, r6
 8012038:	e7df      	b.n	8011ffa <_realloc_r+0x1e>
	...

0801203c <_sbrk_r>:
 801203c:	b538      	push	{r3, r4, r5, lr}
 801203e:	4d06      	ldr	r5, [pc, #24]	; (8012058 <_sbrk_r+0x1c>)
 8012040:	2300      	movs	r3, #0
 8012042:	4604      	mov	r4, r0
 8012044:	4608      	mov	r0, r1
 8012046:	602b      	str	r3, [r5, #0]
 8012048:	f7f0 fdc8 	bl	8002bdc <_sbrk>
 801204c:	1c43      	adds	r3, r0, #1
 801204e:	d102      	bne.n	8012056 <_sbrk_r+0x1a>
 8012050:	682b      	ldr	r3, [r5, #0]
 8012052:	b103      	cbz	r3, 8012056 <_sbrk_r+0x1a>
 8012054:	6023      	str	r3, [r4, #0]
 8012056:	bd38      	pop	{r3, r4, r5, pc}
 8012058:	240011cc 	.word	0x240011cc

0801205c <__malloc_lock>:
 801205c:	4801      	ldr	r0, [pc, #4]	; (8012064 <__malloc_lock+0x8>)
 801205e:	f000 b811 	b.w	8012084 <__retarget_lock_acquire_recursive>
 8012062:	bf00      	nop
 8012064:	240011d0 	.word	0x240011d0

08012068 <__malloc_unlock>:
 8012068:	4801      	ldr	r0, [pc, #4]	; (8012070 <__malloc_unlock+0x8>)
 801206a:	f000 b80c 	b.w	8012086 <__retarget_lock_release_recursive>
 801206e:	bf00      	nop
 8012070:	240011d0 	.word	0x240011d0

08012074 <_malloc_usable_size_r>:
 8012074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012078:	1f18      	subs	r0, r3, #4
 801207a:	2b00      	cmp	r3, #0
 801207c:	bfbc      	itt	lt
 801207e:	580b      	ldrlt	r3, [r1, r0]
 8012080:	18c0      	addlt	r0, r0, r3
 8012082:	4770      	bx	lr

08012084 <__retarget_lock_acquire_recursive>:
 8012084:	4770      	bx	lr

08012086 <__retarget_lock_release_recursive>:
 8012086:	4770      	bx	lr

08012088 <_init>:
 8012088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801208a:	bf00      	nop
 801208c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801208e:	bc08      	pop	{r3}
 8012090:	469e      	mov	lr, r3
 8012092:	4770      	bx	lr

08012094 <_fini>:
 8012094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012096:	bf00      	nop
 8012098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801209a:	bc08      	pop	{r3}
 801209c:	469e      	mov	lr, r3
 801209e:	4770      	bx	lr
